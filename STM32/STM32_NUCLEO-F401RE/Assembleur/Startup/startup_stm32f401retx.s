/**
 ******************************************************************************
 * @file      startup_stm32f401retx.s
 * @author    Auto-generated by STM32CubeIDE : Modifié et commenté.
 * @brief     STM32F401RETx device vector table for GCC toolchain.
 *            This module performs:
 *                - Set the initial SP
 *                - Set the initial PC == Reset_Handler,
 *                - Set the vector table entries with the exceptions ISR address
 *                - Branches to main in the C library (which eventually
 *                  calls main()).
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

.syntax unified
.cpu cortex-m4
.fpu softvfp
.thumb

.global g_pfnVectors
.global Default_Handler

/* start address for the initialization values of the .data section.
defined in linker script */
.word _sidata
/* start address for the .data section. defined in linker script */
.word _sdata
/* end address for the .data section. defined in linker script */
.word _edata
/* start address for the .bss section. defined in linker script */
.word _sbss
/* end address for the .bss section. defined in linker script */
.word _ebss

/*****************************************************************
*
*					AREA TO DECLARE SYMBOLS
*				ZONE DE DECLARATION DES SYMBOLES
*
*******************************************************************/
/* Syntaxe : .equ nom, valeur */
.equ myvar, 0x87654321 /* Equivalent à #DEFINE myvar 0x87654321



/*****************************************************************
*
*					END OF AREA TO DECLARE SYMBOLS
*				FIN ZONE DE DECLARATION DES SYMBOLES
*
*******************************************************************/
/*****************************************************************
*
*					AREA TO DECLARE CONSTANTS
*				ZONE DE DECLARATION DES CONSTANTES
*
*******************************************************************/
.section .text

/*****************************************************************
*
*					END OF AREA TO DECLARE CONSTANTS
*				FIN DE ZONE DE DECLARATION DES CONSTANTES
*
*******************************************************************/

varconstant:
	.word 0xDEADBEEF /* Déclaration d'une constante fixe mot (= 4 octets : 32 bits) dans le label varconstant*/

/*****************************************************************
*
*					AREA TO INITIALIZED VARIABLE
*				ZONE DE DECLARATION DES VARIABLES
*
*******************************************************************/
.section .data

maVariable:
	.word 1 /* Déclaration d'un mot (= 4 octets) dans le label maVariable int maVariable = 7 */

somme:
	.word 0 /* int somme = 0 */

tableau:
	.word 25,4,2,15,16,101,33,3 /*Déclaration d'un tableau de 3 octets*/

tableau_string:
	.string "Hello !","Coucou" /*Déclaration d'un tableau de chaine de caractère */

/*****************************************************************
*
*					END OF AREA TO INITIALIZED VARIABLE
*			FIN DE ZONE DE DECLARATION DES VARIABLES
*
*******************************************************************/
/*****************************************************************
*
*					AREA TO DECLARE UNINITIALIZED VARIABLE
*				ZONE DE DECLARATION DES VARIABLES NON INITIALISES
*
*******************************************************************/
.section .bss

/*****************************************************************
*
*					END OF AREA TO UNINITIALIZED VARIABLES
*			FIN DE ZONE DE DECLARATION DES VARIABLES NON INITIALISES
*
*******************************************************************/

/**
 * @brief  This is the code that gets called when the processor first
 *          starts execution following a reset event. Only the absolutely
 *          necessary set is performed, after which the application
 *          supplied main() routine is called.
 * @param  None
 * @retval : None
*/

/******************************************************************
*
*		Le programme démarre au reset et initialise le pointeur de pile. Ceci est généré lors de la création
*		du projet et aucun changement n’est nécessaire.
*
*******************************************************************/
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
  mov   sp, r0          /* set stack pointer */
/* Call the clock system intitialization function.*/
  bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
  ldr r1, =_edata
  ldr r2, =_sidata
  movs r3, #0
  b LoopCopyDataInit /*Jumper vers le label : LoopCopyDataInit*/

CopyDataInit:
  ldr r4, [r2, r3]
  str r4, [r0, r3]
  adds r3, r3, #4

LoopCopyDataInit:
  adds r4, r0, r3
  cmp r4, r1
  bcc CopyDataInit

/* Zero fill the bss segment. */
  ldr r2, =_sbss
  ldr r4, =_ebss
  movs r3, #0
  b LoopFillZerobss /*Jumper vers le label : LoopFillZerobss*/

FillZerobss:
  str  r3, [r2]
  adds r2, r2, #4

LoopFillZerobss:
  cmp r2, r4
  bcc FillZerobss

/* Call static constructors */
  bl __libc_init_array
/* Call the application's entry point.*/
  bl main
/*****************************************************************
*
*					AREA TO DECLARE SUBPROGRAM
*				ZONE DE DECLARATIONS DES SOUS PROGRAMMES
*
*******************************************************************/

dosomething:
	movs r0,#0xAB /* copy argument with flag : Equivaut à r0 = 0xAB */
	bx lr /*Instruction de fin de programme */

compteur_modulo_10:
	bx lr /*Instruction de fin de programme */

/*****************************************************************
*
*					END AREA TO DECLARE SUBPROGRAM
*			FIN DE ZONE DE DECLARATIONS DES SOUS PROGRAMMES
*
*******************************************************************/

/*****************************************************************
*
*					MAIN PROGRAM
*				Doit trouver une boucle infinie afin que le microcontroleur fonctionne en permanence.
*
*******************************************************************/

main: /* Déclaration du programme principal */
	/*
	Ce programme joue le rôle d'une boucle for et rajoute 1 à chaque tour de boucle à r1.
	*/
	/*
	ldr r0, =maVariable //Récupére l'adresse de la variable r0
	ldr r1, [r0] //met la valeur pointée par r0 dans r1
	ldr r2, [r0] //On garde en mémoire la valeur initiale de la variable
	loop:
		add r1, r1, #1 //On rajoute 1 à r1
		str r1, [r0] // On met à jour la variable pointé par r0 : maVariable
		cmp r1,#9 //On compare r1 à 9
		blo loop // Condition code jump to loop if lower than "9" si le flag "Z=0" est à 1 (bit 30) du registre xpsr
	str r2, [r0] // On met à jour la variable pointé par r0 : avec la valeur du registre intermédiaire r2 (Valeur initiale de la variable)
	b main //Retour à la fonction main
	*/
	/*
	Ce programme fait la somme de 1 jusqu a 20 des k en décrémentant X de 20 à 0 et renvoi le resultat dans r1
	*/
	/*
	ldr r0, =somme //Récupére l'adresse de la variable r0
	ldr r1, [r0] //met la valeur pointée par r0 dans r1
	mov r2,#20 // On met 20 dans r2 : X
	loop:
		cmp r2, #0 //On compare r2 :X à 0
		beq end //on saute à la fin du programme.
		add r1, r2  //On rajoute 1 à r1
		sub r2, r2, #1 //soustrait 1 au registre r2
		b loop // retour au label loop
	end:
		str r1, [r0] // On stock le résultat de r1 dans la mémoire à l'adresse r0
	b Reset_Handler //Retour en début de programme
	*/
	/*
	Ce programme fait la somme de 1 jusqu a 20 des k en décrémentant X de 20 à 0 en utilisant un sous programme calcul_somme
	*/
	/* Cette instruction appel un sous programme qui est le même que précédement */
	bl calcul_somme // Appel le sous programme calcul_somme et copie PC vers LR
	/*
	* Le but de ce programme est de trouver un min ou un max dans un tableau
	*/
	/*
	bl min
	bl max
	*/
/*
	LoopForever
	équivaut à
	while(1){
	}
*/

LoopForever:

	//subs r1,#1 //Soustrait 1 à r1 en mettant à jour le registre xPSR
    b LoopForever /* Boucle de retour sur le label LoopForever */

  .size Reset_Handler, .-Reset_Handler


/*****************************************************************
*
*					Area to declare interrupt sub-programs
*			Ces sous-programmes d'interruption sont les sous-programmes à exécuter lorsqu'une interruption
*				(IT) provenant d'un périphérique ou d'un port du μcontrôleur survient.
*
*******************************************************************/

calcul_somme:
	ldr r0, =somme //Récupére l'adresse de la variable r0
	ldr r1, [r0] //met la valeur pointée par r0 dans r1
	mov r2,#20 // On met 20 dans r2 : X
	loop:
		cmp r2, #0 //On compare r2 :X à 0
		beq end //on saute à la fin du programme.
		add r1, r2  //On rajoute r2 à r1
		sub r2, r2, #1 //soustrait 1 au registre r2
		b loop // retour au label loop
	end:
		str r1, [r0] // On stock le résultat de r1 dans la mémoire à l'adresse r0
	bx lr //Retour à l'instruction précédente

min:

	bx lr //Retour à l'instruction précédente

max:
	bx lr //Retour à l'instruction précédente

testfunc:
	bx lr //Retour à l'instruction précédente
/*****************************************************************
*
*					END OF Area to declare interrupt sub-programs
*
*******************************************************************/

/*****************************************************************
*
*					ENF OF MAIN PROGRAM
*
*******************************************************************/
/**
 * @brief  This is the code that gets called when the processor receives an
 *         unexpected interrupt.  This simply enters an infinite loop, preserving
 *         the system state for examination by a debugger.
 *
 * @param  None
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
  .size Default_Handler, .-Default_Handler

/******************************************************************************
*
* The STM32F401RETx vector table.  Note that the proper constructs
* must be placed on this to ensure that it ends up at physical address
* 0x0000.0000.
*
******************************************************************************/
/*****************************************************************************
*
*				ZONE DE DECLARATION DES VECTEURS D'INTERRUPTION
*				Cette zone se trouve dans la mémoire programme. Les vecteurs d'interruption sont en fait les liens
*				entre 1'interruption elle-même et le sous-programme d'interruption correspondant.
*				Ces noms sont imposés par ARM. Il ne faut rien changer à cette zone.
*
*******************************************************************************/
  .section .isr_vector,"a",%progbits
  .type g_pfnVectors, %object
  .size g_pfnVectors, .-g_pfnVectors

g_pfnVectors:
  .word _estack
  .word Reset_Handler
  .word NMI_Handler
  .word HardFault_Handler
  .word	MemManage_Handler
  .word	BusFault_Handler
  .word	UsageFault_Handler
  .word	0
  .word	0
  .word	0
  .word	0
  .word	SVC_Handler
  .word	DebugMon_Handler
  .word	0
  .word	PendSV_Handler
  .word	SysTick_Handler
  .word	0                            			/* Reserved                                                           */
  .word	PVD_IRQHandler               			/* PVD through EXTI line detection interrupt                          */
  .word	TAMP_STAMP_IRQHandler        			/* Tamper and TimeStamp interrupts through the EXTI line              */
  .word	RTC_WKUP_IRQHandler          			/* RTC Wakeup interrupt through the EXTI line                         */
  .word	FLASH_IRQHandler             			/* FLASH global interrupt                                             */
  .word	RCC_IRQHandler               			/* RCC global interrupt                                               */
  .word	EXTI0_IRQHandler             			/* EXTI Line0 interrupt                                               */
  .word	EXTI1_IRQHandler             			/* EXTI Line1 interrupt                                               */
  .word	EXTI2_IRQHandler             			/* EXTI Line2 interrupt                                               */
  .word	EXTI3_IRQHandler             			/* EXTI Line3 interrupt                                               */
  .word	EXTI4_IRQHandler             			/* EXTI Line4 interrupt                                               */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	ADC_IRQHandler               			/* ADC1 global interrupt                                              */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	EXTI9_5_IRQHandler           			/* EXTI Line[9:5] interrupts                                          */
  .word	TIM1_BRK_TIM9_IRQHandler     			/* TIM1 Break interrupt and TIM9 global interrupt                     */
  .word	TIM1_UP_TIM10_IRQHandler     			/* TIM1 Update interrupt and TIM10 global interrupt                   */
  .word	TIM1_TRG_COM_TIM11_IRQHandler			/* TIM1 Trigger and Commutation interrupts and TIM11 global interrupt */
  .word	TIM1_CC_IRQHandler           			/* TIM1 Capture Compare interrupt                                     */
  .word	TIM2_IRQHandler              			/* TIM2 global interrupt                                              */
  .word	TIM3_IRQHandler              			/* TIM3 global interrupt                                              */
  .word	0                            			/* Reserved                                                           */
  .word	I2C1_EV_IRQHandler           			/* I2C1 event interrupt                                               */
  .word	I2C1_ER_IRQHandler           			/* I2C1 error interrupt                                               */
  .word	I2C2_EV_IRQHandler           			/* I2C2 event interrupt                                               */
  .word	I2C2_ER_IRQHandler           			/* I2C2 error interrupt                                               */
  .word	SPI1_IRQHandler              			/* SPI1 global interrupt                                              */
  .word	SPI2_IRQHandler              			/* SPI2 global interrupt                                              */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	EXTI15_10_IRQHandler         			/* EXTI Line[15:10] interrupts                                        */
  .word	RTC_Alarm_IRQHandler         			/* RTC Alarms (A and B) through EXTI line interrupt                   */
  .word	OTG_FS_WKUP_IRQHandler       			/* USB On-The-Go FS Wakeup through EXTI line interrupt                */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	SDIO_IRQHandler              			/* SDIO global interrupt                                              */
  .word	0                            			/* Reserved                                                           */
  .word	SPI3_IRQHandler              			/* SPI3 global interrupt                                              */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	OTG_FS_IRQHandler            			/* USB On The Go FS global interrupt                                  */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	I2C3_EV_IRQHandler           			/* I2C3 event interrupt                                               */
  .word	I2C3_ER_IRQHandler           			/* I2C3 error interrupt                                               */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	FPU_IRQHandler               			/* Floating point interrupt                                           */
  .word	0                            			/* Reserved                                                           */
  .word	0                            			/* Reserved                                                           */
  .word	SPI4_IRQHandler              			/* SPI4 global interrupt                                              */

/*******************************************************************************
*
* Provide weak aliases for each Exception handler to the Default_Handler.
* As they are weak aliases, any function with the same name will override
* this definition.
*
*******************************************************************************/
/******************************************************************************
*
*					Le nom des programmes d’interruption est imposé par ARM à des fins de portabilité entre tous les
*					fabricants de microcontrôleurs basés sur le coeur Cortex M. Lors de la création d’un projet, des
*					fonctions sont déjà créées dans la section weak aliases
*
*
*******************************************************************************/
	.weak	NMI_Handler
	.thumb_set NMI_Handler,Default_Handler

	.weak	HardFault_Handler
	.thumb_set HardFault_Handler,Default_Handler

	.weak	MemManage_Handler
	.thumb_set MemManage_Handler,Default_Handler

	.weak	BusFault_Handler
	.thumb_set BusFault_Handler,Default_Handler

	.weak	UsageFault_Handler
	.thumb_set UsageFault_Handler,Default_Handler

	.weak	SVC_Handler
	.thumb_set SVC_Handler,Default_Handler

	.weak	DebugMon_Handler
	.thumb_set DebugMon_Handler,Default_Handler

	.weak	PendSV_Handler
	.thumb_set PendSV_Handler,Default_Handler

	.weak	SysTick_Handler
	.thumb_set SysTick_Handler,Default_Handler

	.weak	PVD_IRQHandler
	.thumb_set PVD_IRQHandler,Default_Handler

	.weak	TAMP_STAMP_IRQHandler
	.thumb_set TAMP_STAMP_IRQHandler,Default_Handler

	.weak	RTC_WKUP_IRQHandler
	.thumb_set RTC_WKUP_IRQHandler,Default_Handler

	.weak	FLASH_IRQHandler
	.thumb_set FLASH_IRQHandler,Default_Handler

	.weak	RCC_IRQHandler
	.thumb_set RCC_IRQHandler,Default_Handler

	.weak	EXTI0_IRQHandler
	.thumb_set EXTI0_IRQHandler,Default_Handler

	.weak	EXTI1_IRQHandler
	.thumb_set EXTI1_IRQHandler,Default_Handler

	.weak	EXTI2_IRQHandler
	.thumb_set EXTI2_IRQHandler,Default_Handler

	.weak	EXTI3_IRQHandler
	.thumb_set EXTI3_IRQHandler,Default_Handler

	.weak	EXTI4_IRQHandler
	.thumb_set EXTI4_IRQHandler,Default_Handler

	.weak	ADC_IRQHandler
	.thumb_set ADC_IRQHandler,Default_Handler

	.weak	EXTI9_5_IRQHandler
	.thumb_set EXTI9_5_IRQHandler,Default_Handler

	.weak	TIM1_BRK_TIM9_IRQHandler
	.thumb_set TIM1_BRK_TIM9_IRQHandler,Default_Handler

	.weak	TIM1_UP_TIM10_IRQHandler
	.thumb_set TIM1_UP_TIM10_IRQHandler,Default_Handler

	.weak	TIM1_TRG_COM_TIM11_IRQHandler
	.thumb_set TIM1_TRG_COM_TIM11_IRQHandler,Default_Handler

	.weak	TIM1_CC_IRQHandler
	.thumb_set TIM1_CC_IRQHandler,Default_Handler

	.weak	TIM2_IRQHandler
	.thumb_set TIM2_IRQHandler,Default_Handler

	.weak	TIM3_IRQHandler
	.thumb_set TIM3_IRQHandler,Default_Handler

	.weak	I2C1_EV_IRQHandler
	.thumb_set I2C1_EV_IRQHandler,Default_Handler

	.weak	I2C1_ER_IRQHandler
	.thumb_set I2C1_ER_IRQHandler,Default_Handler

	.weak	I2C2_EV_IRQHandler
	.thumb_set I2C2_EV_IRQHandler,Default_Handler

	.weak	I2C2_ER_IRQHandler
	.thumb_set I2C2_ER_IRQHandler,Default_Handler

	.weak	SPI1_IRQHandler
	.thumb_set SPI1_IRQHandler,Default_Handler

	.weak	SPI2_IRQHandler
	.thumb_set SPI2_IRQHandler,Default_Handler

/*************************************************************
*
*			Toutes les appellent un default_Handler.
*			Par simplification, pour appeler un programme d’interruption, changer le default_handler par le
*			nom de la fonction qui doit être appelée par l’interruption : par exemple pour notre cas la fonction testfunc que nous avons créer au dessus
*
*
*****************************************************************/
	.weak	EXTI15_10_IRQHandler
	.thumb_set EXTI15_10_IRQHandler,testfunc

	.weak	RTC_Alarm_IRQHandler
	.thumb_set RTC_Alarm_IRQHandler,Default_Handler

	.weak	OTG_FS_WKUP_IRQHandler
	.thumb_set OTG_FS_WKUP_IRQHandler,Default_Handler

	.weak	SDIO_IRQHandler
	.thumb_set SDIO_IRQHandler,Default_Handler

	.weak	SPI3_IRQHandler
	.thumb_set SPI3_IRQHandler,Default_Handler

	.weak	OTG_FS_IRQHandler
	.thumb_set OTG_FS_IRQHandler,Default_Handler

	.weak	I2C3_EV_IRQHandler
	.thumb_set I2C3_EV_IRQHandler,Default_Handler

	.weak	I2C3_ER_IRQHandler
	.thumb_set I2C3_ER_IRQHandler,Default_Handler

	.weak	FPU_IRQHandler
	.thumb_set FPU_IRQHandler,Default_Handler

	.weak	SPI4_IRQHandler
	.thumb_set SPI4_IRQHandler,Default_Handler

	.weak	SystemInit

/************************ (C) COPYRIGHT STMicroelectonics *****END OF FILE****/
