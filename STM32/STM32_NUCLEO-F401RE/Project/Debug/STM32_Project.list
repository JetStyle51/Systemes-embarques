
STM32_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080050ac  080050ac  000150ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800516c  0800516c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800516c  0800516c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005174  08005174  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800517c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000088  08005204  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005204  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144fd  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029b3  00000000  00000000  000345b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  00036f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001288  00000000  00000000  00038330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000190bd  00000000  00000000  000395b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001015e  00000000  00000000  00052675  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b725  00000000  00000000  000627d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fdef8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f0  00000000  00000000  000fdf74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005094 	.word	0x08005094

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08005094 	.word	0x08005094

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <seg7>:
 *  Created on: Nov 19, 2020
 *      Author: SESA598592
 */
#include "main.h"

uint8_t seg7(uint8_t value){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	uint8_t out;
	switch(value){
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b09      	cmp	r3, #9
 800058e:	d835      	bhi.n	80005fc <seg7+0x7c>
 8000590:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <seg7+0x18>)
 8000592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000596:	bf00      	nop
 8000598:	080005c1 	.word	0x080005c1
 800059c:	080005c7 	.word	0x080005c7
 80005a0:	080005cd 	.word	0x080005cd
 80005a4:	080005d3 	.word	0x080005d3
 80005a8:	080005d9 	.word	0x080005d9
 80005ac:	080005df 	.word	0x080005df
 80005b0:	080005e5 	.word	0x080005e5
 80005b4:	080005eb 	.word	0x080005eb
 80005b8:	080005f1 	.word	0x080005f1
 80005bc:	080005f7 	.word	0x080005f7
		case(0):
			out = 0b1000000;
 80005c0:	2340      	movs	r3, #64	; 0x40
 80005c2:	73fb      	strb	r3, [r7, #15]
			break;
 80005c4:	e01a      	b.n	80005fc <seg7+0x7c>
		case(1):
			out = 0b1111001;
 80005c6:	2379      	movs	r3, #121	; 0x79
 80005c8:	73fb      	strb	r3, [r7, #15]
			break;
 80005ca:	e017      	b.n	80005fc <seg7+0x7c>
		case(2):
			out = 0b0100100;
 80005cc:	2324      	movs	r3, #36	; 0x24
 80005ce:	73fb      	strb	r3, [r7, #15]
			break;
 80005d0:	e014      	b.n	80005fc <seg7+0x7c>
		case(3):
			out = 0b0110000;
 80005d2:	2330      	movs	r3, #48	; 0x30
 80005d4:	73fb      	strb	r3, [r7, #15]
			break;
 80005d6:	e011      	b.n	80005fc <seg7+0x7c>
		case(4):
			out = 0b0011001;
 80005d8:	2319      	movs	r3, #25
 80005da:	73fb      	strb	r3, [r7, #15]
			break;
 80005dc:	e00e      	b.n	80005fc <seg7+0x7c>
		case(5):
			out = 0b0010010;
 80005de:	2312      	movs	r3, #18
 80005e0:	73fb      	strb	r3, [r7, #15]
			break;
 80005e2:	e00b      	b.n	80005fc <seg7+0x7c>
		case(6):
			out = 0b0000010;
 80005e4:	2302      	movs	r3, #2
 80005e6:	73fb      	strb	r3, [r7, #15]
			break;
 80005e8:	e008      	b.n	80005fc <seg7+0x7c>
		case(7):
			out = 0b1111000;
 80005ea:	2378      	movs	r3, #120	; 0x78
 80005ec:	73fb      	strb	r3, [r7, #15]
			break;
 80005ee:	e005      	b.n	80005fc <seg7+0x7c>
		case(8):
			out = 0b0000000;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
			break;
 80005f4:	e002      	b.n	80005fc <seg7+0x7c>
		case(9):
			out = 0b0010000;
 80005f6:	2310      	movs	r3, #16
 80005f8:	73fb      	strb	r3, [r7, #15]
			break;
 80005fa:	bf00      	nop
	}
	HAL_GPIO_WritePin(HEXA_GPIO_Port, HEXA_Pin, out && 1);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bf14      	ite	ne
 8000602:	2301      	movne	r3, #1
 8000604:	2300      	moveq	r3, #0
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060e:	4826      	ldr	r0, [pc, #152]	; (80006a8 <seg7+0x128>)
 8000610:	f001 fd80 	bl	8002114 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEXB_GPIO_Port, HEXB_Pin, out && 2);
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	bf14      	ite	ne
 800061a:	2301      	movne	r3, #1
 800061c:	2300      	moveq	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	4820      	ldr	r0, [pc, #128]	; (80006a8 <seg7+0x128>)
 8000628:	f001 fd74 	bl	8002114 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEXC_GPIO_Port, HEXC_Pin, out && 4);
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	2b00      	cmp	r3, #0
 8000630:	bf14      	ite	ne
 8000632:	2301      	movne	r3, #1
 8000634:	2300      	moveq	r3, #0
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063e:	481a      	ldr	r0, [pc, #104]	; (80006a8 <seg7+0x128>)
 8000640:	f001 fd68 	bl	8002114 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEXD_GPIO_Port, HEXD_Pin, out && 8);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	2b00      	cmp	r3, #0
 8000648:	bf14      	ite	ne
 800064a:	2301      	movne	r3, #1
 800064c:	2300      	moveq	r3, #0
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	2110      	movs	r1, #16
 8000654:	4815      	ldr	r0, [pc, #84]	; (80006ac <seg7+0x12c>)
 8000656:	f001 fd5d 	bl	8002114 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEXE_GPIO_Port, HEXE_Pin, out && 16);
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf14      	ite	ne
 8000660:	2301      	movne	r3, #1
 8000662:	2300      	moveq	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	2120      	movs	r1, #32
 800066a:	4810      	ldr	r0, [pc, #64]	; (80006ac <seg7+0x12c>)
 800066c:	f001 fd52 	bl	8002114 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEXF_GPIO_Port, HEXF_Pin, out && 32);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf14      	ite	ne
 8000676:	2301      	movne	r3, #1
 8000678:	2300      	moveq	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	2140      	movs	r1, #64	; 0x40
 8000680:	480a      	ldr	r0, [pc, #40]	; (80006ac <seg7+0x12c>)
 8000682:	f001 fd47 	bl	8002114 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEXG_GPIO_Port, HEXG_Pin, out && 64);
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf14      	ite	ne
 800068c:	2301      	movne	r3, #1
 800068e:	2300      	moveq	r3, #0
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <seg7+0x130>)
 8000698:	f001 fd3c 	bl	8002114 <HAL_GPIO_WritePin>

	return (out);
 800069c:	7bfb      	ldrb	r3, [r7, #15]


}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40020000 	.word	0x40020000
 80006ac:	40020400 	.word	0x40020400
 80006b0:	40020800 	.word	0x40020800

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 ffa2 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f84c 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 fb20 	bl	8000d04 <MX_GPIO_Init>
  MX_RTC_Init();
 80006c4:	f000 f95c 	bl	8000980 <MX_RTC_Init>
  MX_TIM3_Init();
 80006c8:	f000 faa0 	bl	8000c0c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80006cc:	f000 faf0 	bl	8000cb0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006d0:	f000 fa4a 	bl	8000b68 <MX_TIM2_Init>
  MX_ADC1_Init();
 80006d4:	f000 f8ba 	bl	800084c <MX_ADC1_Init>
  MX_I2C2_Init();
 80006d8:	f000 f90a 	bl	80008f0 <MX_I2C2_Init>
  MX_IWDG_Init();
 80006dc:	f000 f936 	bl	800094c <MX_IWDG_Init>
  MX_SPI2_Init();
 80006e0:	f000 f9b6 	bl	8000a50 <MX_SPI2_Init>
  MX_TIM1_Init();
 80006e4:	f000 f9ea 	bl	8000abc <MX_TIM1_Init>


  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80006e8:	4816      	ldr	r0, [pc, #88]	; (8000744 <main+0x90>)
 80006ea:	f003 f848 	bl	800377e <HAL_TIM_Base_Start_IT>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <main+0x44>
          Error_Handler();
 80006f4:	f000 fc16 	bl	8000f24 <Error_Handler>
  }
  print_help(&huart2);
 80006f8:	4813      	ldr	r0, [pc, #76]	; (8000748 <main+0x94>)
 80006fa:	f000 ff39 	bl	8001570 <print_help>

  /*##-1- Check if the system has resumed from IWDG reset ####################*/
  if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <main+0x98>)
 8000700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00b      	beq.n	8000722 <main+0x6e>
  {
    /* IWDGRST flag set: Turn LED1 on */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2120      	movs	r1, #32
 800070e:	4810      	ldr	r0, [pc, #64]	; (8000750 <main+0x9c>)
 8000710:	f001 fd00 	bl	8002114 <HAL_GPIO_WritePin>

    /* Clear reset flags */
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <main+0x98>)
 8000716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <main+0x98>)
 800071a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800071e:	6753      	str	r3, [r2, #116]	; 0x74
 8000720:	e004      	b.n	800072c <main+0x78>
  }
  else
  {
    /* IWDGRST flag is not set: Turn LED1 off */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	480a      	ldr	r0, [pc, #40]	; (8000750 <main+0x9c>)
 8000728:	f001 fcf4 	bl	8002114 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(2000);
 800072c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000730:	f000 ffd8 	bl	80016e4 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <main+0xa0>)
 8000736:	f001 feaa 	bl	800248e <HAL_IWDG_Refresh>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800073a:	2120      	movs	r1, #32
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <main+0x9c>)
 800073e:	f001 fd02 	bl	8002146 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8000742:	e7f3      	b.n	800072c <main+0x78>
 8000744:	20000250 	.word	0x20000250
 8000748:	20000290 	.word	0x20000290
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000
 8000754:	20000108 	.word	0x20000108

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b098      	sub	sp, #96	; 0x60
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f004 f886 	bl	8004878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <SystemClock_Config+0xec>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a2b      	ldr	r2, [pc, #172]	; (8000844 <SystemClock_Config+0xec>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <SystemClock_Config+0xec>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a8:	2300      	movs	r3, #0
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <SystemClock_Config+0xf0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b4:	4a24      	ldr	r2, [pc, #144]	; (8000848 <SystemClock_Config+0xf0>)
 80007b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SystemClock_Config+0xf0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80007c8:	230e      	movs	r3, #14
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007dc:	2300      	movs	r3, #0
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fe63 	bl	80024b0 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007f0:	f000 fb98 	bl	8000f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 f8be 	bl	8002990 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800081a:	f000 fb83 	bl	8000f24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800081e:	2302      	movs	r3, #2
 8000820:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000826:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4618      	mov	r0, r3
 800082e:	f002 faa1 	bl	8002d74 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000838:	f000 fb74 	bl	8000f24 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3760      	adds	r7, #96	; 0x60
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <MX_ADC1_Init+0x9c>)
 8000862:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_ADC1_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_ADC1_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_ADC1_Init+0x98>)
 800088c:	4a17      	ldr	r2, [pc, #92]	; (80008ec <MX_ADC1_Init+0xa0>)
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000898:	2201      	movs	r2, #1
 800089a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_ADC1_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_ADC1_Init+0x98>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <MX_ADC1_Init+0x98>)
 80008ac:	f000 ff3c 	bl	8001728 <HAL_ADC_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fb35 	bl	8000f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_ADC1_Init+0x98>)
 80008cc:	f000 ff70 	bl	80017b0 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008d6:	f000 fb25 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001a8 	.word	0x200001a8
 80008e8:	40012000 	.word	0x40012000
 80008ec:	0f000001 	.word	0x0f000001

080008f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_I2C2_Init+0x50>)
 80008f6:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_I2C2_Init+0x54>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_I2C2_Init+0x50>)
 80008fc:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_I2C2_Init+0x58>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_I2C2_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_I2C2_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_I2C2_Init+0x50>)
 800090e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000912:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_I2C2_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_I2C2_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_I2C2_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_I2C2_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_I2C2_Init+0x50>)
 800092e:	f001 fc3d 	bl	80021ac <HAL_I2C_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000938:	f000 faf4 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000114 	.word	0x20000114
 8000944:	40005800 	.word	0x40005800
 8000948:	000186a0 	.word	0x000186a0

0800094c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_IWDG_Init+0x2c>)
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <MX_IWDG_Init+0x30>)
 8000954:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_IWDG_Init+0x2c>)
 8000958:	2203      	movs	r2, #3
 800095a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_IWDG_Init+0x2c>)
 800095e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000962:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_IWDG_Init+0x2c>)
 8000966:	f001 fd59 	bl	800241c <HAL_IWDG_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000970:	f000 fad8 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000108 	.word	0x20000108
 800097c:	40003000 	.word	0x40003000

08000980 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <MX_RTC_Init+0xc8>)
 800099a:	4a2c      	ldr	r2, [pc, #176]	; (8000a4c <MX_RTC_Init+0xcc>)
 800099c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_RTC_Init+0xc8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009a4:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <MX_RTC_Init+0xc8>)
 80009a6:	227f      	movs	r2, #127	; 0x7f
 80009a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_RTC_Init+0xc8>)
 80009ac:	22ff      	movs	r2, #255	; 0xff
 80009ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_RTC_Init+0xc8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_RTC_Init+0xc8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_RTC_Init+0xc8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c2:	4821      	ldr	r0, [pc, #132]	; (8000a48 <MX_RTC_Init+0xc8>)
 80009c4:	f002 fac4 	bl	8002f50 <HAL_RTC_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 faa9 	bl	8000f24 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 80009d2:	2101      	movs	r1, #1
 80009d4:	481c      	ldr	r0, [pc, #112]	; (8000a48 <MX_RTC_Init+0xc8>)
 80009d6:	f002 fe07 	bl	80035e8 <HAL_RTCEx_BKUPRead>
 80009da:	4602      	mov	r2, r0
 80009dc:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d027      	beq.n	8000a34 <MX_RTC_Init+0xb4>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 80009e4:	2317      	movs	r3, #23
 80009e6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 58;
 80009e8:	233a      	movs	r3, #58	; 0x3a
 80009ea:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 80009ec:	2332      	movs	r3, #50	; 0x32
 80009ee:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	4619      	mov	r1, r3
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <MX_RTC_Init+0xc8>)
 8000a00:	f002 fb37 	bl	8003072 <HAL_RTC_SetTime>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8000a0a:	f000 fa8b 	bl	8000f24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8000a12:	2311      	movs	r3, #17
 8000a14:	707b      	strb	r3, [r7, #1]
  sDate.Date = 19;
 8000a16:	2313      	movs	r3, #19
 8000a18:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 8000a1a:	2314      	movs	r3, #20
 8000a1c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_RTC_Init+0xc8>)
 8000a26:	f002 fc3f 	bl	80032a8 <HAL_RTC_SetDate>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000a30:	f000 fa78 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  }
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); //Backup register to remember time set
 8000a34:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_RTC_Init+0xc8>)
 8000a3c:	f002 fdba 	bl	80035b4 <HAL_RTCEx_BKUPWrite>


  /* USER CODE END RTC_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200001f0 	.word	0x200001f0
 8000a4c:	40002800 	.word	0x40002800

08000a50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <MX_SPI2_Init+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000aa2:	f002 fdb9 	bl	8003618 <HAL_SPI_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000aac:	f000 fa3a 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200000b0 	.word	0x200000b0
 8000ab8:	40003800 	.word	0x40003800

08000abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_TIM1_Init+0xa4>)
 8000ada:	4a22      	ldr	r2, [pc, #136]	; (8000b64 <MX_TIM1_Init+0xa8>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_TIM1_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_TIM1_Init+0xa4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_TIM1_Init+0xa4>)
 8000aec:	220a      	movs	r2, #10
 8000aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_TIM1_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_TIM1_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_TIM1_Init+0xa4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b02:	4817      	ldr	r0, [pc, #92]	; (8000b60 <MX_TIM1_Init+0xa4>)
 8000b04:	f002 fdec 	bl	80036e0 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000b0e:	f000 fa09 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b16:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_TIM1_Init+0xa4>)
 8000b2c:	f002 ff53 	bl	80039d6 <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000b36:	f000 f9f5 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_TIM1_Init+0xa4>)
 8000b48:	f003 f93e 	bl	8003dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000b52:	f000 f9e7 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000210 	.word	0x20000210
 8000b64:	40010000 	.word	0x40010000

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <MX_TIM2_Init+0xa0>)
 8000b86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_TIM2_Init+0xa0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_TIM2_Init+0xa0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_TIM2_Init+0xa0>)
 8000b9a:	2209      	movs	r2, #9
 8000b9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM2_Init+0xa0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_TIM2_Init+0xa0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000baa:	4817      	ldr	r0, [pc, #92]	; (8000c08 <MX_TIM2_Init+0xa0>)
 8000bac:	f002 fd98 	bl	80036e0 <HAL_TIM_Base_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000bb6:	f000 f9b5 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_TIM2_Init+0xa0>)
 8000bd4:	f002 feff 	bl	80039d6 <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000bde:	f000 f9a1 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_TIM2_Init+0xa0>)
 8000bf0:	f003 f8ea 	bl	8003dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bfa:	f000 f993 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000250 	.word	0x20000250

08000c0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	463b      	mov	r3, r7
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_TIM3_Init+0x9c>)
 8000c2a:	4a20      	ldr	r2, [pc, #128]	; (8000cac <MX_TIM3_Init+0xa0>)
 8000c2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_TIM3_Init+0x9c>)
 8000c30:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000c34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_TIM3_Init+0x9c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000-1;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM3_Init+0x9c>)
 8000c3e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000c42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_TIM3_Init+0x9c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <MX_TIM3_Init+0x9c>)
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c50:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <MX_TIM3_Init+0x9c>)
 8000c52:	f002 fd45 	bl	80036e0 <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c5c:	f000 f962 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <MX_TIM3_Init+0x9c>)
 8000c6e:	f002 feb2 	bl	80039d6 <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c78:	f000 f954 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	4619      	mov	r1, r3
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <MX_TIM3_Init+0x9c>)
 8000c8a:	f003 f89d 	bl	8003dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c94:	f000 f946 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <MX_TIM3_Init+0x9c>)
 8000c9a:	f002 fd4c 	bl	8003736 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000168 	.word	0x20000168
 8000cac:	40000400 	.word	0x40000400

08000cb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MX_USART2_UART_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000ce8:	f003 f8f0 	bl	8003ecc <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f000 f917 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000290 	.word	0x20000290
 8000d00:	40004400 	.word	0x40004400

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a44      	ldr	r2, [pc, #272]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a36      	ldr	r2, [pc, #216]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a2f      	ldr	r2, [pc, #188]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_GPIO_Init+0x130>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_VERTE_Pin|HEXA_Pin|HEXB_Pin|HEXC_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000d90:	4829      	ldr	r0, [pc, #164]	; (8000e38 <MX_GPIO_Init+0x134>)
 8000d92:	f001 f9bf 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEXG_GPIO_Port, HEXG_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	4828      	ldr	r0, [pc, #160]	; (8000e3c <MX_GPIO_Init+0x138>)
 8000d9c:	f001 f9ba 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEXD_Pin|HEXE_Pin|HEXF_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2170      	movs	r1, #112	; 0x70
 8000da4:	4826      	ldr	r0, [pc, #152]	; (8000e40 <MX_GPIO_Init+0x13c>)
 8000da6:	f001 f9b5 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOUTON_BLEU_Pin */
  GPIO_InitStruct.Pin = BOUTON_BLEU_Pin;
 8000daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_GPIO_Init+0x140>)
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOUTON_BLEU_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	481f      	ldr	r0, [pc, #124]	; (8000e3c <MX_GPIO_Init+0x138>)
 8000dc0:	f001 f826 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_VERTE_Pin HEXA_Pin HEXB_Pin HEXC_Pin */
  GPIO_InitStruct.Pin = LED_VERTE_Pin|HEXA_Pin|HEXB_Pin|HEXC_Pin;
 8000dc4:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4816      	ldr	r0, [pc, #88]	; (8000e38 <MX_GPIO_Init+0x134>)
 8000dde:	f001 f817 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEXG_Pin */
  GPIO_InitStruct.Pin = HEXG_Pin;
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HEXG_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <MX_GPIO_Init+0x138>)
 8000dfa:	f001 f809 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : HEXD_Pin HEXE_Pin HEXF_Pin */
  GPIO_InitStruct.Pin = HEXD_Pin|HEXE_Pin|HEXF_Pin;
 8000dfe:	2370      	movs	r3, #112	; 0x70
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <MX_GPIO_Init+0x13c>)
 8000e16:	f000 fffb 	bl	8001e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2028      	movs	r0, #40	; 0x28
 8000e20:	f000 ffbf 	bl	8001da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e24:	2028      	movs	r0, #40	; 0x28
 8000e26:	f000 ffd8 	bl	8001dda <HAL_NVIC_EnableIRQ>

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020400 	.word	0x40020400
 8000e44:	10110000 	.word	0x10110000

08000e48 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  Cette fonction s'appelle sur interruption lorsqu'on appui sur le boutton bleu PB13.
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
	uint8_t compteur_tim2 = TIM2->CNT;
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	77fb      	strb	r3, [r7, #31]
	uint8_t out;
	if(GPIO_Pin == GPIO_PIN_13) {
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e60:	d117      	bne.n	8000e92 <HAL_GPIO_EXTI_Callback+0x4a>
		uint8_t buffer[11];

		out = seg7(compteur_tim2);
 8000e62:	7ffb      	ldrb	r3, [r7, #31]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fb8b 	bl	8000580 <seg7>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	77bb      	strb	r3, [r7, #30]

		sprintf(buffer,"OUT: %d\r\n", out);
 8000e6e:	7fba      	ldrb	r2, [r7, #30]
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4909      	ldr	r1, [pc, #36]	; (8000e9c <HAL_GPIO_EXTI_Callback+0x54>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 fd06 	bl	8004888 <siprintf>
		size_t size = (uint8_t) sizeof(buffer) / sizeof(buffer[0]);
 8000e7c:	230b      	movs	r3, #11
 8000e7e:	61bb      	str	r3, [r7, #24]
		Send_on_UART2(&huart2, buffer, size);
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000e8c:	f000 fb5e 	bl	800154c <Send_on_UART2>
		//switch 7 SEG

	} else {
		__NOP();
	}
}
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_EXTI_Callback+0x4c>
		__NOP();
 8000e92:	bf00      	nop
}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	080050ac 	.word	0x080050ac
 8000ea0:	20000290 	.word	0x20000290

08000ea4 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Cette fonction s'appelle sur interruption à l'aide du timer3.
  * @retval None
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	uint8_t END_MSG[35] = "Overflow Reached! Counter Reset!\n\r";
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000eae:	f107 040c 	add.w	r4, r7, #12
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	8022      	strh	r2, [r4, #0]
 8000ec2:	3402      	adds	r4, #2
 8000ec4:	0c1b      	lsrs	r3, r3, #16
 8000ec6:	7023      	strb	r3, [r4, #0]
	if (htim == &htim1){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d106      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x3a>
		HAL_UART_Transmit(&huart2, END_MSG, sizeof(END_MSG), 100);
 8000ed0:	f107 010c 	add.w	r1, r7, #12
 8000ed4:	2364      	movs	r3, #100	; 0x64
 8000ed6:	2223      	movs	r2, #35	; 0x23
 8000ed8:	480e      	ldr	r0, [pc, #56]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000eda:	f003 f844 	bl	8003f66 <HAL_UART_Transmit>
	}
	if (htim == &htim2){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10e      	bne.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x60>
		date(&hrtc, &huart2);
 8000ee6:	490b      	ldr	r1, [pc, #44]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000eea:	f000 faef 	bl	80014cc <date>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000eee:	2120      	movs	r1, #32
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ef2:	f001 f928 	bl	8002146 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart2, END_MSG, sizeof(END_MSG), 100);
 8000ef6:	f107 010c 	add.w	r1, r7, #12
 8000efa:	2364      	movs	r3, #100	; 0x64
 8000efc:	2223      	movs	r2, #35	; 0x23
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f00:	f003 f831 	bl	8003f66 <HAL_UART_Transmit>
	}

}
 8000f04:	bf00      	nop
 8000f06:	3730      	adds	r7, #48	; 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0c:	080050b8 	.word	0x080050b8
 8000f10:	20000210 	.word	0x20000210
 8000f14:	20000290 	.word	0x20000290
 8000f18:	20000250 	.word	0x20000250
 8000f1c:	200001f0 	.word	0x200001f0
 8000f20:	40020000 	.word	0x40020000

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <Error_Handler+0x6>

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_ADC_MspInit+0x7c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d127      	bne.n	8000fee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_ADC_MspInit+0x80>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_ADC_MspInit+0x84>)
 8000fea:	f000 ff11 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <HAL_I2C_MspInit+0xa4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d13c      	bne.n	80010a0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_I2C_MspInit+0xa8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <HAL_I2C_MspInit+0xa8>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_I2C_MspInit+0xa8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001048:	2312      	movs	r3, #18
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104c:	2301      	movs	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001054:	2304      	movs	r3, #4
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4814      	ldr	r0, [pc, #80]	; (80010b0 <HAL_I2C_MspInit+0xac>)
 8001060:	f000 fed6 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001064:	2308      	movs	r3, #8
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001068:	2312      	movs	r3, #18
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106c:	2301      	movs	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001074:	2309      	movs	r3, #9
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	480c      	ldr	r0, [pc, #48]	; (80010b0 <HAL_I2C_MspInit+0xac>)
 8001080:	f000 fec6 	bl	8001e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_I2C_MspInit+0xa8>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_I2C_MspInit+0xa8>)
 800108e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001092:	6413      	str	r3, [r2, #64]	; 0x40
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_I2C_MspInit+0xa8>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40005800 	.word	0x40005800
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020400 	.word	0x40020400

080010b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <HAL_RTC_MspInit+0x24>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d102      	bne.n	80010cc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_RTC_MspInit+0x28>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40002800 	.word	0x40002800
 80010dc:	42470e3c 	.word	0x42470e3c

080010e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <HAL_SPI_MspInit+0xc0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d14a      	bne.n	8001198 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <HAL_SPI_MspInit+0xc4>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a26      	ldr	r2, [pc, #152]	; (80011a4 <HAL_SPI_MspInit+0xc4>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_SPI_MspInit+0xc4>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_SPI_MspInit+0xc4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <HAL_SPI_MspInit+0xc4>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_SPI_MspInit+0xc4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_SPI_MspInit+0xc4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <HAL_SPI_MspInit+0xc4>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_SPI_MspInit+0xc4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001156:	230c      	movs	r3, #12
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001166:	2305      	movs	r3, #5
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <HAL_SPI_MspInit+0xc8>)
 8001172:	f000 fe4d 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001188:	2305      	movs	r3, #5
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <HAL_SPI_MspInit+0xcc>)
 8001194:	f000 fe3c 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40003800 	.word	0x40003800
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020400 	.word	0x40020400

080011b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a49      	ldr	r2, [pc, #292]	; (80012f4 <HAL_TIM_Base_MspInit+0x144>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d135      	bne.n	800123e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a47      	ldr	r2, [pc, #284]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b45      	ldr	r3, [pc, #276]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a40      	ldr	r2, [pc, #256]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800121c:	2301      	movs	r3, #1
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4835      	ldr	r0, [pc, #212]	; (80012fc <HAL_TIM_Base_MspInit+0x14c>)
 8001228:	f000 fdf2 	bl	8001e10 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2019      	movs	r0, #25
 8001232:	f000 fdb6 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001236:	2019      	movs	r0, #25
 8001238:	f000 fdcf 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800123c:	e055      	b.n	80012ea <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001246:	d135      	bne.n	80012b4 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6413      	str	r3, [r2, #64]	; 0x40
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6313      	str	r3, [r2, #48]	; 0x30
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001292:	2301      	movs	r3, #1
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4817      	ldr	r0, [pc, #92]	; (80012fc <HAL_TIM_Base_MspInit+0x14c>)
 800129e:	f000 fdb7 	bl	8001e10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	201c      	movs	r0, #28
 80012a8:	f000 fd7b 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ac:	201c      	movs	r0, #28
 80012ae:	f000 fd94 	bl	8001dda <HAL_NVIC_EnableIRQ>
}
 80012b2:	e01a      	b.n	80012ea <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM3)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_TIM_Base_MspInit+0x150>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d115      	bne.n	80012ea <HAL_TIM_Base_MspInit+0x13a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_TIM_Base_MspInit+0x148>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	201d      	movs	r0, #29
 80012e0:	f000 fd5f 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012e4:	201d      	movs	r0, #29
 80012e6:	f000 fd78 	bl	8001dda <HAL_NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40010000 	.word	0x40010000
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40000400 	.word	0x40000400

08001304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_UART_MspInit+0x84>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d12b      	bne.n	800137e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_UART_MspInit+0x88>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_UART_MspInit+0x88>)
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_UART_MspInit+0x88>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_UART_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_UART_MspInit+0x88>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_UART_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800135e:	230c      	movs	r3, #12
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800136e:	2307      	movs	r3, #7
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <HAL_UART_MspInit+0x8c>)
 800137a:	f000 fd49 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	3728      	adds	r7, #40	; 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40004400 	.word	0x40004400
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 f960 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013ee:	f002 f9ea 	bl	80037c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000210 	.word	0x20000210

080013fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM2_IRQHandler+0x10>)
 8001402:	f002 f9e0 	bl	80037c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000250 	.word	0x20000250

08001410 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM3_IRQHandler+0x10>)
 8001416:	f002 f9d6 	bl	80037c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000168 	.word	0x20000168

08001424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800142c:	f000 fea6 	bl	800217c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f003 f9de 	bl	8004824 <__errno>
 8001468:	4602      	mov	r2, r0
 800146a:	230c      	movs	r3, #12
 800146c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20018000 	.word	0x20018000
 8001494:	00000400 	.word	0x00000400
 8001498:	200000a4 	.word	0x200000a4
 800149c:	200002f0 	.word	0x200002f0

080014a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <SystemInit+0x28>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <SystemInit+0x28>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SystemInit+0x28>)
 80014b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ba:	609a      	str	r2, [r3, #8]
#endif
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <date>:
RTC_TimeTypeDef STime;
RTC_DateTypeDef SDate;

uint8_t timeBuff[] = "00:00:00 | 00:00:00\r\n";

void date(RTC_HandleTypeDef *hrtc, UART_HandleTypeDef *huart){
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetTime(hrtc, &STime, RTC_FORMAT_BIN);
 80014d6:	2200      	movs	r2, #0
 80014d8:	4918      	ldr	r1, [pc, #96]	; (800153c <date+0x70>)
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f001 fe86 	bl	80031ec <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &SDate, RTC_FORMAT_BIN);
 80014e0:	2200      	movs	r2, #0
 80014e2:	4917      	ldr	r1, [pc, #92]	; (8001540 <date+0x74>)
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f001 ff86 	bl	80033f6 <HAL_RTC_GetDate>
	sprintf(timeBuff,"%02d/%02d/%02d | %02d:%02d:%02d\r\n", SDate.Date , SDate.Month, SDate.Year ,STime.Hours, STime.Minutes, STime.Seconds);
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <date+0x74>)
 80014ec:	789b      	ldrb	r3, [r3, #2]
 80014ee:	461c      	mov	r4, r3
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <date+0x74>)
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	461d      	mov	r5, r3
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <date+0x74>)
 80014f8:	78db      	ldrb	r3, [r3, #3]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <date+0x70>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <date+0x70>)
 8001504:	785b      	ldrb	r3, [r3, #1]
 8001506:	4618      	mov	r0, r3
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <date+0x70>)
 800150a:	789b      	ldrb	r3, [r3, #2]
 800150c:	9303      	str	r3, [sp, #12]
 800150e:	9002      	str	r0, [sp, #8]
 8001510:	9101      	str	r1, [sp, #4]
 8001512:	9200      	str	r2, [sp, #0]
 8001514:	462b      	mov	r3, r5
 8001516:	4622      	mov	r2, r4
 8001518:	490a      	ldr	r1, [pc, #40]	; (8001544 <date+0x78>)
 800151a:	480b      	ldr	r0, [pc, #44]	; (8001548 <date+0x7c>)
 800151c:	f003 f9b4 	bl	8004888 <siprintf>
	uint8_t size = sizeof(timeBuff);
 8001520:	2316      	movs	r3, #22
 8001522:	73fb      	strb	r3, [r7, #15]
	Send_on_UART2(huart, timeBuff , size);
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	b29b      	uxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4907      	ldr	r1, [pc, #28]	; (8001548 <date+0x7c>)
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f000 f80d 	bl	800154c <Send_on_UART2>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bdb0      	pop	{r4, r5, r7, pc}
 800153a:	bf00      	nop
 800153c:	200002d4 	.word	0x200002d4
 8001540:	200002d0 	.word	0x200002d0
 8001544:	080050dc 	.word	0x080050dc
 8001548:	20000004 	.word	0x20000004

0800154c <Send_on_UART2>:

#include "main.h"
#include "led.h"
#include "periph/uart.h"

void Send_on_UART2(UART_HandleTypeDef *huart, uint8_t buffer[], uint16_t size){
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	4613      	mov	r3, r2
 8001558:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(huart, buffer, size , HAL_MAX_DELAY);
 800155a:	88fa      	ldrh	r2, [r7, #6]
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f002 fcff 	bl	8003f66 <HAL_UART_Transmit>
	//Clignotement();
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <print_help>:

void print_help(UART_HandleTypeDef *huart){
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	uint8_t buffer[] = "Hello information\r\nCoucou !\r\n";
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <print_help+0x38>)
 800157a:	f107 040c 	add.w	r4, r7, #12
 800157e:	461d      	mov	r5, r3
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001588:	c407      	stmia	r4!, {r0, r1, r2}
 800158a:	8023      	strh	r3, [r4, #0]
	size_t size = (uint8_t) sizeof(buffer) / sizeof(buffer[0]);
 800158c:	231e      	movs	r3, #30
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
	Send_on_UART2(huart, buffer,size);
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	b29a      	uxth	r2, r3
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffd6 	bl	800154c <Send_on_UART2>
}
 80015a0:	bf00      	nop
 80015a2:	3730      	adds	r7, #48	; 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bdb0      	pop	{r4, r5, r7, pc}
 80015a8:	08005100 	.word	0x08005100

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015b2:	e003      	b.n	80015bc <LoopCopyDataInit>

080015b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ba:	3104      	adds	r1, #4

080015bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015bc:	480b      	ldr	r0, [pc, #44]	; (80015ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015c4:	d3f6      	bcc.n	80015b4 <CopyDataInit>
  ldr  r2, =_sbss
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015c8:	e002      	b.n	80015d0 <LoopFillZerobss>

080015ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015cc:	f842 3b04 	str.w	r3, [r2], #4

080015d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015d4:	d3f9      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015d6:	f7ff ff63 	bl	80014a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f003 f929 	bl	8004830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff f869 	bl	80006b4 <main>
  bx  lr    
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80015e8:	0800517c 	.word	0x0800517c
  ldr  r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015f0:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80015f4:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80015f8:	200002f0 	.word	0x200002f0

080015fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_Init+0x40>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_Init+0x40>)
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_Init+0x40>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 fbaf 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f808 	bl	8001644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001634:	f7ff fc7a 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x54>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x58>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fbc7 	bl	8001df6 <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00e      	b.n	8001690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d80a      	bhi.n	800168e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 fb8f 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_InitTick+0x5c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000000 	.word	0x20000000
 800169c:	20000020 	.word	0x20000020
 80016a0:	2000001c 	.word	0x2000001c

080016a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x20>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x24>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_IncTick+0x24>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000020 	.word	0x20000020
 80016c8:	200002e8 	.word	0x200002e8

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200002e8 	.word	0x200002e8

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff ffee 	bl	80016cc <HAL_GetTick>
 80016f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_Delay+0x40>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800170a:	bf00      	nop
 800170c:	f7ff ffde 	bl	80016cc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000020 	.word	0x20000020

08001728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e033      	b.n	80017a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fc18 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	d118      	bne.n	8001798 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800176e:	f023 0302 	bic.w	r3, r3, #2
 8001772:	f043 0202 	orr.w	r2, r3, #2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f93a 	bl	80019f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
 8001796:	e001      	b.n	800179c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x1c>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e105      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x228>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b09      	cmp	r3, #9
 80017da:	d925      	bls.n	8001828 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68d9      	ldr	r1, [r3, #12]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	3b1e      	subs	r3, #30
 80017f2:	2207      	movs	r2, #7
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43da      	mvns	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	400a      	ands	r2, r1
 8001800:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68d9      	ldr	r1, [r3, #12]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	4603      	mov	r3, r0
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4403      	add	r3, r0
 800181a:	3b1e      	subs	r3, #30
 800181c:	409a      	lsls	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	e022      	b.n	800186e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6919      	ldr	r1, [r3, #16]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	2207      	movs	r2, #7
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6919      	ldr	r1, [r3, #16]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	4603      	mov	r3, r0
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4403      	add	r3, r0
 8001864:	409a      	lsls	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b06      	cmp	r3, #6
 8001874:	d824      	bhi.n	80018c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b05      	subs	r3, #5
 8001888:	221f      	movs	r2, #31
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	400a      	ands	r2, r1
 8001896:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b05      	subs	r3, #5
 80018b2:	fa00 f203 	lsl.w	r2, r0, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
 80018be:	e04c      	b.n	800195a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d824      	bhi.n	8001912 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	3b23      	subs	r3, #35	; 0x23
 80018da:	221f      	movs	r2, #31
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43da      	mvns	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	400a      	ands	r2, r1
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	3b23      	subs	r3, #35	; 0x23
 8001904:	fa00 f203 	lsl.w	r2, r0, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
 8001910:	e023      	b.n	800195a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	3b41      	subs	r3, #65	; 0x41
 8001924:	221f      	movs	r2, #31
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	400a      	ands	r2, r1
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	3b41      	subs	r3, #65	; 0x41
 800194e:	fa00 f203 	lsl.w	r2, r0, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_ADC_ConfigChannel+0x234>)
 800195c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <HAL_ADC_ConfigChannel+0x238>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d109      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1cc>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b12      	cmp	r3, #18
 800196e:	d105      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_ADC_ConfigChannel+0x238>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d123      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b10      	cmp	r3, #16
 800198c:	d003      	beq.n	8001996 <HAL_ADC_ConfigChannel+0x1e6>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b11      	cmp	r3, #17
 8001994:	d11b      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b10      	cmp	r3, #16
 80019a8:	d111      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_ADC_ConfigChannel+0x23c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_ADC_ConfigChannel+0x240>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	0c9a      	lsrs	r2, r3, #18
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019c0:	e002      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f9      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40012300 	.word	0x40012300
 80019e8:	40012000 	.word	0x40012000
 80019ec:	20000000 	.word	0x20000000
 80019f0:	431bde83 	.word	0x431bde83

080019f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fc:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <ADC_Init+0x1f0>)
 80019fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	021a      	lsls	r2, r3, #8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6899      	ldr	r1, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <ADC_Init+0x1f4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d022      	beq.n	8001ad2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6899      	ldr	r1, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	e00f      	b.n	8001af2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0202 	bic.w	r2, r2, #2
 8001b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e1b      	ldrb	r3, [r3, #24]
 8001b0c:	005a      	lsls	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01b      	beq.n	8001b58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6859      	ldr	r1, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	035a      	lsls	r2, r3, #13
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	e007      	b.n	8001b68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	051a      	lsls	r2, r3, #20
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001baa:	025a      	lsls	r2, r3, #9
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6899      	ldr	r1, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	029a      	lsls	r2, r3, #10
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40012300 	.word	0x40012300
 8001be8:	0f000001 	.word	0x0f000001

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff29 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff3e 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff8e 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5d 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff31 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa2 	bl	8001d48 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e159      	b.n	80020e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 8148 	bne.w	80020da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d00b      	beq.n	8001e6a <HAL_GPIO_Init+0x5a>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d007      	beq.n	8001e6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e5e:	2b11      	cmp	r3, #17
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d130      	bne.n	8001ecc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 0201 	and.w	r2, r3, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0xfc>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b12      	cmp	r3, #18
 8001f0a:	d123      	bne.n	8001f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0203 	and.w	r2, r3, #3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a2 	beq.w	80020da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <HAL_GPIO_Init+0x2e4>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a55      	ldr	r2, [pc, #340]	; (80020f4 <HAL_GPIO_Init+0x2e4>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_GPIO_Init+0x2e4>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb2:	4a51      	ldr	r2, [pc, #324]	; (80020f8 <HAL_GPIO_Init+0x2e8>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_GPIO_Init+0x2ec>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d019      	beq.n	8002012 <HAL_GPIO_Init+0x202>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a47      	ldr	r2, [pc, #284]	; (8002100 <HAL_GPIO_Init+0x2f0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0x1fe>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a46      	ldr	r2, [pc, #280]	; (8002104 <HAL_GPIO_Init+0x2f4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00d      	beq.n	800200a <HAL_GPIO_Init+0x1fa>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a45      	ldr	r2, [pc, #276]	; (8002108 <HAL_GPIO_Init+0x2f8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <HAL_GPIO_Init+0x1f6>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a44      	ldr	r2, [pc, #272]	; (800210c <HAL_GPIO_Init+0x2fc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_GPIO_Init+0x1f2>
 8001ffe:	2304      	movs	r3, #4
 8002000:	e008      	b.n	8002014 <HAL_GPIO_Init+0x204>
 8002002:	2307      	movs	r3, #7
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x204>
 8002006:	2303      	movs	r3, #3
 8002008:	e004      	b.n	8002014 <HAL_GPIO_Init+0x204>
 800200a:	2302      	movs	r3, #2
 800200c:	e002      	b.n	8002014 <HAL_GPIO_Init+0x204>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_GPIO_Init+0x204>
 8002012:	2300      	movs	r3, #0
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	f002 0203 	and.w	r2, r2, #3
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	4093      	lsls	r3, r2
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002024:	4934      	ldr	r1, [pc, #208]	; (80020f8 <HAL_GPIO_Init+0x2e8>)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002032:	4b37      	ldr	r3, [pc, #220]	; (8002110 <HAL_GPIO_Init+0x300>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002056:	4a2e      	ldr	r2, [pc, #184]	; (8002110 <HAL_GPIO_Init+0x300>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_GPIO_Init+0x300>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002080:	4a23      	ldr	r2, [pc, #140]	; (8002110 <HAL_GPIO_Init+0x300>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_GPIO_Init+0x300>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020aa:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_GPIO_Init+0x300>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_GPIO_Init+0x300>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d4:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <HAL_GPIO_Init+0x300>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	f67f aea2 	bls.w	8001e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e8:	bf00      	nop
 80020ea:	3724      	adds	r7, #36	; 0x24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800
 8002108:	40020c00 	.word	0x40020c00
 800210c:	40021000 	.word	0x40021000
 8002110:	40013c00 	.word	0x40013c00

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002130:	e003      	b.n	800213a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	619a      	str	r2, [r3, #24]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	401a      	ands	r2, r3
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	429a      	cmp	r2, r3
 800215e:	d104      	bne.n	800216a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002160:	887b      	ldrh	r3, [r7, #2]
 8002162:	041a      	lsls	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002168:	e002      	b.n	8002170 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fe54 	bl	8000e48 <HAL_GPIO_EXTI_Callback>
  }
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e11f      	b.n	80023fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe ff16 	bl	8001004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002210:	f000 fd88 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8002214:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4a7b      	ldr	r2, [pc, #492]	; (8002408 <HAL_I2C_Init+0x25c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d807      	bhi.n	8002230 <HAL_I2C_Init+0x84>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a7a      	ldr	r2, [pc, #488]	; (800240c <HAL_I2C_Init+0x260>)
 8002224:	4293      	cmp	r3, r2
 8002226:	bf94      	ite	ls
 8002228:	2301      	movls	r3, #1
 800222a:	2300      	movhi	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e006      	b.n	800223e <HAL_I2C_Init+0x92>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a77      	ldr	r2, [pc, #476]	; (8002410 <HAL_I2C_Init+0x264>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0db      	b.n	80023fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a72      	ldr	r2, [pc, #456]	; (8002414 <HAL_I2C_Init+0x268>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0c9b      	lsrs	r3, r3, #18
 8002250:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a64      	ldr	r2, [pc, #400]	; (8002408 <HAL_I2C_Init+0x25c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d802      	bhi.n	8002280 <HAL_I2C_Init+0xd4>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3301      	adds	r3, #1
 800227e:	e009      	b.n	8002294 <HAL_I2C_Init+0xe8>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	4a63      	ldr	r2, [pc, #396]	; (8002418 <HAL_I2C_Init+0x26c>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	3301      	adds	r3, #1
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4956      	ldr	r1, [pc, #344]	; (8002408 <HAL_I2C_Init+0x25c>)
 80022b0:	428b      	cmp	r3, r1
 80022b2:	d80d      	bhi.n	80022d0 <HAL_I2C_Init+0x124>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e59      	subs	r1, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	bf38      	it	cc
 80022cc:	2304      	movcc	r3, #4
 80022ce:	e04f      	b.n	8002370 <HAL_I2C_Init+0x1c4>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d111      	bne.n	80022fc <HAL_I2C_Init+0x150>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1e58      	subs	r0, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	440b      	add	r3, r1
 80022e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e012      	b.n	8002322 <HAL_I2C_Init+0x176>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	0099      	lsls	r1, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Init+0x17e>
 8002326:	2301      	movs	r3, #1
 8002328:	e022      	b.n	8002370 <HAL_I2C_Init+0x1c4>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10e      	bne.n	8002350 <HAL_I2C_Init+0x1a4>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1e58      	subs	r0, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	440b      	add	r3, r1
 8002340:	fbb0 f3f3 	udiv	r3, r0, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800234e:	e00f      	b.n	8002370 <HAL_I2C_Init+0x1c4>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e58      	subs	r0, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	0099      	lsls	r1, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	fbb0 f3f3 	udiv	r3, r0, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	6809      	ldr	r1, [r1, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800239e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6911      	ldr	r1, [r2, #16]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68d2      	ldr	r2, [r2, #12]
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	000186a0 	.word	0x000186a0
 800240c:	001e847f 	.word	0x001e847f
 8002410:	003d08ff 	.word	0x003d08ff
 8002414:	431bde83 	.word	0x431bde83
 8002418:	10624dd3 	.word	0x10624dd3

0800241c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e02b      	b.n	8002486 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002436:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f245 5255 	movw	r2, #21845	; 0x5555
 8002440:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6852      	ldr	r2, [r2, #4]
 800244a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6892      	ldr	r2, [r2, #8]
 8002454:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002456:	f7ff f939 	bl	80016cc <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800245c:	e008      	b.n	8002470 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800245e:	f7ff f935 	bl	80016cc <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b30      	cmp	r3, #48	; 0x30
 800246a:	d901      	bls.n	8002470 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e00a      	b.n	8002486 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f1      	bne.n	800245e <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002482:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800249e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e25b      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d075      	beq.n	80025ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ce:	4ba3      	ldr	r3, [pc, #652]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d00c      	beq.n	80024f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024da:	4ba0      	ldr	r3, [pc, #640]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d112      	bne.n	800250c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e6:	4b9d      	ldr	r3, [pc, #628]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f2:	d10b      	bne.n	800250c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	4b99      	ldr	r3, [pc, #612]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d05b      	beq.n	80025b8 <HAL_RCC_OscConfig+0x108>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d157      	bne.n	80025b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e236      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d106      	bne.n	8002524 <HAL_RCC_OscConfig+0x74>
 8002516:	4b91      	ldr	r3, [pc, #580]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a90      	ldr	r2, [pc, #576]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0xb0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x98>
 800252e:	4b8b      	ldr	r3, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a8a      	ldr	r2, [pc, #552]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b88      	ldr	r3, [pc, #544]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a87      	ldr	r2, [pc, #540]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0xb0>
 8002548:	4b84      	ldr	r3, [pc, #528]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a83      	ldr	r2, [pc, #524]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b81      	ldr	r3, [pc, #516]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a80      	ldr	r2, [pc, #512]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7ff f8b0 	bl	80016cc <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002570:	f7ff f8ac 	bl	80016cc <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e1fb      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b76      	ldr	r3, [pc, #472]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0xc0>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff f89c 	bl	80016cc <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff f898 	bl	80016cc <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1e7      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	4b6c      	ldr	r3, [pc, #432]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0xe8>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d063      	beq.n	800268e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c6:	4b65      	ldr	r3, [pc, #404]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b62      	ldr	r3, [pc, #392]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025de:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b5c      	ldr	r3, [pc, #368]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x152>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1bb      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b56      	ldr	r3, [pc, #344]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4952      	ldr	r1, [pc, #328]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e03a      	b.n	800268e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <HAL_RCC_OscConfig+0x2b0>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7ff f851 	bl	80016cc <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262e:	f7ff f84d 	bl	80016cc <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e19c      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	4b46      	ldr	r3, [pc, #280]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	4b43      	ldr	r3, [pc, #268]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4940      	ldr	r1, [pc, #256]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	e015      	b.n	800268e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_OscConfig+0x2b0>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff f830 	bl	80016cc <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002670:	f7ff f82c 	bl	80016cc <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e17b      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d030      	beq.n	80026fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCC_OscConfig+0x2b4>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7ff f810 	bl	80016cc <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b0:	f7ff f80c 	bl	80016cc <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e15b      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x200>
 80026ce:	e015      	b.n	80026fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_OscConfig+0x2b4>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d6:	f7fe fff9 	bl	80016cc <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026de:	f7fe fff5 	bl	80016cc <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e144      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a0 	beq.w	800284a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_RCC_OscConfig+0x2ac>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_OscConfig+0x2b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d121      	bne.n	800278a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_RCC_OscConfig+0x2b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a07      	ldr	r2, [pc, #28]	; (8002768 <HAL_RCC_OscConfig+0x2b8>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7fe ffbb 	bl	80016cc <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	e011      	b.n	800277e <HAL_RCC_OscConfig+0x2ce>
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	42470000 	.word	0x42470000
 8002764:	42470e80 	.word	0x42470e80
 8002768:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7fe ffae 	bl	80016cc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0fd      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	4b81      	ldr	r3, [pc, #516]	; (8002984 <HAL_RCC_OscConfig+0x4d4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d106      	bne.n	80027a0 <HAL_RCC_OscConfig+0x2f0>
 8002792:	4b7d      	ldr	r3, [pc, #500]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a7c      	ldr	r2, [pc, #496]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	e01c      	b.n	80027da <HAL_RCC_OscConfig+0x32a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b05      	cmp	r3, #5
 80027a6:	d10c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x312>
 80027a8:	4b77      	ldr	r3, [pc, #476]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a76      	ldr	r2, [pc, #472]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
 80027b4:	4b74      	ldr	r3, [pc, #464]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a73      	ldr	r2, [pc, #460]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	e00b      	b.n	80027da <HAL_RCC_OscConfig+0x32a>
 80027c2:	4b71      	ldr	r3, [pc, #452]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	4a70      	ldr	r2, [pc, #448]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6713      	str	r3, [r2, #112]	; 0x70
 80027ce:	4b6e      	ldr	r3, [pc, #440]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	4a6d      	ldr	r2, [pc, #436]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 80027d4:	f023 0304 	bic.w	r3, r3, #4
 80027d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d015      	beq.n	800280e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7fe ff73 	bl	80016cc <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe ff6f 	bl	80016cc <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e0bc      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	4b61      	ldr	r3, [pc, #388]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ee      	beq.n	80027ea <HAL_RCC_OscConfig+0x33a>
 800280c:	e014      	b.n	8002838 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7fe ff5d 	bl	80016cc <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fe ff59 	bl	80016cc <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0a6      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	4b56      	ldr	r3, [pc, #344]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ee      	bne.n	8002816 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d105      	bne.n	800284a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283e:	4b52      	ldr	r3, [pc, #328]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a51      	ldr	r2, [pc, #324]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 8002844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8092 	beq.w	8002978 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002854:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d05c      	beq.n	800291a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d141      	bne.n	80028ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002868:	4b48      	ldr	r3, [pc, #288]	; (800298c <HAL_RCC_OscConfig+0x4dc>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe ff2d 	bl	80016cc <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002876:	f7fe ff29 	bl	80016cc <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e078      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002888:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	019b      	lsls	r3, r3, #6
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	3b01      	subs	r3, #1
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	061b      	lsls	r3, r3, #24
 80028b8:	4933      	ldr	r1, [pc, #204]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028be:	4b33      	ldr	r3, [pc, #204]	; (800298c <HAL_RCC_OscConfig+0x4dc>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe ff02 	bl	80016cc <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fefe 	bl	80016cc <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04d      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x41c>
 80028ea:	e045      	b.n	8002978 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x4dc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe feeb 	bl	80016cc <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe fee7 	bl	80016cc <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e036      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x44a>
 8002918:	e02e      	b.n	8002978 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e029      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_RCC_OscConfig+0x4d8>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	429a      	cmp	r2, r3
 8002938:	d11c      	bne.n	8002974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002944:	429a      	cmp	r2, r3
 8002946:	d115      	bne.n	8002974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800294e:	4013      	ands	r3, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002954:	4293      	cmp	r3, r2
 8002956:	d10d      	bne.n	8002974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d106      	bne.n	8002974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40007000 	.word	0x40007000
 8002988:	40023800 	.word	0x40023800
 800298c:	42470060 	.word	0x42470060

08002990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0cc      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b68      	ldr	r3, [pc, #416]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d90c      	bls.n	80029cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b63      	ldr	r3, [pc, #396]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0b8      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	4b59      	ldr	r3, [pc, #356]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a58      	ldr	r2, [pc, #352]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029fc:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a52      	ldr	r2, [pc, #328]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	494d      	ldr	r1, [pc, #308]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d044      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d119      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e067      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4934      	ldr	r1, [pc, #208]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7fe fe24 	bl	80016cc <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7fe fe20 	bl	80016cc <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e04f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 020c 	and.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1eb      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d20c      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e032      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4916      	ldr	r1, [pc, #88]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	490e      	ldr	r1, [pc, #56]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b16:	f000 f821 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8002b1a:	4601      	mov	r1, r0
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fd84 	bl	8001644 <HAL_InitTick>

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023c00 	.word	0x40023c00
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	08005120 	.word	0x08005120
 8002b54:	20000000 	.word	0x20000000
 8002b58:	2000001c 	.word	0x2000001c

08002b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b72:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d007      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x32>
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d008      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x38>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 80b4 	bne.w	8002cf0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b5e      	ldr	r3, [pc, #376]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b8a:	60bb      	str	r3, [r7, #8]
       break;
 8002b8c:	e0b3      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8e:	4b5e      	ldr	r3, [pc, #376]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b90:	60bb      	str	r3, [r7, #8]
      break;
 8002b92:	e0b0      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b94:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9e:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d04a      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002baa:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	f04f 0400 	mov.w	r4, #0
 8002bb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	ea03 0501 	and.w	r5, r3, r1
 8002bc0:	ea04 0602 	and.w	r6, r4, r2
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	4632      	mov	r2, r6
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	f04f 0400 	mov.w	r4, #0
 8002bd0:	0154      	lsls	r4, r2, #5
 8002bd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bd6:	014b      	lsls	r3, r1, #5
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4622      	mov	r2, r4
 8002bdc:	1b49      	subs	r1, r1, r5
 8002bde:	eb62 0206 	sbc.w	r2, r2, r6
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	f04f 0400 	mov.w	r4, #0
 8002bea:	0194      	lsls	r4, r2, #6
 8002bec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bf0:	018b      	lsls	r3, r1, #6
 8002bf2:	1a5b      	subs	r3, r3, r1
 8002bf4:	eb64 0402 	sbc.w	r4, r4, r2
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	00e2      	lsls	r2, r4, #3
 8002c02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c06:	00d9      	lsls	r1, r3, #3
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4614      	mov	r4, r2
 8002c0c:	195b      	adds	r3, r3, r5
 8002c0e:	eb44 0406 	adc.w	r4, r4, r6
 8002c12:	f04f 0100 	mov.w	r1, #0
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	0262      	lsls	r2, r4, #9
 8002c1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c20:	0259      	lsls	r1, r3, #9
 8002c22:	460b      	mov	r3, r1
 8002c24:	4614      	mov	r4, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	4621      	mov	r1, r4
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f04f 0400 	mov.w	r4, #0
 8002c30:	461a      	mov	r2, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	f7fd fb24 	bl	8000280 <__aeabi_uldivmod>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	e049      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	f04f 0400 	mov.w	r4, #0
 8002c4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	ea03 0501 	and.w	r5, r3, r1
 8002c56:	ea04 0602 	and.w	r6, r4, r2
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	4632      	mov	r2, r6
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	f04f 0400 	mov.w	r4, #0
 8002c66:	0154      	lsls	r4, r2, #5
 8002c68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c6c:	014b      	lsls	r3, r1, #5
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4622      	mov	r2, r4
 8002c72:	1b49      	subs	r1, r1, r5
 8002c74:	eb62 0206 	sbc.w	r2, r2, r6
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	f04f 0400 	mov.w	r4, #0
 8002c80:	0194      	lsls	r4, r2, #6
 8002c82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c86:	018b      	lsls	r3, r1, #6
 8002c88:	1a5b      	subs	r3, r3, r1
 8002c8a:	eb64 0402 	sbc.w	r4, r4, r2
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	00e2      	lsls	r2, r4, #3
 8002c98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c9c:	00d9      	lsls	r1, r3, #3
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	195b      	adds	r3, r3, r5
 8002ca4:	eb44 0406 	adc.w	r4, r4, r6
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	02a2      	lsls	r2, r4, #10
 8002cb2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cb6:	0299      	lsls	r1, r3, #10
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4614      	mov	r4, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f04f 0400 	mov.w	r4, #0
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4623      	mov	r3, r4
 8002cca:	f7fd fad9 	bl	8000280 <__aeabi_uldivmod>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	60bb      	str	r3, [r7, #8]
      break;
 8002cee:	e002      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cf2:	60bb      	str	r3, [r7, #8]
      break;
 8002cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	007a1200 	.word	0x007a1200

08002d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000000 	.word	0x20000000

08002d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d28:	f7ff fff0 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d2c:	4601      	mov	r1, r0
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	0a9b      	lsrs	r3, r3, #10
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	4a03      	ldr	r2, [pc, #12]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	08005130 	.word	0x08005130

08002d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d50:	f7ff ffdc 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d54:	4601      	mov	r1, r0
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	0b5b      	lsrs	r3, r3, #13
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	08005130 	.word	0x08005130

08002d74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d035      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d9c:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002da2:	f7fe fc93 	bl	80016cc <HAL_GetTick>
 8002da6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002daa:	f7fe fc8f 	bl	80016cc <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0ba      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dbc:	4b60      	ldr	r3, [pc, #384]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f0      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	019a      	lsls	r2, r3, #6
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	071b      	lsls	r3, r3, #28
 8002dd4:	495a      	ldr	r1, [pc, #360]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ddc:	4b57      	ldr	r3, [pc, #348]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002de2:	f7fe fc73 	bl	80016cc <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dea:	f7fe fc6f 	bl	80016cc <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e09a      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8083 	beq.w	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a48      	ldr	r2, [pc, #288]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e32:	4b44      	ldr	r3, [pc, #272]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a43      	ldr	r2, [pc, #268]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e3e:	f7fe fc45 	bl	80016cc <HAL_GetTick>
 8002e42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e46:	f7fe fc41 	bl	80016cc <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e06c      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e58:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d02f      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d028      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e98:	4a29      	ldr	r2, [pc, #164]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e9e:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d114      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fc0f 	bl	80016cc <HAL_GetTick>
 8002eae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe fc0b 	bl	80016cc <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e034      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ee      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ee0:	d10d      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ee2:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef6:	4912      	ldr	r1, [pc, #72]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	608b      	str	r3, [r1, #8]
 8002efc:	e005      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f08:	6093      	str	r3, [r2, #8]
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f16:	490a      	ldr	r1, [pc, #40]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7c1a      	ldrb	r2, [r3, #16]
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f2e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	42470068 	.word	0x42470068
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40007000 	.word	0x40007000
 8002f48:	42470e40 	.word	0x42470e40
 8002f4c:	424711e0 	.word	0x424711e0

08002f50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e083      	b.n	800306a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7f5b      	ldrb	r3, [r3, #29]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe f89e 	bl	80010b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	22ca      	movs	r2, #202	; 0xca
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2253      	movs	r2, #83	; 0x53
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 faa8 	bl	80034e4 <RTC_EnterInitMode>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	22ff      	movs	r2, #255	; 0xff
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e05e      	b.n	800306a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fbe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68d2      	ldr	r2, [r2, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6919      	ldr	r1, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	041a      	lsls	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800300a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10e      	bne.n	8003038 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fa3a 	bl	8003494 <HAL_RTC_WaitForSynchro>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	22ff      	movs	r2, #255	; 0xff
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e018      	b.n	800306a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	22ff      	movs	r2, #255	; 0xff
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003072:	b590      	push	{r4, r7, lr}
 8003074:	b087      	sub	sp, #28
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	7f1b      	ldrb	r3, [r3, #28]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_RTC_SetTime+0x1c>
 800308a:	2302      	movs	r3, #2
 800308c:	e0aa      	b.n	80031e4 <HAL_RTC_SetTime+0x172>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2202      	movs	r2, #2
 8003098:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d126      	bne.n	80030ee <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2200      	movs	r2, #0
 80030b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fa3f 	bl	800353c <RTC_ByteToBcd2>
 80030be:	4603      	mov	r3, r0
 80030c0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	785b      	ldrb	r3, [r3, #1]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fa38 	bl	800353c <RTC_ByteToBcd2>
 80030cc:	4603      	mov	r3, r0
 80030ce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030d0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	789b      	ldrb	r3, [r3, #2]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fa30 	bl	800353c <RTC_ByteToBcd2>
 80030dc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80030de:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	78db      	ldrb	r3, [r3, #3]
 80030e6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	e018      	b.n	8003120 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800310e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003114:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	78db      	ldrb	r3, [r3, #3]
 800311a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	22ca      	movs	r2, #202	; 0xca
 8003126:	625a      	str	r2, [r3, #36]	; 0x24
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2253      	movs	r2, #83	; 0x53
 800312e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f9d7 	bl	80034e4 <RTC_EnterInitMode>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	22ff      	movs	r2, #255	; 0xff
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2204      	movs	r2, #4
 8003148:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e047      	b.n	80031e4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800315e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003162:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003172:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	431a      	orrs	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d111      	bne.n	80031ce <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f972 	bl	8003494 <HAL_RTC_WaitForSynchro>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	22ff      	movs	r2, #255	; 0xff
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2204      	movs	r2, #4
 80031c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00a      	b.n	80031e4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	22ff      	movs	r2, #255	; 0xff
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80031e2:	2300      	movs	r3, #0
  }
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}

080031ec <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800321e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003222:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11a      	bne.n	800329e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 f983 	bl	8003578 <RTC_Bcd2ToByte>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f97a 	bl	8003578 <RTC_Bcd2ToByte>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	789b      	ldrb	r3, [r3, #2]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f971 	bl	8003578 <RTC_Bcd2ToByte>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	7f1b      	ldrb	r3, [r3, #28]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_RTC_SetDate+0x1c>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e094      	b.n	80033ee <HAL_RTC_SetDate+0x146>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2202      	movs	r2, #2
 80032ce:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10e      	bne.n	80032f4 <HAL_RTC_SetDate+0x4c>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	785b      	ldrb	r3, [r3, #1]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	785b      	ldrb	r3, [r3, #1]
 80032e6:	f023 0310 	bic.w	r3, r3, #16
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	330a      	adds	r3, #10
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11c      	bne.n	8003334 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	78db      	ldrb	r3, [r3, #3]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f91c 	bl	800353c <RTC_ByteToBcd2>
 8003304:	4603      	mov	r3, r0
 8003306:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	785b      	ldrb	r3, [r3, #1]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f915 	bl	800353c <RTC_ByteToBcd2>
 8003312:	4603      	mov	r3, r0
 8003314:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003316:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	789b      	ldrb	r3, [r3, #2]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f90d 	bl	800353c <RTC_ByteToBcd2>
 8003322:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003324:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e00e      	b.n	8003352 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	78db      	ldrb	r3, [r3, #3]
 8003338:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	785b      	ldrb	r3, [r3, #1]
 800333e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003340:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003346:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	22ca      	movs	r2, #202	; 0xca
 8003358:	625a      	str	r2, [r3, #36]	; 0x24
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2253      	movs	r2, #83	; 0x53
 8003360:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f8be 	bl	80034e4 <RTC_EnterInitMode>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	22ff      	movs	r2, #255	; 0xff
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2204      	movs	r2, #4
 800337a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e033      	b.n	80033ee <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003390:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003394:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d111      	bne.n	80033d8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f86d 	bl	8003494 <HAL_RTC_WaitForSynchro>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2204      	movs	r2, #4
 80033cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e00a      	b.n	80033ee <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	22ff      	movs	r2, #255	; 0xff
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80033ec:	2300      	movs	r3, #0
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}

080033f6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003410:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003414:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	b2da      	uxtb	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	0b5b      	lsrs	r3, r3, #13
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d11a      	bne.n	800348a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	78db      	ldrb	r3, [r3, #3]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f88d 	bl	8003578 <RTC_Bcd2ToByte>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	785b      	ldrb	r3, [r3, #1]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f884 	bl	8003578 <RTC_Bcd2ToByte>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	789b      	ldrb	r3, [r3, #2]
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f87b 	bl	8003578 <RTC_Bcd2ToByte>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034b0:	f7fe f90c 	bl	80016cc <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034b6:	e009      	b.n	80034cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80034b8:	f7fe f908 	bl	80016cc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c6:	d901      	bls.n	80034cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e007      	b.n	80034dc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0ee      	beq.n	80034b8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d119      	bne.n	8003532 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f04f 32ff 	mov.w	r2, #4294967295
 8003506:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003508:	f7fe f8e0 	bl	80016cc <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800350e:	e009      	b.n	8003524 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003510:	f7fe f8dc 	bl	80016cc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800351e:	d901      	bls.n	8003524 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e007      	b.n	8003534 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0ee      	beq.n	8003510 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800354a:	e005      	b.n	8003558 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3301      	adds	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	3b0a      	subs	r3, #10
 8003556:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	2b09      	cmp	r3, #9
 800355c:	d8f6      	bhi.n	800354c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	b2da      	uxtb	r2, r3
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	4313      	orrs	r3, r2
 800356a:	b2db      	uxtb	r3, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	b2db      	uxtb	r3, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3350      	adds	r3, #80	; 0x50
 80035ca:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4413      	add	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3350      	adds	r3, #80	; 0x50
 80035fc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4413      	add	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e056      	b.n	80036d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fd fd4b 	bl	80010e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003660:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	ea42 0103 	orr.w	r1, r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	f003 0104 	and.w	r1, r3, #4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e01d      	b.n	800372e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fd52 	bl	80011b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f000 fa38 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b06      	cmp	r3, #6
 8003756:	d007      	beq.n	8003768 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b06      	cmp	r3, #6
 80037a6:	d007      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d122      	bne.n	8003822 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d11b      	bne.n	8003822 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f06f 0202 	mvn.w	r2, #2
 80037f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f9a5 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 800380e:	e005      	b.n	800381c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f997 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9a8 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b04      	cmp	r3, #4
 800382e:	d122      	bne.n	8003876 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d11b      	bne.n	8003876 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f06f 0204 	mvn.w	r2, #4
 8003846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f97b 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 8003862:	e005      	b.n	8003870 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f96d 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f97e 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b08      	cmp	r3, #8
 8003882:	d122      	bne.n	80038ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d11b      	bne.n	80038ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 0208 	mvn.w	r2, #8
 800389a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2204      	movs	r2, #4
 80038a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f951 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 80038b6:	e005      	b.n	80038c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f943 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f954 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d122      	bne.n	800391e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d11b      	bne.n	800391e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0210 	mvn.w	r2, #16
 80038ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2208      	movs	r2, #8
 80038f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f927 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 800390a:	e005      	b.n	8003918 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f919 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f92a 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d10e      	bne.n	800394a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f06f 0201 	mvn.w	r2, #1
 8003942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fd faad 	bl	8000ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d10e      	bne.n	8003976 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d107      	bne.n	8003976 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800396e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 faa1 	bl	8003eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d10e      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d107      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800399a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8ef 	bl	8003b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d10e      	bne.n	80039ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d107      	bne.n	80039ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f06f 0220 	mvn.w	r2, #32
 80039c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fa6b 	bl	8003ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_ConfigClockSource+0x18>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e0a6      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x166>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a0c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a14:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b40      	cmp	r3, #64	; 0x40
 8003a24:	d067      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x120>
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d80b      	bhi.n	8003a42 <HAL_TIM_ConfigClockSource+0x6c>
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d073      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0x140>
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d802      	bhi.n	8003a38 <HAL_TIM_ConfigClockSource+0x62>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d06f      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a36:	e078      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d06c      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0x140>
 8003a3c:	2b30      	cmp	r3, #48	; 0x30
 8003a3e:	d06a      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a40:	e073      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a42:	2b70      	cmp	r3, #112	; 0x70
 8003a44:	d00d      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0x8c>
 8003a46:	2b70      	cmp	r3, #112	; 0x70
 8003a48:	d804      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x7e>
 8003a4a:	2b50      	cmp	r3, #80	; 0x50
 8003a4c:	d033      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0xe0>
 8003a4e:	2b60      	cmp	r3, #96	; 0x60
 8003a50:	d041      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a52:	e06a      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a58:	d066      	beq.n	8003b28 <HAL_TIM_ConfigClockSource+0x152>
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5e:	d017      	beq.n	8003a90 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a60:	e063      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6899      	ldr	r1, [r3, #8]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f000 f989 	bl	8003d88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	609a      	str	r2, [r3, #8]
      break;
 8003a8e:	e04c      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6899      	ldr	r1, [r3, #8]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f000 f972 	bl	8003d88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ab2:	609a      	str	r2, [r3, #8]
      break;
 8003ab4:	e039      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6859      	ldr	r1, [r3, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f000 f8e6 	bl	8003c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2150      	movs	r1, #80	; 0x50
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f93f 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003ad4:	e029      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6859      	ldr	r1, [r3, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f000 f905 	bl	8003cf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2160      	movs	r1, #96	; 0x60
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f92f 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003af4:	e019      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6859      	ldr	r1, [r3, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f000 f8c6 	bl	8003c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2140      	movs	r1, #64	; 0x40
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f91f 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003b14:	e009      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4610      	mov	r0, r2
 8003b22:	f000 f916 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003b26:	e000      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003b28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a34      	ldr	r2, [pc, #208]	; (8003c78 <TIM_Base_SetConfig+0xe4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00f      	beq.n	8003bcc <TIM_Base_SetConfig+0x38>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb2:	d00b      	beq.n	8003bcc <TIM_Base_SetConfig+0x38>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a31      	ldr	r2, [pc, #196]	; (8003c7c <TIM_Base_SetConfig+0xe8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <TIM_Base_SetConfig+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a30      	ldr	r2, [pc, #192]	; (8003c80 <TIM_Base_SetConfig+0xec>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0x38>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	; (8003c84 <TIM_Base_SetConfig+0xf0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d108      	bne.n	8003bde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <TIM_Base_SetConfig+0xe4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d01b      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d017      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <TIM_Base_SetConfig+0xe8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <TIM_Base_SetConfig+0xec>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00f      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <TIM_Base_SetConfig+0xf0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <TIM_Base_SetConfig+0xf4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <TIM_Base_SetConfig+0xf8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <TIM_Base_SetConfig+0xfc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d108      	bne.n	8003c30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <TIM_Base_SetConfig+0xe4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	615a      	str	r2, [r3, #20]
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40000800 	.word	0x40000800
 8003c84:	40000c00 	.word	0x40000c00
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40014400 	.word	0x40014400
 8003c90:	40014800 	.word	0x40014800

08003c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f023 0201 	bic.w	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f023 030a 	bic.w	r3, r3, #10
 8003cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b087      	sub	sp, #28
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f023 0210 	bic.w	r2, r3, #16
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	031b      	lsls	r3, r3, #12
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f043 0307 	orr.w	r3, r3, #7
 8003d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	609a      	str	r2, [r3, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	609a      	str	r2, [r3, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e050      	b.n	8003e82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d018      	beq.n	8003e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2c:	d013      	beq.n	8003e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a18      	ldr	r2, [pc, #96]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d009      	beq.n	8003e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d10c      	bne.n	8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40000c00 	.word	0x40000c00
 8003ea0:	40014000 	.word	0x40014000

08003ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e03f      	b.n	8003f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd fa06 	bl	8001304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	; 0x24
 8003efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f90b 	bl	800412c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b088      	sub	sp, #32
 8003f6a:	af02      	add	r7, sp, #8
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	f040 8083 	bne.w	800408e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_UART_Transmit+0x2e>
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e07b      	b.n	8004090 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Transmit+0x40>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e074      	b.n	8004090 <HAL_UART_Transmit+0x12a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2221      	movs	r2, #33	; 0x21
 8003fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003fbc:	f7fd fb86 	bl	80016cc <HAL_GetTick>
 8003fc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	88fa      	ldrh	r2, [r7, #6]
 8003fcc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003fd6:	e042      	b.n	800405e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fee:	d122      	bne.n	8004036 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2180      	movs	r1, #128	; 0x80
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f84c 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e042      	b.n	8004090 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800401c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3302      	adds	r3, #2
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	e017      	b.n	800405e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3301      	adds	r3, #1
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	e013      	b.n	800405e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f829 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e01f      	b.n	8004090 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	60ba      	str	r2, [r7, #8]
 8004056:	781a      	ldrb	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1b7      	bne.n	8003fd8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	2140      	movs	r1, #64	; 0x40
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f810 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e006      	b.n	8004090 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	e02c      	b.n	8004104 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d028      	beq.n	8004104 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040b8:	f7fd fb08 	bl	80016cc <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d21d      	bcs.n	8004104 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e00f      	b.n	8004124 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4013      	ands	r3, r2
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	429a      	cmp	r2, r3
 8004120:	d0c3      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800412c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800416e:	f023 030c 	bic.w	r3, r3, #12
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	430b      	orrs	r3, r1
 800417a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419a:	f040 818b 	bne.w	80044b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4ac1      	ldr	r2, [pc, #772]	; (80044a8 <UART_SetConfig+0x37c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d005      	beq.n	80041b4 <UART_SetConfig+0x88>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4abf      	ldr	r2, [pc, #764]	; (80044ac <UART_SetConfig+0x380>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	f040 80bd 	bne.w	800432e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041b4:	f7fe fdca 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 80041b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	461d      	mov	r5, r3
 80041be:	f04f 0600 	mov.w	r6, #0
 80041c2:	46a8      	mov	r8, r5
 80041c4:	46b1      	mov	r9, r6
 80041c6:	eb18 0308 	adds.w	r3, r8, r8
 80041ca:	eb49 0409 	adc.w	r4, r9, r9
 80041ce:	4698      	mov	r8, r3
 80041d0:	46a1      	mov	r9, r4
 80041d2:	eb18 0805 	adds.w	r8, r8, r5
 80041d6:	eb49 0906 	adc.w	r9, r9, r6
 80041da:	f04f 0100 	mov.w	r1, #0
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041ee:	4688      	mov	r8, r1
 80041f0:	4691      	mov	r9, r2
 80041f2:	eb18 0005 	adds.w	r0, r8, r5
 80041f6:	eb49 0106 	adc.w	r1, r9, r6
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	461d      	mov	r5, r3
 8004200:	f04f 0600 	mov.w	r6, #0
 8004204:	196b      	adds	r3, r5, r5
 8004206:	eb46 0406 	adc.w	r4, r6, r6
 800420a:	461a      	mov	r2, r3
 800420c:	4623      	mov	r3, r4
 800420e:	f7fc f837 	bl	8000280 <__aeabi_uldivmod>
 8004212:	4603      	mov	r3, r0
 8004214:	460c      	mov	r4, r1
 8004216:	461a      	mov	r2, r3
 8004218:	4ba5      	ldr	r3, [pc, #660]	; (80044b0 <UART_SetConfig+0x384>)
 800421a:	fba3 2302 	umull	r2, r3, r3, r2
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	461d      	mov	r5, r3
 8004228:	f04f 0600 	mov.w	r6, #0
 800422c:	46a9      	mov	r9, r5
 800422e:	46b2      	mov	sl, r6
 8004230:	eb19 0309 	adds.w	r3, r9, r9
 8004234:	eb4a 040a 	adc.w	r4, sl, sl
 8004238:	4699      	mov	r9, r3
 800423a:	46a2      	mov	sl, r4
 800423c:	eb19 0905 	adds.w	r9, r9, r5
 8004240:	eb4a 0a06 	adc.w	sl, sl, r6
 8004244:	f04f 0100 	mov.w	r1, #0
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004250:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004254:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004258:	4689      	mov	r9, r1
 800425a:	4692      	mov	sl, r2
 800425c:	eb19 0005 	adds.w	r0, r9, r5
 8004260:	eb4a 0106 	adc.w	r1, sl, r6
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	461d      	mov	r5, r3
 800426a:	f04f 0600 	mov.w	r6, #0
 800426e:	196b      	adds	r3, r5, r5
 8004270:	eb46 0406 	adc.w	r4, r6, r6
 8004274:	461a      	mov	r2, r3
 8004276:	4623      	mov	r3, r4
 8004278:	f7fc f802 	bl	8000280 <__aeabi_uldivmod>
 800427c:	4603      	mov	r3, r0
 800427e:	460c      	mov	r4, r1
 8004280:	461a      	mov	r2, r3
 8004282:	4b8b      	ldr	r3, [pc, #556]	; (80044b0 <UART_SetConfig+0x384>)
 8004284:	fba3 1302 	umull	r1, r3, r3, r2
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	2164      	movs	r1, #100	; 0x64
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	3332      	adds	r3, #50	; 0x32
 8004296:	4a86      	ldr	r2, [pc, #536]	; (80044b0 <UART_SetConfig+0x384>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a4:	4498      	add	r8, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	461d      	mov	r5, r3
 80042aa:	f04f 0600 	mov.w	r6, #0
 80042ae:	46a9      	mov	r9, r5
 80042b0:	46b2      	mov	sl, r6
 80042b2:	eb19 0309 	adds.w	r3, r9, r9
 80042b6:	eb4a 040a 	adc.w	r4, sl, sl
 80042ba:	4699      	mov	r9, r3
 80042bc:	46a2      	mov	sl, r4
 80042be:	eb19 0905 	adds.w	r9, r9, r5
 80042c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042da:	4689      	mov	r9, r1
 80042dc:	4692      	mov	sl, r2
 80042de:	eb19 0005 	adds.w	r0, r9, r5
 80042e2:	eb4a 0106 	adc.w	r1, sl, r6
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	461d      	mov	r5, r3
 80042ec:	f04f 0600 	mov.w	r6, #0
 80042f0:	196b      	adds	r3, r5, r5
 80042f2:	eb46 0406 	adc.w	r4, r6, r6
 80042f6:	461a      	mov	r2, r3
 80042f8:	4623      	mov	r3, r4
 80042fa:	f7fb ffc1 	bl	8000280 <__aeabi_uldivmod>
 80042fe:	4603      	mov	r3, r0
 8004300:	460c      	mov	r4, r1
 8004302:	461a      	mov	r2, r3
 8004304:	4b6a      	ldr	r3, [pc, #424]	; (80044b0 <UART_SetConfig+0x384>)
 8004306:	fba3 1302 	umull	r1, r3, r3, r2
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	2164      	movs	r1, #100	; 0x64
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	3332      	adds	r3, #50	; 0x32
 8004318:	4a65      	ldr	r2, [pc, #404]	; (80044b0 <UART_SetConfig+0x384>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	f003 0207 	and.w	r2, r3, #7
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4442      	add	r2, r8
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	e26f      	b.n	800480e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800432e:	f7fe fcf9 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8004332:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	461d      	mov	r5, r3
 8004338:	f04f 0600 	mov.w	r6, #0
 800433c:	46a8      	mov	r8, r5
 800433e:	46b1      	mov	r9, r6
 8004340:	eb18 0308 	adds.w	r3, r8, r8
 8004344:	eb49 0409 	adc.w	r4, r9, r9
 8004348:	4698      	mov	r8, r3
 800434a:	46a1      	mov	r9, r4
 800434c:	eb18 0805 	adds.w	r8, r8, r5
 8004350:	eb49 0906 	adc.w	r9, r9, r6
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004360:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004364:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004368:	4688      	mov	r8, r1
 800436a:	4691      	mov	r9, r2
 800436c:	eb18 0005 	adds.w	r0, r8, r5
 8004370:	eb49 0106 	adc.w	r1, r9, r6
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	461d      	mov	r5, r3
 800437a:	f04f 0600 	mov.w	r6, #0
 800437e:	196b      	adds	r3, r5, r5
 8004380:	eb46 0406 	adc.w	r4, r6, r6
 8004384:	461a      	mov	r2, r3
 8004386:	4623      	mov	r3, r4
 8004388:	f7fb ff7a 	bl	8000280 <__aeabi_uldivmod>
 800438c:	4603      	mov	r3, r0
 800438e:	460c      	mov	r4, r1
 8004390:	461a      	mov	r2, r3
 8004392:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <UART_SetConfig+0x384>)
 8004394:	fba3 2302 	umull	r2, r3, r3, r2
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	461d      	mov	r5, r3
 80043a2:	f04f 0600 	mov.w	r6, #0
 80043a6:	46a9      	mov	r9, r5
 80043a8:	46b2      	mov	sl, r6
 80043aa:	eb19 0309 	adds.w	r3, r9, r9
 80043ae:	eb4a 040a 	adc.w	r4, sl, sl
 80043b2:	4699      	mov	r9, r3
 80043b4:	46a2      	mov	sl, r4
 80043b6:	eb19 0905 	adds.w	r9, r9, r5
 80043ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043d2:	4689      	mov	r9, r1
 80043d4:	4692      	mov	sl, r2
 80043d6:	eb19 0005 	adds.w	r0, r9, r5
 80043da:	eb4a 0106 	adc.w	r1, sl, r6
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	461d      	mov	r5, r3
 80043e4:	f04f 0600 	mov.w	r6, #0
 80043e8:	196b      	adds	r3, r5, r5
 80043ea:	eb46 0406 	adc.w	r4, r6, r6
 80043ee:	461a      	mov	r2, r3
 80043f0:	4623      	mov	r3, r4
 80043f2:	f7fb ff45 	bl	8000280 <__aeabi_uldivmod>
 80043f6:	4603      	mov	r3, r0
 80043f8:	460c      	mov	r4, r1
 80043fa:	461a      	mov	r2, r3
 80043fc:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <UART_SetConfig+0x384>)
 80043fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2164      	movs	r1, #100	; 0x64
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	3332      	adds	r3, #50	; 0x32
 8004410:	4a27      	ldr	r2, [pc, #156]	; (80044b0 <UART_SetConfig+0x384>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800441e:	4498      	add	r8, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	461d      	mov	r5, r3
 8004424:	f04f 0600 	mov.w	r6, #0
 8004428:	46a9      	mov	r9, r5
 800442a:	46b2      	mov	sl, r6
 800442c:	eb19 0309 	adds.w	r3, r9, r9
 8004430:	eb4a 040a 	adc.w	r4, sl, sl
 8004434:	4699      	mov	r9, r3
 8004436:	46a2      	mov	sl, r4
 8004438:	eb19 0905 	adds.w	r9, r9, r5
 800443c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800444c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004450:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004454:	4689      	mov	r9, r1
 8004456:	4692      	mov	sl, r2
 8004458:	eb19 0005 	adds.w	r0, r9, r5
 800445c:	eb4a 0106 	adc.w	r1, sl, r6
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	461d      	mov	r5, r3
 8004466:	f04f 0600 	mov.w	r6, #0
 800446a:	196b      	adds	r3, r5, r5
 800446c:	eb46 0406 	adc.w	r4, r6, r6
 8004470:	461a      	mov	r2, r3
 8004472:	4623      	mov	r3, r4
 8004474:	f7fb ff04 	bl	8000280 <__aeabi_uldivmod>
 8004478:	4603      	mov	r3, r0
 800447a:	460c      	mov	r4, r1
 800447c:	461a      	mov	r2, r3
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <UART_SetConfig+0x384>)
 8004480:	fba3 1302 	umull	r1, r3, r3, r2
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	2164      	movs	r1, #100	; 0x64
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	3332      	adds	r3, #50	; 0x32
 8004492:	4a07      	ldr	r2, [pc, #28]	; (80044b0 <UART_SetConfig+0x384>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	f003 0207 	and.w	r2, r3, #7
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4442      	add	r2, r8
 80044a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80044a6:	e1b2      	b.n	800480e <UART_SetConfig+0x6e2>
 80044a8:	40011000 	.word	0x40011000
 80044ac:	40011400 	.word	0x40011400
 80044b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4ad7      	ldr	r2, [pc, #860]	; (8004818 <UART_SetConfig+0x6ec>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d005      	beq.n	80044ca <UART_SetConfig+0x39e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4ad6      	ldr	r2, [pc, #856]	; (800481c <UART_SetConfig+0x6f0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	f040 80d1 	bne.w	800466c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80044ca:	f7fe fc3f 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 80044ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	469a      	mov	sl, r3
 80044d4:	f04f 0b00 	mov.w	fp, #0
 80044d8:	46d0      	mov	r8, sl
 80044da:	46d9      	mov	r9, fp
 80044dc:	eb18 0308 	adds.w	r3, r8, r8
 80044e0:	eb49 0409 	adc.w	r4, r9, r9
 80044e4:	4698      	mov	r8, r3
 80044e6:	46a1      	mov	r9, r4
 80044e8:	eb18 080a 	adds.w	r8, r8, sl
 80044ec:	eb49 090b 	adc.w	r9, r9, fp
 80044f0:	f04f 0100 	mov.w	r1, #0
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004500:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004504:	4688      	mov	r8, r1
 8004506:	4691      	mov	r9, r2
 8004508:	eb1a 0508 	adds.w	r5, sl, r8
 800450c:	eb4b 0609 	adc.w	r6, fp, r9
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4619      	mov	r1, r3
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	f04f 0400 	mov.w	r4, #0
 8004522:	0094      	lsls	r4, r2, #2
 8004524:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004528:	008b      	lsls	r3, r1, #2
 800452a:	461a      	mov	r2, r3
 800452c:	4623      	mov	r3, r4
 800452e:	4628      	mov	r0, r5
 8004530:	4631      	mov	r1, r6
 8004532:	f7fb fea5 	bl	8000280 <__aeabi_uldivmod>
 8004536:	4603      	mov	r3, r0
 8004538:	460c      	mov	r4, r1
 800453a:	461a      	mov	r2, r3
 800453c:	4bb8      	ldr	r3, [pc, #736]	; (8004820 <UART_SetConfig+0x6f4>)
 800453e:	fba3 2302 	umull	r2, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	469b      	mov	fp, r3
 800454c:	f04f 0c00 	mov.w	ip, #0
 8004550:	46d9      	mov	r9, fp
 8004552:	46e2      	mov	sl, ip
 8004554:	eb19 0309 	adds.w	r3, r9, r9
 8004558:	eb4a 040a 	adc.w	r4, sl, sl
 800455c:	4699      	mov	r9, r3
 800455e:	46a2      	mov	sl, r4
 8004560:	eb19 090b 	adds.w	r9, r9, fp
 8004564:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004568:	f04f 0100 	mov.w	r1, #0
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004574:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004578:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800457c:	4689      	mov	r9, r1
 800457e:	4692      	mov	sl, r2
 8004580:	eb1b 0509 	adds.w	r5, fp, r9
 8004584:	eb4c 060a 	adc.w	r6, ip, sl
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4619      	mov	r1, r3
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	f04f 0400 	mov.w	r4, #0
 800459a:	0094      	lsls	r4, r2, #2
 800459c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045a0:	008b      	lsls	r3, r1, #2
 80045a2:	461a      	mov	r2, r3
 80045a4:	4623      	mov	r3, r4
 80045a6:	4628      	mov	r0, r5
 80045a8:	4631      	mov	r1, r6
 80045aa:	f7fb fe69 	bl	8000280 <__aeabi_uldivmod>
 80045ae:	4603      	mov	r3, r0
 80045b0:	460c      	mov	r4, r1
 80045b2:	461a      	mov	r2, r3
 80045b4:	4b9a      	ldr	r3, [pc, #616]	; (8004820 <UART_SetConfig+0x6f4>)
 80045b6:	fba3 1302 	umull	r1, r3, r3, r2
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	2164      	movs	r1, #100	; 0x64
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	3332      	adds	r3, #50	; 0x32
 80045c8:	4a95      	ldr	r2, [pc, #596]	; (8004820 <UART_SetConfig+0x6f4>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d4:	4498      	add	r8, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	469b      	mov	fp, r3
 80045da:	f04f 0c00 	mov.w	ip, #0
 80045de:	46d9      	mov	r9, fp
 80045e0:	46e2      	mov	sl, ip
 80045e2:	eb19 0309 	adds.w	r3, r9, r9
 80045e6:	eb4a 040a 	adc.w	r4, sl, sl
 80045ea:	4699      	mov	r9, r3
 80045ec:	46a2      	mov	sl, r4
 80045ee:	eb19 090b 	adds.w	r9, r9, fp
 80045f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045f6:	f04f 0100 	mov.w	r1, #0
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004602:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004606:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800460a:	4689      	mov	r9, r1
 800460c:	4692      	mov	sl, r2
 800460e:	eb1b 0509 	adds.w	r5, fp, r9
 8004612:	eb4c 060a 	adc.w	r6, ip, sl
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4619      	mov	r1, r3
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	0094      	lsls	r4, r2, #2
 800462a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800462e:	008b      	lsls	r3, r1, #2
 8004630:	461a      	mov	r2, r3
 8004632:	4623      	mov	r3, r4
 8004634:	4628      	mov	r0, r5
 8004636:	4631      	mov	r1, r6
 8004638:	f7fb fe22 	bl	8000280 <__aeabi_uldivmod>
 800463c:	4603      	mov	r3, r0
 800463e:	460c      	mov	r4, r1
 8004640:	461a      	mov	r2, r3
 8004642:	4b77      	ldr	r3, [pc, #476]	; (8004820 <UART_SetConfig+0x6f4>)
 8004644:	fba3 1302 	umull	r1, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	2164      	movs	r1, #100	; 0x64
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	3332      	adds	r3, #50	; 0x32
 8004656:	4a72      	ldr	r2, [pc, #456]	; (8004820 <UART_SetConfig+0x6f4>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	f003 020f 	and.w	r2, r3, #15
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4442      	add	r2, r8
 8004668:	609a      	str	r2, [r3, #8]
 800466a:	e0d0      	b.n	800480e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7fe fb5a 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8004670:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	469a      	mov	sl, r3
 8004676:	f04f 0b00 	mov.w	fp, #0
 800467a:	46d0      	mov	r8, sl
 800467c:	46d9      	mov	r9, fp
 800467e:	eb18 0308 	adds.w	r3, r8, r8
 8004682:	eb49 0409 	adc.w	r4, r9, r9
 8004686:	4698      	mov	r8, r3
 8004688:	46a1      	mov	r9, r4
 800468a:	eb18 080a 	adds.w	r8, r8, sl
 800468e:	eb49 090b 	adc.w	r9, r9, fp
 8004692:	f04f 0100 	mov.w	r1, #0
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800469e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046a6:	4688      	mov	r8, r1
 80046a8:	4691      	mov	r9, r2
 80046aa:	eb1a 0508 	adds.w	r5, sl, r8
 80046ae:	eb4b 0609 	adc.w	r6, fp, r9
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4619      	mov	r1, r3
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	f04f 0400 	mov.w	r4, #0
 80046c4:	0094      	lsls	r4, r2, #2
 80046c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046ca:	008b      	lsls	r3, r1, #2
 80046cc:	461a      	mov	r2, r3
 80046ce:	4623      	mov	r3, r4
 80046d0:	4628      	mov	r0, r5
 80046d2:	4631      	mov	r1, r6
 80046d4:	f7fb fdd4 	bl	8000280 <__aeabi_uldivmod>
 80046d8:	4603      	mov	r3, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	461a      	mov	r2, r3
 80046de:	4b50      	ldr	r3, [pc, #320]	; (8004820 <UART_SetConfig+0x6f4>)
 80046e0:	fba3 2302 	umull	r2, r3, r3, r2
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	469b      	mov	fp, r3
 80046ee:	f04f 0c00 	mov.w	ip, #0
 80046f2:	46d9      	mov	r9, fp
 80046f4:	46e2      	mov	sl, ip
 80046f6:	eb19 0309 	adds.w	r3, r9, r9
 80046fa:	eb4a 040a 	adc.w	r4, sl, sl
 80046fe:	4699      	mov	r9, r3
 8004700:	46a2      	mov	sl, r4
 8004702:	eb19 090b 	adds.w	r9, r9, fp
 8004706:	eb4a 0a0c 	adc.w	sl, sl, ip
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004716:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800471a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800471e:	4689      	mov	r9, r1
 8004720:	4692      	mov	sl, r2
 8004722:	eb1b 0509 	adds.w	r5, fp, r9
 8004726:	eb4c 060a 	adc.w	r6, ip, sl
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4619      	mov	r1, r3
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	f04f 0400 	mov.w	r4, #0
 800473c:	0094      	lsls	r4, r2, #2
 800473e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004742:	008b      	lsls	r3, r1, #2
 8004744:	461a      	mov	r2, r3
 8004746:	4623      	mov	r3, r4
 8004748:	4628      	mov	r0, r5
 800474a:	4631      	mov	r1, r6
 800474c:	f7fb fd98 	bl	8000280 <__aeabi_uldivmod>
 8004750:	4603      	mov	r3, r0
 8004752:	460c      	mov	r4, r1
 8004754:	461a      	mov	r2, r3
 8004756:	4b32      	ldr	r3, [pc, #200]	; (8004820 <UART_SetConfig+0x6f4>)
 8004758:	fba3 1302 	umull	r1, r3, r3, r2
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	2164      	movs	r1, #100	; 0x64
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	3332      	adds	r3, #50	; 0x32
 800476a:	4a2d      	ldr	r2, [pc, #180]	; (8004820 <UART_SetConfig+0x6f4>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004776:	4498      	add	r8, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	469b      	mov	fp, r3
 800477c:	f04f 0c00 	mov.w	ip, #0
 8004780:	46d9      	mov	r9, fp
 8004782:	46e2      	mov	sl, ip
 8004784:	eb19 0309 	adds.w	r3, r9, r9
 8004788:	eb4a 040a 	adc.w	r4, sl, sl
 800478c:	4699      	mov	r9, r3
 800478e:	46a2      	mov	sl, r4
 8004790:	eb19 090b 	adds.w	r9, r9, fp
 8004794:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047ac:	4689      	mov	r9, r1
 80047ae:	4692      	mov	sl, r2
 80047b0:	eb1b 0509 	adds.w	r5, fp, r9
 80047b4:	eb4c 060a 	adc.w	r6, ip, sl
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4619      	mov	r1, r3
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	f04f 0400 	mov.w	r4, #0
 80047ca:	0094      	lsls	r4, r2, #2
 80047cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047d0:	008b      	lsls	r3, r1, #2
 80047d2:	461a      	mov	r2, r3
 80047d4:	4623      	mov	r3, r4
 80047d6:	4628      	mov	r0, r5
 80047d8:	4631      	mov	r1, r6
 80047da:	f7fb fd51 	bl	8000280 <__aeabi_uldivmod>
 80047de:	4603      	mov	r3, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	461a      	mov	r2, r3
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <UART_SetConfig+0x6f4>)
 80047e6:	fba3 1302 	umull	r1, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2164      	movs	r1, #100	; 0x64
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	3332      	adds	r3, #50	; 0x32
 80047f8:	4a09      	ldr	r2, [pc, #36]	; (8004820 <UART_SetConfig+0x6f4>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4442      	add	r2, r8
 800480a:	609a      	str	r2, [r3, #8]
}
 800480c:	e7ff      	b.n	800480e <UART_SetConfig+0x6e2>
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004818:	40011000 	.word	0x40011000
 800481c:	40011400 	.word	0x40011400
 8004820:	51eb851f 	.word	0x51eb851f

08004824 <__errno>:
 8004824:	4b01      	ldr	r3, [pc, #4]	; (800482c <__errno+0x8>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000024 	.word	0x20000024

08004830 <__libc_init_array>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4e0d      	ldr	r6, [pc, #52]	; (8004868 <__libc_init_array+0x38>)
 8004834:	4c0d      	ldr	r4, [pc, #52]	; (800486c <__libc_init_array+0x3c>)
 8004836:	1ba4      	subs	r4, r4, r6
 8004838:	10a4      	asrs	r4, r4, #2
 800483a:	2500      	movs	r5, #0
 800483c:	42a5      	cmp	r5, r4
 800483e:	d109      	bne.n	8004854 <__libc_init_array+0x24>
 8004840:	4e0b      	ldr	r6, [pc, #44]	; (8004870 <__libc_init_array+0x40>)
 8004842:	4c0c      	ldr	r4, [pc, #48]	; (8004874 <__libc_init_array+0x44>)
 8004844:	f000 fc26 	bl	8005094 <_init>
 8004848:	1ba4      	subs	r4, r4, r6
 800484a:	10a4      	asrs	r4, r4, #2
 800484c:	2500      	movs	r5, #0
 800484e:	42a5      	cmp	r5, r4
 8004850:	d105      	bne.n	800485e <__libc_init_array+0x2e>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004858:	4798      	blx	r3
 800485a:	3501      	adds	r5, #1
 800485c:	e7ee      	b.n	800483c <__libc_init_array+0xc>
 800485e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004862:	4798      	blx	r3
 8004864:	3501      	adds	r5, #1
 8004866:	e7f2      	b.n	800484e <__libc_init_array+0x1e>
 8004868:	08005174 	.word	0x08005174
 800486c:	08005174 	.word	0x08005174
 8004870:	08005174 	.word	0x08005174
 8004874:	08005178 	.word	0x08005178

08004878 <memset>:
 8004878:	4402      	add	r2, r0
 800487a:	4603      	mov	r3, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <siprintf>:
 8004888:	b40e      	push	{r1, r2, r3}
 800488a:	b500      	push	{lr}
 800488c:	b09c      	sub	sp, #112	; 0x70
 800488e:	ab1d      	add	r3, sp, #116	; 0x74
 8004890:	9002      	str	r0, [sp, #8]
 8004892:	9006      	str	r0, [sp, #24]
 8004894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004898:	4809      	ldr	r0, [pc, #36]	; (80048c0 <siprintf+0x38>)
 800489a:	9107      	str	r1, [sp, #28]
 800489c:	9104      	str	r1, [sp, #16]
 800489e:	4909      	ldr	r1, [pc, #36]	; (80048c4 <siprintf+0x3c>)
 80048a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048a4:	9105      	str	r1, [sp, #20]
 80048a6:	6800      	ldr	r0, [r0, #0]
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	a902      	add	r1, sp, #8
 80048ac:	f000 f866 	bl	800497c <_svfiprintf_r>
 80048b0:	9b02      	ldr	r3, [sp, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	b01c      	add	sp, #112	; 0x70
 80048b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048bc:	b003      	add	sp, #12
 80048be:	4770      	bx	lr
 80048c0:	20000024 	.word	0x20000024
 80048c4:	ffff0208 	.word	0xffff0208

080048c8 <__ssputs_r>:
 80048c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	688e      	ldr	r6, [r1, #8]
 80048ce:	429e      	cmp	r6, r3
 80048d0:	4682      	mov	sl, r0
 80048d2:	460c      	mov	r4, r1
 80048d4:	4690      	mov	r8, r2
 80048d6:	4699      	mov	r9, r3
 80048d8:	d837      	bhi.n	800494a <__ssputs_r+0x82>
 80048da:	898a      	ldrh	r2, [r1, #12]
 80048dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048e0:	d031      	beq.n	8004946 <__ssputs_r+0x7e>
 80048e2:	6825      	ldr	r5, [r4, #0]
 80048e4:	6909      	ldr	r1, [r1, #16]
 80048e6:	1a6f      	subs	r7, r5, r1
 80048e8:	6965      	ldr	r5, [r4, #20]
 80048ea:	2302      	movs	r3, #2
 80048ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80048f4:	f109 0301 	add.w	r3, r9, #1
 80048f8:	443b      	add	r3, r7
 80048fa:	429d      	cmp	r5, r3
 80048fc:	bf38      	it	cc
 80048fe:	461d      	movcc	r5, r3
 8004900:	0553      	lsls	r3, r2, #21
 8004902:	d530      	bpl.n	8004966 <__ssputs_r+0x9e>
 8004904:	4629      	mov	r1, r5
 8004906:	f000 fb2b 	bl	8004f60 <_malloc_r>
 800490a:	4606      	mov	r6, r0
 800490c:	b950      	cbnz	r0, 8004924 <__ssputs_r+0x5c>
 800490e:	230c      	movs	r3, #12
 8004910:	f8ca 3000 	str.w	r3, [sl]
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491a:	81a3      	strh	r3, [r4, #12]
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004924:	463a      	mov	r2, r7
 8004926:	6921      	ldr	r1, [r4, #16]
 8004928:	f000 faa8 	bl	8004e7c <memcpy>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	6126      	str	r6, [r4, #16]
 800493a:	6165      	str	r5, [r4, #20]
 800493c:	443e      	add	r6, r7
 800493e:	1bed      	subs	r5, r5, r7
 8004940:	6026      	str	r6, [r4, #0]
 8004942:	60a5      	str	r5, [r4, #8]
 8004944:	464e      	mov	r6, r9
 8004946:	454e      	cmp	r6, r9
 8004948:	d900      	bls.n	800494c <__ssputs_r+0x84>
 800494a:	464e      	mov	r6, r9
 800494c:	4632      	mov	r2, r6
 800494e:	4641      	mov	r1, r8
 8004950:	6820      	ldr	r0, [r4, #0]
 8004952:	f000 fa9e 	bl	8004e92 <memmove>
 8004956:	68a3      	ldr	r3, [r4, #8]
 8004958:	1b9b      	subs	r3, r3, r6
 800495a:	60a3      	str	r3, [r4, #8]
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	441e      	add	r6, r3
 8004960:	6026      	str	r6, [r4, #0]
 8004962:	2000      	movs	r0, #0
 8004964:	e7dc      	b.n	8004920 <__ssputs_r+0x58>
 8004966:	462a      	mov	r2, r5
 8004968:	f000 fb54 	bl	8005014 <_realloc_r>
 800496c:	4606      	mov	r6, r0
 800496e:	2800      	cmp	r0, #0
 8004970:	d1e2      	bne.n	8004938 <__ssputs_r+0x70>
 8004972:	6921      	ldr	r1, [r4, #16]
 8004974:	4650      	mov	r0, sl
 8004976:	f000 faa5 	bl	8004ec4 <_free_r>
 800497a:	e7c8      	b.n	800490e <__ssputs_r+0x46>

0800497c <_svfiprintf_r>:
 800497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004980:	461d      	mov	r5, r3
 8004982:	898b      	ldrh	r3, [r1, #12]
 8004984:	061f      	lsls	r7, r3, #24
 8004986:	b09d      	sub	sp, #116	; 0x74
 8004988:	4680      	mov	r8, r0
 800498a:	460c      	mov	r4, r1
 800498c:	4616      	mov	r6, r2
 800498e:	d50f      	bpl.n	80049b0 <_svfiprintf_r+0x34>
 8004990:	690b      	ldr	r3, [r1, #16]
 8004992:	b96b      	cbnz	r3, 80049b0 <_svfiprintf_r+0x34>
 8004994:	2140      	movs	r1, #64	; 0x40
 8004996:	f000 fae3 	bl	8004f60 <_malloc_r>
 800499a:	6020      	str	r0, [r4, #0]
 800499c:	6120      	str	r0, [r4, #16]
 800499e:	b928      	cbnz	r0, 80049ac <_svfiprintf_r+0x30>
 80049a0:	230c      	movs	r3, #12
 80049a2:	f8c8 3000 	str.w	r3, [r8]
 80049a6:	f04f 30ff 	mov.w	r0, #4294967295
 80049aa:	e0c8      	b.n	8004b3e <_svfiprintf_r+0x1c2>
 80049ac:	2340      	movs	r3, #64	; 0x40
 80049ae:	6163      	str	r3, [r4, #20]
 80049b0:	2300      	movs	r3, #0
 80049b2:	9309      	str	r3, [sp, #36]	; 0x24
 80049b4:	2320      	movs	r3, #32
 80049b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049ba:	2330      	movs	r3, #48	; 0x30
 80049bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049c0:	9503      	str	r5, [sp, #12]
 80049c2:	f04f 0b01 	mov.w	fp, #1
 80049c6:	4637      	mov	r7, r6
 80049c8:	463d      	mov	r5, r7
 80049ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80049ce:	b10b      	cbz	r3, 80049d4 <_svfiprintf_r+0x58>
 80049d0:	2b25      	cmp	r3, #37	; 0x25
 80049d2:	d13e      	bne.n	8004a52 <_svfiprintf_r+0xd6>
 80049d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80049d8:	d00b      	beq.n	80049f2 <_svfiprintf_r+0x76>
 80049da:	4653      	mov	r3, sl
 80049dc:	4632      	mov	r2, r6
 80049de:	4621      	mov	r1, r4
 80049e0:	4640      	mov	r0, r8
 80049e2:	f7ff ff71 	bl	80048c8 <__ssputs_r>
 80049e6:	3001      	adds	r0, #1
 80049e8:	f000 80a4 	beq.w	8004b34 <_svfiprintf_r+0x1b8>
 80049ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ee:	4453      	add	r3, sl
 80049f0:	9309      	str	r3, [sp, #36]	; 0x24
 80049f2:	783b      	ldrb	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 809d 	beq.w	8004b34 <_svfiprintf_r+0x1b8>
 80049fa:	2300      	movs	r3, #0
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a04:	9304      	str	r3, [sp, #16]
 8004a06:	9307      	str	r3, [sp, #28]
 8004a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8004a0e:	462f      	mov	r7, r5
 8004a10:	2205      	movs	r2, #5
 8004a12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004a16:	4850      	ldr	r0, [pc, #320]	; (8004b58 <_svfiprintf_r+0x1dc>)
 8004a18:	f7fb fbe2 	bl	80001e0 <memchr>
 8004a1c:	9b04      	ldr	r3, [sp, #16]
 8004a1e:	b9d0      	cbnz	r0, 8004a56 <_svfiprintf_r+0xda>
 8004a20:	06d9      	lsls	r1, r3, #27
 8004a22:	bf44      	itt	mi
 8004a24:	2220      	movmi	r2, #32
 8004a26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a2a:	071a      	lsls	r2, r3, #28
 8004a2c:	bf44      	itt	mi
 8004a2e:	222b      	movmi	r2, #43	; 0x2b
 8004a30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a34:	782a      	ldrb	r2, [r5, #0]
 8004a36:	2a2a      	cmp	r2, #42	; 0x2a
 8004a38:	d015      	beq.n	8004a66 <_svfiprintf_r+0xea>
 8004a3a:	9a07      	ldr	r2, [sp, #28]
 8004a3c:	462f      	mov	r7, r5
 8004a3e:	2000      	movs	r0, #0
 8004a40:	250a      	movs	r5, #10
 8004a42:	4639      	mov	r1, r7
 8004a44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a48:	3b30      	subs	r3, #48	; 0x30
 8004a4a:	2b09      	cmp	r3, #9
 8004a4c:	d94d      	bls.n	8004aea <_svfiprintf_r+0x16e>
 8004a4e:	b1b8      	cbz	r0, 8004a80 <_svfiprintf_r+0x104>
 8004a50:	e00f      	b.n	8004a72 <_svfiprintf_r+0xf6>
 8004a52:	462f      	mov	r7, r5
 8004a54:	e7b8      	b.n	80049c8 <_svfiprintf_r+0x4c>
 8004a56:	4a40      	ldr	r2, [pc, #256]	; (8004b58 <_svfiprintf_r+0x1dc>)
 8004a58:	1a80      	subs	r0, r0, r2
 8004a5a:	fa0b f000 	lsl.w	r0, fp, r0
 8004a5e:	4318      	orrs	r0, r3
 8004a60:	9004      	str	r0, [sp, #16]
 8004a62:	463d      	mov	r5, r7
 8004a64:	e7d3      	b.n	8004a0e <_svfiprintf_r+0x92>
 8004a66:	9a03      	ldr	r2, [sp, #12]
 8004a68:	1d11      	adds	r1, r2, #4
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	9103      	str	r1, [sp, #12]
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	db01      	blt.n	8004a76 <_svfiprintf_r+0xfa>
 8004a72:	9207      	str	r2, [sp, #28]
 8004a74:	e004      	b.n	8004a80 <_svfiprintf_r+0x104>
 8004a76:	4252      	negs	r2, r2
 8004a78:	f043 0302 	orr.w	r3, r3, #2
 8004a7c:	9207      	str	r2, [sp, #28]
 8004a7e:	9304      	str	r3, [sp, #16]
 8004a80:	783b      	ldrb	r3, [r7, #0]
 8004a82:	2b2e      	cmp	r3, #46	; 0x2e
 8004a84:	d10c      	bne.n	8004aa0 <_svfiprintf_r+0x124>
 8004a86:	787b      	ldrb	r3, [r7, #1]
 8004a88:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8a:	d133      	bne.n	8004af4 <_svfiprintf_r+0x178>
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	1d1a      	adds	r2, r3, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	9203      	str	r2, [sp, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bfb8      	it	lt
 8004a98:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a9c:	3702      	adds	r7, #2
 8004a9e:	9305      	str	r3, [sp, #20]
 8004aa0:	4d2e      	ldr	r5, [pc, #184]	; (8004b5c <_svfiprintf_r+0x1e0>)
 8004aa2:	7839      	ldrb	r1, [r7, #0]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f7fb fb9a 	bl	80001e0 <memchr>
 8004aac:	b138      	cbz	r0, 8004abe <_svfiprintf_r+0x142>
 8004aae:	2340      	movs	r3, #64	; 0x40
 8004ab0:	1b40      	subs	r0, r0, r5
 8004ab2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ab6:	9b04      	ldr	r3, [sp, #16]
 8004ab8:	4303      	orrs	r3, r0
 8004aba:	3701      	adds	r7, #1
 8004abc:	9304      	str	r3, [sp, #16]
 8004abe:	7839      	ldrb	r1, [r7, #0]
 8004ac0:	4827      	ldr	r0, [pc, #156]	; (8004b60 <_svfiprintf_r+0x1e4>)
 8004ac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ac6:	2206      	movs	r2, #6
 8004ac8:	1c7e      	adds	r6, r7, #1
 8004aca:	f7fb fb89 	bl	80001e0 <memchr>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d038      	beq.n	8004b44 <_svfiprintf_r+0x1c8>
 8004ad2:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <_svfiprintf_r+0x1e8>)
 8004ad4:	bb13      	cbnz	r3, 8004b1c <_svfiprintf_r+0x1a0>
 8004ad6:	9b03      	ldr	r3, [sp, #12]
 8004ad8:	3307      	adds	r3, #7
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	3308      	adds	r3, #8
 8004ae0:	9303      	str	r3, [sp, #12]
 8004ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae4:	444b      	add	r3, r9
 8004ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae8:	e76d      	b.n	80049c6 <_svfiprintf_r+0x4a>
 8004aea:	fb05 3202 	mla	r2, r5, r2, r3
 8004aee:	2001      	movs	r0, #1
 8004af0:	460f      	mov	r7, r1
 8004af2:	e7a6      	b.n	8004a42 <_svfiprintf_r+0xc6>
 8004af4:	2300      	movs	r3, #0
 8004af6:	3701      	adds	r7, #1
 8004af8:	9305      	str	r3, [sp, #20]
 8004afa:	4619      	mov	r1, r3
 8004afc:	250a      	movs	r5, #10
 8004afe:	4638      	mov	r0, r7
 8004b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b04:	3a30      	subs	r2, #48	; 0x30
 8004b06:	2a09      	cmp	r2, #9
 8004b08:	d903      	bls.n	8004b12 <_svfiprintf_r+0x196>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0c8      	beq.n	8004aa0 <_svfiprintf_r+0x124>
 8004b0e:	9105      	str	r1, [sp, #20]
 8004b10:	e7c6      	b.n	8004aa0 <_svfiprintf_r+0x124>
 8004b12:	fb05 2101 	mla	r1, r5, r1, r2
 8004b16:	2301      	movs	r3, #1
 8004b18:	4607      	mov	r7, r0
 8004b1a:	e7f0      	b.n	8004afe <_svfiprintf_r+0x182>
 8004b1c:	ab03      	add	r3, sp, #12
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4622      	mov	r2, r4
 8004b22:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <_svfiprintf_r+0x1ec>)
 8004b24:	a904      	add	r1, sp, #16
 8004b26:	4640      	mov	r0, r8
 8004b28:	f3af 8000 	nop.w
 8004b2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b30:	4681      	mov	r9, r0
 8004b32:	d1d6      	bne.n	8004ae2 <_svfiprintf_r+0x166>
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	065b      	lsls	r3, r3, #25
 8004b38:	f53f af35 	bmi.w	80049a6 <_svfiprintf_r+0x2a>
 8004b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b3e:	b01d      	add	sp, #116	; 0x74
 8004b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b44:	ab03      	add	r3, sp, #12
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	4622      	mov	r2, r4
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <_svfiprintf_r+0x1ec>)
 8004b4c:	a904      	add	r1, sp, #16
 8004b4e:	4640      	mov	r0, r8
 8004b50:	f000 f882 	bl	8004c58 <_printf_i>
 8004b54:	e7ea      	b.n	8004b2c <_svfiprintf_r+0x1b0>
 8004b56:	bf00      	nop
 8004b58:	08005138 	.word	0x08005138
 8004b5c:	0800513e 	.word	0x0800513e
 8004b60:	08005142 	.word	0x08005142
 8004b64:	00000000 	.word	0x00000000
 8004b68:	080048c9 	.word	0x080048c9

08004b6c <_printf_common>:
 8004b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	4691      	mov	r9, r2
 8004b72:	461f      	mov	r7, r3
 8004b74:	688a      	ldr	r2, [r1, #8]
 8004b76:	690b      	ldr	r3, [r1, #16]
 8004b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	bfb8      	it	lt
 8004b80:	4613      	movlt	r3, r2
 8004b82:	f8c9 3000 	str.w	r3, [r9]
 8004b86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b8a:	4606      	mov	r6, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	b112      	cbz	r2, 8004b96 <_printf_common+0x2a>
 8004b90:	3301      	adds	r3, #1
 8004b92:	f8c9 3000 	str.w	r3, [r9]
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	0699      	lsls	r1, r3, #26
 8004b9a:	bf42      	ittt	mi
 8004b9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ba0:	3302      	addmi	r3, #2
 8004ba2:	f8c9 3000 	strmi.w	r3, [r9]
 8004ba6:	6825      	ldr	r5, [r4, #0]
 8004ba8:	f015 0506 	ands.w	r5, r5, #6
 8004bac:	d107      	bne.n	8004bbe <_printf_common+0x52>
 8004bae:	f104 0a19 	add.w	sl, r4, #25
 8004bb2:	68e3      	ldr	r3, [r4, #12]
 8004bb4:	f8d9 2000 	ldr.w	r2, [r9]
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	42ab      	cmp	r3, r5
 8004bbc:	dc28      	bgt.n	8004c10 <_printf_common+0xa4>
 8004bbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004bc2:	6822      	ldr	r2, [r4, #0]
 8004bc4:	3300      	adds	r3, #0
 8004bc6:	bf18      	it	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	0692      	lsls	r2, r2, #26
 8004bcc:	d42d      	bmi.n	8004c2a <_printf_common+0xbe>
 8004bce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd2:	4639      	mov	r1, r7
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	47c0      	blx	r8
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d020      	beq.n	8004c1e <_printf_common+0xb2>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	68e5      	ldr	r5, [r4, #12]
 8004be0:	f8d9 2000 	ldr.w	r2, [r9]
 8004be4:	f003 0306 	and.w	r3, r3, #6
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	bf08      	it	eq
 8004bec:	1aad      	subeq	r5, r5, r2
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	6922      	ldr	r2, [r4, #16]
 8004bf2:	bf0c      	ite	eq
 8004bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf8:	2500      	movne	r5, #0
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bfc4      	itt	gt
 8004bfe:	1a9b      	subgt	r3, r3, r2
 8004c00:	18ed      	addgt	r5, r5, r3
 8004c02:	f04f 0900 	mov.w	r9, #0
 8004c06:	341a      	adds	r4, #26
 8004c08:	454d      	cmp	r5, r9
 8004c0a:	d11a      	bne.n	8004c42 <_printf_common+0xd6>
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e008      	b.n	8004c22 <_printf_common+0xb6>
 8004c10:	2301      	movs	r3, #1
 8004c12:	4652      	mov	r2, sl
 8004c14:	4639      	mov	r1, r7
 8004c16:	4630      	mov	r0, r6
 8004c18:	47c0      	blx	r8
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d103      	bne.n	8004c26 <_printf_common+0xba>
 8004c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c26:	3501      	adds	r5, #1
 8004c28:	e7c3      	b.n	8004bb2 <_printf_common+0x46>
 8004c2a:	18e1      	adds	r1, r4, r3
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	2030      	movs	r0, #48	; 0x30
 8004c30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c34:	4422      	add	r2, r4
 8004c36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c3e:	3302      	adds	r3, #2
 8004c40:	e7c5      	b.n	8004bce <_printf_common+0x62>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4622      	mov	r2, r4
 8004c46:	4639      	mov	r1, r7
 8004c48:	4630      	mov	r0, r6
 8004c4a:	47c0      	blx	r8
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d0e6      	beq.n	8004c1e <_printf_common+0xb2>
 8004c50:	f109 0901 	add.w	r9, r9, #1
 8004c54:	e7d8      	b.n	8004c08 <_printf_common+0x9c>
	...

08004c58 <_printf_i>:
 8004c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c60:	460c      	mov	r4, r1
 8004c62:	7e09      	ldrb	r1, [r1, #24]
 8004c64:	b085      	sub	sp, #20
 8004c66:	296e      	cmp	r1, #110	; 0x6e
 8004c68:	4617      	mov	r7, r2
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	4698      	mov	r8, r3
 8004c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c70:	f000 80b3 	beq.w	8004dda <_printf_i+0x182>
 8004c74:	d822      	bhi.n	8004cbc <_printf_i+0x64>
 8004c76:	2963      	cmp	r1, #99	; 0x63
 8004c78:	d036      	beq.n	8004ce8 <_printf_i+0x90>
 8004c7a:	d80a      	bhi.n	8004c92 <_printf_i+0x3a>
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	f000 80b9 	beq.w	8004df4 <_printf_i+0x19c>
 8004c82:	2958      	cmp	r1, #88	; 0x58
 8004c84:	f000 8083 	beq.w	8004d8e <_printf_i+0x136>
 8004c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c90:	e032      	b.n	8004cf8 <_printf_i+0xa0>
 8004c92:	2964      	cmp	r1, #100	; 0x64
 8004c94:	d001      	beq.n	8004c9a <_printf_i+0x42>
 8004c96:	2969      	cmp	r1, #105	; 0x69
 8004c98:	d1f6      	bne.n	8004c88 <_printf_i+0x30>
 8004c9a:	6820      	ldr	r0, [r4, #0]
 8004c9c:	6813      	ldr	r3, [r2, #0]
 8004c9e:	0605      	lsls	r5, r0, #24
 8004ca0:	f103 0104 	add.w	r1, r3, #4
 8004ca4:	d52a      	bpl.n	8004cfc <_printf_i+0xa4>
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6011      	str	r1, [r2, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da03      	bge.n	8004cb6 <_printf_i+0x5e>
 8004cae:	222d      	movs	r2, #45	; 0x2d
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004cb6:	486f      	ldr	r0, [pc, #444]	; (8004e74 <_printf_i+0x21c>)
 8004cb8:	220a      	movs	r2, #10
 8004cba:	e039      	b.n	8004d30 <_printf_i+0xd8>
 8004cbc:	2973      	cmp	r1, #115	; 0x73
 8004cbe:	f000 809d 	beq.w	8004dfc <_printf_i+0x1a4>
 8004cc2:	d808      	bhi.n	8004cd6 <_printf_i+0x7e>
 8004cc4:	296f      	cmp	r1, #111	; 0x6f
 8004cc6:	d020      	beq.n	8004d0a <_printf_i+0xb2>
 8004cc8:	2970      	cmp	r1, #112	; 0x70
 8004cca:	d1dd      	bne.n	8004c88 <_printf_i+0x30>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	f043 0320 	orr.w	r3, r3, #32
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	e003      	b.n	8004cde <_printf_i+0x86>
 8004cd6:	2975      	cmp	r1, #117	; 0x75
 8004cd8:	d017      	beq.n	8004d0a <_printf_i+0xb2>
 8004cda:	2978      	cmp	r1, #120	; 0x78
 8004cdc:	d1d4      	bne.n	8004c88 <_printf_i+0x30>
 8004cde:	2378      	movs	r3, #120	; 0x78
 8004ce0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ce4:	4864      	ldr	r0, [pc, #400]	; (8004e78 <_printf_i+0x220>)
 8004ce6:	e055      	b.n	8004d94 <_printf_i+0x13c>
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	1d19      	adds	r1, r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6011      	str	r1, [r2, #0]
 8004cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e08c      	b.n	8004e16 <_printf_i+0x1be>
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6011      	str	r1, [r2, #0]
 8004d00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d04:	bf18      	it	ne
 8004d06:	b21b      	sxthne	r3, r3
 8004d08:	e7cf      	b.n	8004caa <_printf_i+0x52>
 8004d0a:	6813      	ldr	r3, [r2, #0]
 8004d0c:	6825      	ldr	r5, [r4, #0]
 8004d0e:	1d18      	adds	r0, r3, #4
 8004d10:	6010      	str	r0, [r2, #0]
 8004d12:	0628      	lsls	r0, r5, #24
 8004d14:	d501      	bpl.n	8004d1a <_printf_i+0xc2>
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	e002      	b.n	8004d20 <_printf_i+0xc8>
 8004d1a:	0668      	lsls	r0, r5, #25
 8004d1c:	d5fb      	bpl.n	8004d16 <_printf_i+0xbe>
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	4854      	ldr	r0, [pc, #336]	; (8004e74 <_printf_i+0x21c>)
 8004d22:	296f      	cmp	r1, #111	; 0x6f
 8004d24:	bf14      	ite	ne
 8004d26:	220a      	movne	r2, #10
 8004d28:	2208      	moveq	r2, #8
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d30:	6865      	ldr	r5, [r4, #4]
 8004d32:	60a5      	str	r5, [r4, #8]
 8004d34:	2d00      	cmp	r5, #0
 8004d36:	f2c0 8095 	blt.w	8004e64 <_printf_i+0x20c>
 8004d3a:	6821      	ldr	r1, [r4, #0]
 8004d3c:	f021 0104 	bic.w	r1, r1, #4
 8004d40:	6021      	str	r1, [r4, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d13d      	bne.n	8004dc2 <_printf_i+0x16a>
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	f040 808e 	bne.w	8004e68 <_printf_i+0x210>
 8004d4c:	4665      	mov	r5, ip
 8004d4e:	2a08      	cmp	r2, #8
 8004d50:	d10b      	bne.n	8004d6a <_printf_i+0x112>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	07db      	lsls	r3, r3, #31
 8004d56:	d508      	bpl.n	8004d6a <_printf_i+0x112>
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	6862      	ldr	r2, [r4, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	bfde      	ittt	le
 8004d60:	2330      	movle	r3, #48	; 0x30
 8004d62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d6a:	ebac 0305 	sub.w	r3, ip, r5
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	f8cd 8000 	str.w	r8, [sp]
 8004d74:	463b      	mov	r3, r7
 8004d76:	aa03      	add	r2, sp, #12
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7ff fef6 	bl	8004b6c <_printf_common>
 8004d80:	3001      	adds	r0, #1
 8004d82:	d14d      	bne.n	8004e20 <_printf_i+0x1c8>
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	b005      	add	sp, #20
 8004d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d8e:	4839      	ldr	r0, [pc, #228]	; (8004e74 <_printf_i+0x21c>)
 8004d90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	6821      	ldr	r1, [r4, #0]
 8004d98:	1d1d      	adds	r5, r3, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6015      	str	r5, [r2, #0]
 8004d9e:	060a      	lsls	r2, r1, #24
 8004da0:	d50b      	bpl.n	8004dba <_printf_i+0x162>
 8004da2:	07ca      	lsls	r2, r1, #31
 8004da4:	bf44      	itt	mi
 8004da6:	f041 0120 	orrmi.w	r1, r1, #32
 8004daa:	6021      	strmi	r1, [r4, #0]
 8004dac:	b91b      	cbnz	r3, 8004db6 <_printf_i+0x15e>
 8004dae:	6822      	ldr	r2, [r4, #0]
 8004db0:	f022 0220 	bic.w	r2, r2, #32
 8004db4:	6022      	str	r2, [r4, #0]
 8004db6:	2210      	movs	r2, #16
 8004db8:	e7b7      	b.n	8004d2a <_printf_i+0xd2>
 8004dba:	064d      	lsls	r5, r1, #25
 8004dbc:	bf48      	it	mi
 8004dbe:	b29b      	uxthmi	r3, r3
 8004dc0:	e7ef      	b.n	8004da2 <_printf_i+0x14a>
 8004dc2:	4665      	mov	r5, ip
 8004dc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dc8:	fb02 3311 	mls	r3, r2, r1, r3
 8004dcc:	5cc3      	ldrb	r3, [r0, r3]
 8004dce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	d1f5      	bne.n	8004dc4 <_printf_i+0x16c>
 8004dd8:	e7b9      	b.n	8004d4e <_printf_i+0xf6>
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	6825      	ldr	r5, [r4, #0]
 8004dde:	6961      	ldr	r1, [r4, #20]
 8004de0:	1d18      	adds	r0, r3, #4
 8004de2:	6010      	str	r0, [r2, #0]
 8004de4:	0628      	lsls	r0, r5, #24
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	d501      	bpl.n	8004dee <_printf_i+0x196>
 8004dea:	6019      	str	r1, [r3, #0]
 8004dec:	e002      	b.n	8004df4 <_printf_i+0x19c>
 8004dee:	066a      	lsls	r2, r5, #25
 8004df0:	d5fb      	bpl.n	8004dea <_printf_i+0x192>
 8004df2:	8019      	strh	r1, [r3, #0]
 8004df4:	2300      	movs	r3, #0
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	4665      	mov	r5, ip
 8004dfa:	e7b9      	b.n	8004d70 <_printf_i+0x118>
 8004dfc:	6813      	ldr	r3, [r2, #0]
 8004dfe:	1d19      	adds	r1, r3, #4
 8004e00:	6011      	str	r1, [r2, #0]
 8004e02:	681d      	ldr	r5, [r3, #0]
 8004e04:	6862      	ldr	r2, [r4, #4]
 8004e06:	2100      	movs	r1, #0
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f7fb f9e9 	bl	80001e0 <memchr>
 8004e0e:	b108      	cbz	r0, 8004e14 <_printf_i+0x1bc>
 8004e10:	1b40      	subs	r0, r0, r5
 8004e12:	6060      	str	r0, [r4, #4]
 8004e14:	6863      	ldr	r3, [r4, #4]
 8004e16:	6123      	str	r3, [r4, #16]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e1e:	e7a7      	b.n	8004d70 <_printf_i+0x118>
 8004e20:	6923      	ldr	r3, [r4, #16]
 8004e22:	462a      	mov	r2, r5
 8004e24:	4639      	mov	r1, r7
 8004e26:	4630      	mov	r0, r6
 8004e28:	47c0      	blx	r8
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d0aa      	beq.n	8004d84 <_printf_i+0x12c>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	079b      	lsls	r3, r3, #30
 8004e32:	d413      	bmi.n	8004e5c <_printf_i+0x204>
 8004e34:	68e0      	ldr	r0, [r4, #12]
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	4298      	cmp	r0, r3
 8004e3a:	bfb8      	it	lt
 8004e3c:	4618      	movlt	r0, r3
 8004e3e:	e7a3      	b.n	8004d88 <_printf_i+0x130>
 8004e40:	2301      	movs	r3, #1
 8004e42:	464a      	mov	r2, r9
 8004e44:	4639      	mov	r1, r7
 8004e46:	4630      	mov	r0, r6
 8004e48:	47c0      	blx	r8
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d09a      	beq.n	8004d84 <_printf_i+0x12c>
 8004e4e:	3501      	adds	r5, #1
 8004e50:	68e3      	ldr	r3, [r4, #12]
 8004e52:	9a03      	ldr	r2, [sp, #12]
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	42ab      	cmp	r3, r5
 8004e58:	dcf2      	bgt.n	8004e40 <_printf_i+0x1e8>
 8004e5a:	e7eb      	b.n	8004e34 <_printf_i+0x1dc>
 8004e5c:	2500      	movs	r5, #0
 8004e5e:	f104 0919 	add.w	r9, r4, #25
 8004e62:	e7f5      	b.n	8004e50 <_printf_i+0x1f8>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ac      	bne.n	8004dc2 <_printf_i+0x16a>
 8004e68:	7803      	ldrb	r3, [r0, #0]
 8004e6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e72:	e76c      	b.n	8004d4e <_printf_i+0xf6>
 8004e74:	08005149 	.word	0x08005149
 8004e78:	0800515a 	.word	0x0800515a

08004e7c <memcpy>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	1e43      	subs	r3, r0, #1
 8004e80:	440a      	add	r2, r1
 8004e82:	4291      	cmp	r1, r2
 8004e84:	d100      	bne.n	8004e88 <memcpy+0xc>
 8004e86:	bd10      	pop	{r4, pc}
 8004e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e90:	e7f7      	b.n	8004e82 <memcpy+0x6>

08004e92 <memmove>:
 8004e92:	4288      	cmp	r0, r1
 8004e94:	b510      	push	{r4, lr}
 8004e96:	eb01 0302 	add.w	r3, r1, r2
 8004e9a:	d807      	bhi.n	8004eac <memmove+0x1a>
 8004e9c:	1e42      	subs	r2, r0, #1
 8004e9e:	4299      	cmp	r1, r3
 8004ea0:	d00a      	beq.n	8004eb8 <memmove+0x26>
 8004ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ea6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004eaa:	e7f8      	b.n	8004e9e <memmove+0xc>
 8004eac:	4283      	cmp	r3, r0
 8004eae:	d9f5      	bls.n	8004e9c <memmove+0xa>
 8004eb0:	1881      	adds	r1, r0, r2
 8004eb2:	1ad2      	subs	r2, r2, r3
 8004eb4:	42d3      	cmn	r3, r2
 8004eb6:	d100      	bne.n	8004eba <memmove+0x28>
 8004eb8:	bd10      	pop	{r4, pc}
 8004eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ebe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004ec2:	e7f7      	b.n	8004eb4 <memmove+0x22>

08004ec4 <_free_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	d045      	beq.n	8004f58 <_free_r+0x94>
 8004ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ed0:	1f0c      	subs	r4, r1, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bfb8      	it	lt
 8004ed6:	18e4      	addlt	r4, r4, r3
 8004ed8:	f000 f8d2 	bl	8005080 <__malloc_lock>
 8004edc:	4a1f      	ldr	r2, [pc, #124]	; (8004f5c <_free_r+0x98>)
 8004ede:	6813      	ldr	r3, [r2, #0]
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	b933      	cbnz	r3, 8004ef2 <_free_r+0x2e>
 8004ee4:	6063      	str	r3, [r4, #4]
 8004ee6:	6014      	str	r4, [r2, #0]
 8004ee8:	4628      	mov	r0, r5
 8004eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eee:	f000 b8c8 	b.w	8005082 <__malloc_unlock>
 8004ef2:	42a3      	cmp	r3, r4
 8004ef4:	d90c      	bls.n	8004f10 <_free_r+0x4c>
 8004ef6:	6821      	ldr	r1, [r4, #0]
 8004ef8:	1862      	adds	r2, r4, r1
 8004efa:	4293      	cmp	r3, r2
 8004efc:	bf04      	itt	eq
 8004efe:	681a      	ldreq	r2, [r3, #0]
 8004f00:	685b      	ldreq	r3, [r3, #4]
 8004f02:	6063      	str	r3, [r4, #4]
 8004f04:	bf04      	itt	eq
 8004f06:	1852      	addeq	r2, r2, r1
 8004f08:	6022      	streq	r2, [r4, #0]
 8004f0a:	6004      	str	r4, [r0, #0]
 8004f0c:	e7ec      	b.n	8004ee8 <_free_r+0x24>
 8004f0e:	4613      	mov	r3, r2
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	b10a      	cbz	r2, 8004f18 <_free_r+0x54>
 8004f14:	42a2      	cmp	r2, r4
 8004f16:	d9fa      	bls.n	8004f0e <_free_r+0x4a>
 8004f18:	6819      	ldr	r1, [r3, #0]
 8004f1a:	1858      	adds	r0, r3, r1
 8004f1c:	42a0      	cmp	r0, r4
 8004f1e:	d10b      	bne.n	8004f38 <_free_r+0x74>
 8004f20:	6820      	ldr	r0, [r4, #0]
 8004f22:	4401      	add	r1, r0
 8004f24:	1858      	adds	r0, r3, r1
 8004f26:	4282      	cmp	r2, r0
 8004f28:	6019      	str	r1, [r3, #0]
 8004f2a:	d1dd      	bne.n	8004ee8 <_free_r+0x24>
 8004f2c:	6810      	ldr	r0, [r2, #0]
 8004f2e:	6852      	ldr	r2, [r2, #4]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	4401      	add	r1, r0
 8004f34:	6019      	str	r1, [r3, #0]
 8004f36:	e7d7      	b.n	8004ee8 <_free_r+0x24>
 8004f38:	d902      	bls.n	8004f40 <_free_r+0x7c>
 8004f3a:	230c      	movs	r3, #12
 8004f3c:	602b      	str	r3, [r5, #0]
 8004f3e:	e7d3      	b.n	8004ee8 <_free_r+0x24>
 8004f40:	6820      	ldr	r0, [r4, #0]
 8004f42:	1821      	adds	r1, r4, r0
 8004f44:	428a      	cmp	r2, r1
 8004f46:	bf04      	itt	eq
 8004f48:	6811      	ldreq	r1, [r2, #0]
 8004f4a:	6852      	ldreq	r2, [r2, #4]
 8004f4c:	6062      	str	r2, [r4, #4]
 8004f4e:	bf04      	itt	eq
 8004f50:	1809      	addeq	r1, r1, r0
 8004f52:	6021      	streq	r1, [r4, #0]
 8004f54:	605c      	str	r4, [r3, #4]
 8004f56:	e7c7      	b.n	8004ee8 <_free_r+0x24>
 8004f58:	bd38      	pop	{r3, r4, r5, pc}
 8004f5a:	bf00      	nop
 8004f5c:	200000a8 	.word	0x200000a8

08004f60 <_malloc_r>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	1ccd      	adds	r5, r1, #3
 8004f64:	f025 0503 	bic.w	r5, r5, #3
 8004f68:	3508      	adds	r5, #8
 8004f6a:	2d0c      	cmp	r5, #12
 8004f6c:	bf38      	it	cc
 8004f6e:	250c      	movcc	r5, #12
 8004f70:	2d00      	cmp	r5, #0
 8004f72:	4606      	mov	r6, r0
 8004f74:	db01      	blt.n	8004f7a <_malloc_r+0x1a>
 8004f76:	42a9      	cmp	r1, r5
 8004f78:	d903      	bls.n	8004f82 <_malloc_r+0x22>
 8004f7a:	230c      	movs	r3, #12
 8004f7c:	6033      	str	r3, [r6, #0]
 8004f7e:	2000      	movs	r0, #0
 8004f80:	bd70      	pop	{r4, r5, r6, pc}
 8004f82:	f000 f87d 	bl	8005080 <__malloc_lock>
 8004f86:	4a21      	ldr	r2, [pc, #132]	; (800500c <_malloc_r+0xac>)
 8004f88:	6814      	ldr	r4, [r2, #0]
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	b991      	cbnz	r1, 8004fb4 <_malloc_r+0x54>
 8004f8e:	4c20      	ldr	r4, [pc, #128]	; (8005010 <_malloc_r+0xb0>)
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	b91b      	cbnz	r3, 8004f9c <_malloc_r+0x3c>
 8004f94:	4630      	mov	r0, r6
 8004f96:	f000 f863 	bl	8005060 <_sbrk_r>
 8004f9a:	6020      	str	r0, [r4, #0]
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f000 f85e 	bl	8005060 <_sbrk_r>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d124      	bne.n	8004ff2 <_malloc_r+0x92>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	6033      	str	r3, [r6, #0]
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 f868 	bl	8005082 <__malloc_unlock>
 8004fb2:	e7e4      	b.n	8004f7e <_malloc_r+0x1e>
 8004fb4:	680b      	ldr	r3, [r1, #0]
 8004fb6:	1b5b      	subs	r3, r3, r5
 8004fb8:	d418      	bmi.n	8004fec <_malloc_r+0x8c>
 8004fba:	2b0b      	cmp	r3, #11
 8004fbc:	d90f      	bls.n	8004fde <_malloc_r+0x7e>
 8004fbe:	600b      	str	r3, [r1, #0]
 8004fc0:	50cd      	str	r5, [r1, r3]
 8004fc2:	18cc      	adds	r4, r1, r3
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	f000 f85c 	bl	8005082 <__malloc_unlock>
 8004fca:	f104 000b 	add.w	r0, r4, #11
 8004fce:	1d23      	adds	r3, r4, #4
 8004fd0:	f020 0007 	bic.w	r0, r0, #7
 8004fd4:	1ac3      	subs	r3, r0, r3
 8004fd6:	d0d3      	beq.n	8004f80 <_malloc_r+0x20>
 8004fd8:	425a      	negs	r2, r3
 8004fda:	50e2      	str	r2, [r4, r3]
 8004fdc:	e7d0      	b.n	8004f80 <_malloc_r+0x20>
 8004fde:	428c      	cmp	r4, r1
 8004fe0:	684b      	ldr	r3, [r1, #4]
 8004fe2:	bf16      	itet	ne
 8004fe4:	6063      	strne	r3, [r4, #4]
 8004fe6:	6013      	streq	r3, [r2, #0]
 8004fe8:	460c      	movne	r4, r1
 8004fea:	e7eb      	b.n	8004fc4 <_malloc_r+0x64>
 8004fec:	460c      	mov	r4, r1
 8004fee:	6849      	ldr	r1, [r1, #4]
 8004ff0:	e7cc      	b.n	8004f8c <_malloc_r+0x2c>
 8004ff2:	1cc4      	adds	r4, r0, #3
 8004ff4:	f024 0403 	bic.w	r4, r4, #3
 8004ff8:	42a0      	cmp	r0, r4
 8004ffa:	d005      	beq.n	8005008 <_malloc_r+0xa8>
 8004ffc:	1a21      	subs	r1, r4, r0
 8004ffe:	4630      	mov	r0, r6
 8005000:	f000 f82e 	bl	8005060 <_sbrk_r>
 8005004:	3001      	adds	r0, #1
 8005006:	d0cf      	beq.n	8004fa8 <_malloc_r+0x48>
 8005008:	6025      	str	r5, [r4, #0]
 800500a:	e7db      	b.n	8004fc4 <_malloc_r+0x64>
 800500c:	200000a8 	.word	0x200000a8
 8005010:	200000ac 	.word	0x200000ac

08005014 <_realloc_r>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	4607      	mov	r7, r0
 8005018:	4614      	mov	r4, r2
 800501a:	460e      	mov	r6, r1
 800501c:	b921      	cbnz	r1, 8005028 <_realloc_r+0x14>
 800501e:	4611      	mov	r1, r2
 8005020:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005024:	f7ff bf9c 	b.w	8004f60 <_malloc_r>
 8005028:	b922      	cbnz	r2, 8005034 <_realloc_r+0x20>
 800502a:	f7ff ff4b 	bl	8004ec4 <_free_r>
 800502e:	4625      	mov	r5, r4
 8005030:	4628      	mov	r0, r5
 8005032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005034:	f000 f826 	bl	8005084 <_malloc_usable_size_r>
 8005038:	42a0      	cmp	r0, r4
 800503a:	d20f      	bcs.n	800505c <_realloc_r+0x48>
 800503c:	4621      	mov	r1, r4
 800503e:	4638      	mov	r0, r7
 8005040:	f7ff ff8e 	bl	8004f60 <_malloc_r>
 8005044:	4605      	mov	r5, r0
 8005046:	2800      	cmp	r0, #0
 8005048:	d0f2      	beq.n	8005030 <_realloc_r+0x1c>
 800504a:	4631      	mov	r1, r6
 800504c:	4622      	mov	r2, r4
 800504e:	f7ff ff15 	bl	8004e7c <memcpy>
 8005052:	4631      	mov	r1, r6
 8005054:	4638      	mov	r0, r7
 8005056:	f7ff ff35 	bl	8004ec4 <_free_r>
 800505a:	e7e9      	b.n	8005030 <_realloc_r+0x1c>
 800505c:	4635      	mov	r5, r6
 800505e:	e7e7      	b.n	8005030 <_realloc_r+0x1c>

08005060 <_sbrk_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4c06      	ldr	r4, [pc, #24]	; (800507c <_sbrk_r+0x1c>)
 8005064:	2300      	movs	r3, #0
 8005066:	4605      	mov	r5, r0
 8005068:	4608      	mov	r0, r1
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	f7fc f9e2 	bl	8001434 <_sbrk>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_sbrk_r+0x1a>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	b103      	cbz	r3, 800507a <_sbrk_r+0x1a>
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	200002ec 	.word	0x200002ec

08005080 <__malloc_lock>:
 8005080:	4770      	bx	lr

08005082 <__malloc_unlock>:
 8005082:	4770      	bx	lr

08005084 <_malloc_usable_size_r>:
 8005084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005088:	1f18      	subs	r0, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfbc      	itt	lt
 800508e:	580b      	ldrlt	r3, [r1, r0]
 8005090:	18c0      	addlt	r0, r0, r3
 8005092:	4770      	bx	lr

08005094 <_init>:
 8005094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005096:	bf00      	nop
 8005098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509a:	bc08      	pop	{r3}
 800509c:	469e      	mov	lr, r3
 800509e:	4770      	bx	lr

080050a0 <_fini>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	bf00      	nop
 80050a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a6:	bc08      	pop	{r3}
 80050a8:	469e      	mov	lr, r3
 80050aa:	4770      	bx	lr
