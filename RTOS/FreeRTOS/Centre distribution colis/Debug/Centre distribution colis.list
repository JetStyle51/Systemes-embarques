
Centre distribution colis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d6c  08006d6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d74  08006d74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d74  08006d74  00016d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a34  20000074  08006df0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004aa8  08006df0  00024aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bc9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d6f  00000000  00000000  00037c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b8  00000000  00000000  0003a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  0003bc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003ad1  00000000  00000000  0003ce08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e745  00000000  00000000  000408d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096672  00000000  00000000  0004f01e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5690  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005168  00000000  00000000  000e570c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006870 	.word	0x08006870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006870 	.word	0x08006870

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fd26 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f87a 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f90e 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f8e2 	bl	8000768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a4:	f002 fb44 	bl	8002c30 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex */
  MutexHandle = osMutexNew(&Mutex_attributes);
 80005a8:	4827      	ldr	r0, [pc, #156]	; (8000648 <main+0xb8>)
 80005aa:	f002 fc7f 	bl	8002eac <osMutexNew>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <main+0xbc>)
 80005b2:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  Semaphore = xSemaphoreCreateMutex();
 80005b4:	2001      	movs	r0, #1
 80005b6:	f002 ffd8 	bl	800356a <xQueueCreateMutex>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <main+0xc0>)
 80005be:	601a      	str	r2, [r3, #0]

  SemaphoreLectureRapide = xSemaphoreCreateMutex();
 80005c0:	2001      	movs	r0, #1
 80005c2:	f002 ffd2 	bl	800356a <xQueueCreateMutex>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <main+0xc4>)
 80005ca:	601a      	str	r2, [r3, #0]

  SemaphoreReLecture = xSemaphoreCreateMutex();
 80005cc:	2001      	movs	r0, #1
 80005ce:	f002 ffcc 	bl	800356a <xQueueCreateMutex>
 80005d2:	4602      	mov	r2, r0
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <main+0xc8>)
 80005d6:	601a      	str	r2, [r3, #0]

  SemaphoreInternational = xSemaphoreCreateMutex();
 80005d8:	2001      	movs	r0, #1
 80005da:	f002 ffc6 	bl	800356a <xQueueCreateMutex>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <main+0xcc>)
 80005e2:	601a      	str	r2, [r3, #0]

  SemaphoreNational = xSemaphoreCreateMutex();
 80005e4:	2001      	movs	r0, #1
 80005e6:	f002 ffc0 	bl	800356a <xQueueCreateMutex>
 80005ea:	4602      	mov	r2, r0
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <main+0xd0>)
 80005ee:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of File_tapis_arrivee */
  File_tapis_arriveeHandle = osMessageQueueNew (x, sizeof(unsigned int), &File_tapis_arrivee_attributes);
 80005f0:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <main+0xd4>)
 80005f2:	2104      	movs	r1, #4
 80005f4:	200a      	movs	r0, #10
 80005f6:	f002 fcf3 	bl	8002fe0 <osMessageQueueNew>
 80005fa:	4602      	mov	r2, r0
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <main+0xd8>)
 80005fe:	601a      	str	r2, [r3, #0]

  /* creation of File_tapis_relecture */
  File_tapis_relectureHandle = osMessageQueueNew (y, sizeof(unsigned int), &File_tapis_relecture_attributes);
 8000600:	4a1a      	ldr	r2, [pc, #104]	; (800066c <main+0xdc>)
 8000602:	2104      	movs	r1, #4
 8000604:	200a      	movs	r0, #10
 8000606:	f002 fceb 	bl	8002fe0 <osMessageQueueNew>
 800060a:	4602      	mov	r2, r0
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <main+0xe0>)
 800060e:	601a      	str	r2, [r3, #0]

  /* creation of File_depart_national */
  File_depart_nationalHandle = osMessageQueueNew (z, sizeof(unsigned int), &File_depart_national_attributes);
 8000610:	4a18      	ldr	r2, [pc, #96]	; (8000674 <main+0xe4>)
 8000612:	2104      	movs	r1, #4
 8000614:	200a      	movs	r0, #10
 8000616:	f002 fce3 	bl	8002fe0 <osMessageQueueNew>
 800061a:	4602      	mov	r2, r0
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <main+0xe8>)
 800061e:	601a      	str	r2, [r3, #0]

  /* creation of File_depart_international */
  File_depart_internationalHandle = osMessageQueueNew (z, sizeof(unsigned int), &File_depart_international_attributes);
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <main+0xec>)
 8000622:	2104      	movs	r1, #4
 8000624:	200a      	movs	r0, #10
 8000626:	f002 fcdb 	bl	8002fe0 <osMessageQueueNew>
 800062a:	4602      	mov	r2, r0
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <main+0xf0>)
 800062e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_Tache_arri */
  Task_Tache_arriHandle = osThreadNew(Tache_arrivee, NULL, &Task_Tache_arri_attributes);
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <main+0xf4>)
 8000632:	2100      	movs	r1, #0
 8000634:	4814      	ldr	r0, [pc, #80]	; (8000688 <main+0xf8>)
 8000636:	f002 fb65 	bl	8002d04 <osThreadNew>
 800063a:	4602      	mov	r2, r0
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <main+0xfc>)
 800063e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000640:	f002 fb2a 	bl	8002c98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0xb4>
 8000646:	bf00      	nop
 8000648:	08006d10 	.word	0x08006d10
 800064c:	200049b0 	.word	0x200049b0
 8000650:	200049c4 	.word	0x200049c4
 8000654:	200049cc 	.word	0x200049cc
 8000658:	200049b4 	.word	0x200049b4
 800065c:	200049ac 	.word	0x200049ac
 8000660:	200049a8 	.word	0x200049a8
 8000664:	08006cb0 	.word	0x08006cb0
 8000668:	200049c8 	.word	0x200049c8
 800066c:	08006cc8 	.word	0x08006cc8
 8000670:	200049b8 	.word	0x200049b8
 8000674:	08006ce0 	.word	0x08006ce0
 8000678:	20004a14 	.word	0x20004a14
 800067c:	08006cf8 	.word	0x08006cf8
 8000680:	200049a4 	.word	0x200049a4
 8000684:	08006bfc 	.word	0x08006bfc
 8000688:	080008ed 	.word	0x080008ed
 800068c:	20004a1c 	.word	0x20004a1c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fce1 	bl	8006066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a28      	ldr	r2, [pc, #160]	; (8000760 <SystemClock_Config+0xd0>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd4>)
 80006de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000704:	2310      	movs	r3, #16
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000708:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070e:	2304      	movs	r3, #4
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000712:	2307      	movs	r3, #7
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f000 ff22 	bl	8001564 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000726:	f000 faf4 	bl	8000d12 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f97c 	bl	8001a44 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000752:	f000 fade 	bl	8000d12 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f001 fd92 	bl	80022c8 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 fab2 	bl	8000d12 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200049d0 	.word	0x200049d0
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a2c      	ldr	r2, [pc, #176]	; (800088c <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a25      	ldr	r2, [pc, #148]	; (800088c <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a1e      	ldr	r2, [pc, #120]	; (800088c <MX_GPIO_Init+0xd0>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <MX_GPIO_Init+0xd0>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_GPIO_Init+0xd4>)
 8000848:	f000 fe72 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_GPIO_Init+0xd8>)
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_GPIO_Init+0xdc>)
 8000862:	f000 fce3 	bl	800122c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000866:	2320      	movs	r3, #32
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0xd4>)
 800087e:	f000 fcd5 	bl	800122c <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	10210000 	.word	0x10210000
 8000898:	40020800 	.word	0x40020800

0800089c <affiche_message>:

/* USER CODE BEGIN 4 */
void affiche_message(char *txt){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	//semaphore take
	if (xSemaphoreTake(Semaphore,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <affiche_message+0x48>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 f8f9 	bl	8003aa4 <xQueueSemaphoreTake>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00a      	beq.n	80008ce <affiche_message+0x32>
	{
		HAL_UART_Transmit(&huart2, txt, strlen(txt), HAL_MAX_DELAY);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff fc91 	bl	80001e0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <affiche_message+0x4c>)
 80008ca:	f001 fd4a 	bl	8002362 <HAL_UART_Transmit>
	}
	xSemaphoreGive(Semaphore); //On rend le jeton
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <affiche_message+0x48>)
 80008d0:	6818      	ldr	r0, [r3, #0]
 80008d2:	2300      	movs	r3, #0
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	f002 fe7a 	bl	80035d0 <xQueueGenericSend>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200049c4 	.word	0x200049c4
 80008e8:	200049d0 	.word	0x200049d0

080008ec <Tache_arrivee>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_arrivee */
void Tache_arrivee(void *argument)
{
 80008ec:	b5b0      	push	{r4, r5, r7, lr}
 80008ee:	b0a4      	sub	sp, #144	; 0x90
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	unsigned int liste_colis[]={ 1,  3,  1,  2,  3,  0}; // Etat des bits B2, B1 et B0 -> 0 à 3 en décimal car B2=0
 80008f4:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <Tache_arrivee+0xf8>)
 80008f6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80008fa:	461d      	mov	r5, r3
 80008fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000900:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000904:	e884 0003 	stmia.w	r4, {r0, r1}
	unsigned int liste_delai[]={ 5,100,200, 300,40, 500}; // Temps d'attente en ms pour le colis suivant
 8000908:	4b37      	ldr	r3, [pc, #220]	; (80009e8 <Tache_arrivee+0xfc>)
 800090a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800090e:	461d      	mov	r5, r3
 8000910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000918:	e884 0003 	stmia.w	r4, {r0, r1}
	unsigned int num_colis = 0; // Initilisation du numéro de colis
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	unsigned int colis; // Colis (étiquette)
	char etiquette;
	char buff[] = "Le colis No 1 est depose sur le tapis roulant et il porte l'etiquette 5\r\n";
 8000922:	4a32      	ldr	r2, [pc, #200]	; (80009ec <Tache_arrivee+0x100>)
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4611      	mov	r1, r2
 800092a:	224a      	movs	r2, #74	; 0x4a
 800092c:	4618      	mov	r0, r3
 800092e:	f005 fb8f 	bl	8006050 <memcpy>
	/* creation of Task_Tache_lect */
	Task_Tache_lectHandle = osThreadNew(Tache_lecture_rapide, NULL, &Task_Tache_lect_attributes);
 8000932:	4a2f      	ldr	r2, [pc, #188]	; (80009f0 <Tache_arrivee+0x104>)
 8000934:	2100      	movs	r1, #0
 8000936:	482f      	ldr	r0, [pc, #188]	; (80009f4 <Tache_arrivee+0x108>)
 8000938:	f002 f9e4 	bl	8002d04 <osThreadNew>
 800093c:	4602      	mov	r2, r0
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <Tache_arrivee+0x10c>)
 8000940:	601a      	str	r2, [r3, #0]

	for(;;){
		etiquette = liste_colis[num_colis % (sizeof(liste_colis)/sizeof(unsigned int))];
 8000942:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <Tache_arrivee+0x110>)
 8000948:	fba3 2301 	umull	r2, r3, r3, r1
 800094c:	089a      	lsrs	r2, r3, #2
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	1aca      	subs	r2, r1, r3
 8000958:	0093      	lsls	r3, r2, #2
 800095a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800095e:	4413      	add	r3, r2
 8000960:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000964:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		colis = (num_colis<<3) + etiquette;
 8000968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800096c:	00da      	lsls	r2, r3, #3
 800096e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000972:	4413      	add	r3, r2
 8000974:	657b      	str	r3, [r7, #84]	; 0x54
		if(!xQueueSendToBack(File_tapis_arriveeHandle, &colis, TIMEOUT_FILE_TAPIS_ARRIVEE)) // Il faudra gérer le débordement et afficher un message d'erreur
 8000976:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <Tache_arrivee+0x114>)
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800097e:	2300      	movs	r3, #0
 8000980:	2264      	movs	r2, #100	; 0x64
 8000982:	f002 fe25 	bl	80035d0 <xQueueGenericSend>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d102      	bne.n	8000992 <Tache_arrivee+0xa6>
		{
			affiche_message("Debordement : Echec de l'envoi du colis\r\n");
 800098c:	481d      	ldr	r0, [pc, #116]	; (8000a04 <Tache_arrivee+0x118>)
 800098e:	f7ff ff85 	bl	800089c <affiche_message>
		}
		sprintf(buff,"Le colis No %d est depose sur le tapis roulant et il porte l'etiquette %d\r\n",num_colis, etiquette);	// Il faudra gérer l'affichage comme une ressource partagée
 8000992:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000996:	f107 0008 	add.w	r0, r7, #8
 800099a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800099e:	491a      	ldr	r1, [pc, #104]	; (8000a08 <Tache_arrivee+0x11c>)
 80009a0:	f005 fb6a 	bl	8006078 <siprintf>
		num_colis++;
 80009a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009a8:	3301      	adds	r3, #1
 80009aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		affiche_message(buff);
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff72 	bl	800089c <affiche_message>
		vTaskDelay(liste_delai[num_colis % (sizeof(liste_colis)/sizeof(unsigned int))]/portTICK_RATE_MS); // Attente entre deux colis en ms
 80009b8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <Tache_arrivee+0x110>)
 80009be:	fba3 2301 	umull	r2, r3, r3, r1
 80009c2:	089a      	lsrs	r2, r3, #2
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	1aca      	subs	r2, r1, r3
 80009ce:	0093      	lsls	r3, r2, #2
 80009d0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80009d4:	4413      	add	r3, r2
 80009d6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fd6a 	bl	80044b4 <vTaskDelay>
		etiquette = liste_colis[num_colis % (sizeof(liste_colis)/sizeof(unsigned int))];
 80009e0:	e7af      	b.n	8000942 <Tache_arrivee+0x56>
 80009e2:	bf00      	nop
 80009e4:	080069b8 	.word	0x080069b8
 80009e8:	080069d0 	.word	0x080069d0
 80009ec:	080069e8 	.word	0x080069e8
 80009f0:	08006c20 	.word	0x08006c20
 80009f4:	08000a0d 	.word	0x08000a0d
 80009f8:	20004a10 	.word	0x20004a10
 80009fc:	aaaaaaab 	.word	0xaaaaaaab
 8000a00:	200049c8 	.word	0x200049c8
 8000a04:	08006940 	.word	0x08006940
 8000a08:	0800696c 	.word	0x0800696c

08000a0c <Tache_lecture_rapide>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_lecture_rapide */
void Tache_lecture_rapide(void *argument)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b090      	sub	sp, #64	; 0x40
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tache_lecture_rapide */
  unsigned int colis; // buffer de la file
  char buff[50];
  /* Infinite loop */
  Task_Tache_inteHandle = osThreadNew(Tache_depart_international, NULL, &Task_Tache_inte_attributes);
 8000a14:	4a3e      	ldr	r2, [pc, #248]	; (8000b10 <Tache_lecture_rapide+0x104>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	483e      	ldr	r0, [pc, #248]	; (8000b14 <Tache_lecture_rapide+0x108>)
 8000a1a:	f002 f973 	bl	8002d04 <osThreadNew>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <Tache_lecture_rapide+0x10c>)
 8000a22:	601a      	str	r2, [r3, #0]
  Task_Tache_depaHandle = osThreadNew(Tache_depart_national, NULL, &Task_Tache_depa_attributes);
 8000a24:	4a3d      	ldr	r2, [pc, #244]	; (8000b1c <Tache_lecture_rapide+0x110>)
 8000a26:	2100      	movs	r1, #0
 8000a28:	483d      	ldr	r0, [pc, #244]	; (8000b20 <Tache_lecture_rapide+0x114>)
 8000a2a:	f002 f96b 	bl	8002d04 <osThreadNew>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <Tache_lecture_rapide+0x118>)
 8000a32:	601a      	str	r2, [r3, #0]
  Task_Tache_lectHandle = osThreadNew(Tache_relecture, NULL, &Task_Tache_rele_attributes);
 8000a34:	4a3c      	ldr	r2, [pc, #240]	; (8000b28 <Tache_lecture_rapide+0x11c>)
 8000a36:	2100      	movs	r1, #0
 8000a38:	483c      	ldr	r0, [pc, #240]	; (8000b2c <Tache_lecture_rapide+0x120>)
 8000a3a:	f002 f963 	bl	8002d04 <osThreadNew>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <Tache_lecture_rapide+0x124>)
 8000a42:	601a      	str	r2, [r3, #0]
  for(;;)
  {
	  if (xQueuePeek(File_tapis_arriveeHandle,&colis,TIMEOUT_FILE_TAPIS_ARRIVEE)) //Si on reçoit quelque chose dans la file.
 8000a44:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <Tache_lecture_rapide+0x128>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a4c:	2264      	movs	r2, #100	; 0x64
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 f930 	bl	8003cb4 <xQueuePeek>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d056      	beq.n	8000b08 <Tache_lecture_rapide+0xfc>
		{
		  if (xQueueReceive(File_tapis_arriveeHandle,&colis,TIMEOUT_FILE_TAPIS_ARRIVEE)) //Alors on l'efface de la file
 8000a5a:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <Tache_lecture_rapide+0x128>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a62:	2264      	movs	r2, #100	; 0x64
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 ff41 	bl	80038ec <xQueueReceive>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d04b      	beq.n	8000b08 <Tache_lecture_rapide+0xfc>
			{

			  colis = colis & 0xFFFFFFFB;//Set du bit B2 à 0;
 8000a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a72:	f023 0304 	bic.w	r3, r3, #4
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c

			  if (colis & 2) //Si B1 = 1 : Etiquette invisible
 8000a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d00e      	beq.n	8000aa0 <Tache_lecture_rapide+0x94>
			  {
				  if(!xQueueSendToBack(File_tapis_relectureHandle, &colis, TIMEOUT_FILE_TAPIS_RELECTURE)) // Il faudra gérer le débordement et afficher un message d'erreur
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <Tache_lecture_rapide+0x12c>)
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2264      	movs	r2, #100	; 0x64
 8000a8e:	f002 fd9f 	bl	80035d0 <xQueueGenericSend>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d12b      	bne.n	8000af0 <Tache_lecture_rapide+0xe4>
				{
					affiche_message("Debordement : Echec de le la file relecture\r\n");
 8000a98:	4828      	ldr	r0, [pc, #160]	; (8000b3c <Tache_lecture_rapide+0x130>)
 8000a9a:	f7ff feff 	bl	800089c <affiche_message>
 8000a9e:	e027      	b.n	8000af0 <Tache_lecture_rapide+0xe4>
				}
			  }
			  else{ //B1=0 : Etiquette visible
				  if (colis & 1){//Traitement colis tâche national si B0 ==0
 8000aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d011      	beq.n	8000ace <Tache_lecture_rapide+0xc2>
					  affiche_message("Mise sur tapis pour le national !\r\n");
 8000aaa:	4825      	ldr	r0, [pc, #148]	; (8000b40 <Tache_lecture_rapide+0x134>)
 8000aac:	f7ff fef6 	bl	800089c <affiche_message>
					  if(!xQueueSendToBack(File_depart_nationalHandle, &colis, TIMEOUT_FILE_TAPIS_DEPART)) // Il faudra gérer le débordement et afficher un message d'erreur
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <Tache_lecture_rapide+0x138>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000ab8:	2300      	movs	r3, #0
 8000aba:	2264      	movs	r2, #100	; 0x64
 8000abc:	f002 fd88 	bl	80035d0 <xQueueGenericSend>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d114      	bne.n	8000af0 <Tache_lecture_rapide+0xe4>
						{
							affiche_message("Debordement : Echec de l'envoi du colis au national\r\n");
 8000ac6:	4820      	ldr	r0, [pc, #128]	; (8000b48 <Tache_lecture_rapide+0x13c>)
 8000ac8:	f7ff fee8 	bl	800089c <affiche_message>
 8000acc:	e010      	b.n	8000af0 <Tache_lecture_rapide+0xe4>
						}
				  }
				  else{//Traitement colis tâche international si B0==1
					  affiche_message("Mise sur tapis pour l'international !\r\n");
 8000ace:	481f      	ldr	r0, [pc, #124]	; (8000b4c <Tache_lecture_rapide+0x140>)
 8000ad0:	f7ff fee4 	bl	800089c <affiche_message>
					  if(!xQueueSendToBack(File_depart_internationalHandle, &colis, TIMEOUT_FILE_TAPIS_DEPART)) // Il faudra gérer le débordement et afficher un message d'erreur
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <Tache_lecture_rapide+0x144>)
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000adc:	2300      	movs	r3, #0
 8000ade:	2264      	movs	r2, #100	; 0x64
 8000ae0:	f002 fd76 	bl	80035d0 <xQueueGenericSend>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <Tache_lecture_rapide+0xe4>
						{
							affiche_message("Debordement : Echec de l'envoi du colis au international\r\n");
 8000aea:	481a      	ldr	r0, [pc, #104]	; (8000b54 <Tache_lecture_rapide+0x148>)
 8000aec:	f7ff fed6 	bl	800089c <affiche_message>
						}
				  }
			  }


			  sprintf(buff,"Tache lecture rapide : %d\r\n",colis);
 8000af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	4918      	ldr	r1, [pc, #96]	; (8000b58 <Tache_lecture_rapide+0x14c>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f005 fabd 	bl	8006078 <siprintf>
			  affiche_message(buff);
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff feca 	bl	800089c <affiche_message>
			}
		}


    osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f002 f9a1 	bl	8002e50 <osDelay>
	  if (xQueuePeek(File_tapis_arriveeHandle,&colis,TIMEOUT_FILE_TAPIS_ARRIVEE)) //Si on reçoit quelque chose dans la file.
 8000b0e:	e799      	b.n	8000a44 <Tache_lecture_rapide+0x38>
 8000b10:	08006c8c 	.word	0x08006c8c
 8000b14:	08000c85 	.word	0x08000c85
 8000b18:	20004a18 	.word	0x20004a18
 8000b1c:	08006c68 	.word	0x08006c68
 8000b20:	08000c15 	.word	0x08000c15
 8000b24:	200049bc 	.word	0x200049bc
 8000b28:	08006c44 	.word	0x08006c44
 8000b2c:	08000b5d 	.word	0x08000b5d
 8000b30:	20004a10 	.word	0x20004a10
 8000b34:	200049c8 	.word	0x200049c8
 8000b38:	200049b8 	.word	0x200049b8
 8000b3c:	08006a34 	.word	0x08006a34
 8000b40:	08006a64 	.word	0x08006a64
 8000b44:	20004a14 	.word	0x20004a14
 8000b48:	08006a88 	.word	0x08006a88
 8000b4c:	08006ac0 	.word	0x08006ac0
 8000b50:	200049a4 	.word	0x200049a4
 8000b54:	08006ae8 	.word	0x08006ae8
 8000b58:	08006b24 	.word	0x08006b24

08000b5c <Tache_relecture>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_relecture */
void Tache_relecture(void *argument)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b090      	sub	sp, #64	; 0x40
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	unsigned int colis; // buffer de la file
	char buff[50];
  /* Infinite loop */
  for(;;)
  {
	  if (xSemaphoreTake(SemaphoreReLecture,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000b64:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <Tache_relecture+0xa4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 ff99 	bl	8003aa4 <xQueueSemaphoreTake>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d037      	beq.n	8000be8 <Tache_relecture+0x8c>
	  {
		  if (xQueuePeek(File_tapis_relectureHandle,&colis,TIMEOUT_FILE_TAPIS_RELECTURE)) //Si on reçoit quelque chose dans la file.
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <Tache_relecture+0xa8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000b80:	2264      	movs	r2, #100	; 0x64
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 f896 	bl	8003cb4 <xQueuePeek>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d02c      	beq.n	8000be8 <Tache_relecture+0x8c>
				{
				  if (xQueueReceive(File_tapis_relectureHandle,&colis,TIMEOUT_FILE_TAPIS_RELECTURE)) //Alors on l'efface de la file
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <Tache_relecture+0xa8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000b96:	2264      	movs	r2, #100	; 0x64
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f002 fea7 	bl	80038ec <xQueueReceive>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d021      	beq.n	8000be8 <Tache_relecture+0x8c>
					{
					  //Traitement colis tâche national si B0 ==0

					  //Traitement colis tâche international si B0==1

					  colis = colis | 0x0000004;//Set du bit B2 à 1;
 8000ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c

					  colis = colis & 0xFFFFFFFD;//Set du bit B1 à 0;
 8000bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bae:	f023 0302 	bic.w	r3, r3, #2
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c

					  sprintf(buff,"Tache relecture : %d\r\n",colis);
 8000bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4913      	ldr	r1, [pc, #76]	; (8000c08 <Tache_relecture+0xac>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f005 fa5b 	bl	8006078 <siprintf>

					  if(!xQueueSendToFront(File_tapis_arriveeHandle, &colis, TIMEOUT_FILE_TAPIS_ARRIVEE)) // Il faudra gérer le débordement et afficher un message d'erreur
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <Tache_relecture+0xb0>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000bca:	2301      	movs	r3, #1
 8000bcc:	2264      	movs	r2, #100	; 0x64
 8000bce:	f002 fcff 	bl	80035d0 <xQueueGenericSend>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <Tache_relecture+0x82>
						{
							affiche_message("Debordement : Echec de l'envoi du colis dans le retour arrivée\r\n");
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <Tache_relecture+0xb4>)
 8000bda:	f7ff fe5f 	bl	800089c <affiche_message>
						}

					  affiche_message(buff);
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fe5a 	bl	800089c <affiche_message>
					}
				}
	  }
	  xSemaphoreGive(SemaphoreReLecture); //On rend le jeton
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <Tache_relecture+0xa4>)
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	2300      	movs	r3, #0
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f002 fced 	bl	80035d0 <xQueueGenericSend>
      osDelay(1);
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f002 f92a 	bl	8002e50 <osDelay>
	  if (xSemaphoreTake(SemaphoreReLecture,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000bfc:	e7b2      	b.n	8000b64 <Tache_relecture+0x8>
 8000bfe:	bf00      	nop
 8000c00:	200049b4 	.word	0x200049b4
 8000c04:	200049b8 	.word	0x200049b8
 8000c08:	08006b40 	.word	0x08006b40
 8000c0c:	200049c8 	.word	0x200049c8
 8000c10:	08006b58 	.word	0x08006b58

08000c14 <Tache_depart_national>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_depart_national */
void Tache_depart_national(void *argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tache_depart_national */
	unsigned int pvBuffer; // buffer de la file
  /* Infinite loop */
  for(;;)
  {
	  if (xSemaphoreTake(SemaphoreNational,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <Tache_depart_national+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 ff3d 	bl	8003aa4 <xQueueSemaphoreTake>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d018      	beq.n	8000c62 <Tache_depart_national+0x4e>
		{
		  if (xQueuePeek(File_depart_nationalHandle,&pvBuffer,TIMEOUT_FILE_TAPIS_RELECTURE)) //Si on reçoit quelque chose dans la file.
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <Tache_depart_national+0x68>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f107 010c 	add.w	r1, r7, #12
 8000c38:	2264      	movs	r2, #100	; 0x64
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 f83a 	bl	8003cb4 <xQueuePeek>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00d      	beq.n	8000c62 <Tache_depart_national+0x4e>
			{
			  if (xQueueReceive(File_depart_nationalHandle,&pvBuffer,TIMEOUT_FILE_TAPIS_RELECTURE)) //Alors on l'efface de la file
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <Tache_depart_national+0x68>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f107 010c 	add.w	r1, r7, #12
 8000c4e:	2264      	movs	r2, #100	; 0x64
 8000c50:	4618      	mov	r0, r3
 8000c52:	f002 fe4b 	bl	80038ec <xQueueReceive>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <Tache_depart_national+0x4e>
				{

				  affiche_message("Colis envoyé au national !\r\n");
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <Tache_depart_national+0x6c>)
 8000c5e:	f7ff fe1d 	bl	800089c <affiche_message>
				}
			}
		}
	  xSemaphoreGive(SemaphoreNational); //On rend le jeton
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <Tache_depart_national+0x64>)
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	2300      	movs	r3, #0
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	f002 fcb0 	bl	80035d0 <xQueueGenericSend>
    osDelay(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f002 f8ed 	bl	8002e50 <osDelay>
	  if (xSemaphoreTake(SemaphoreNational,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000c76:	e7d1      	b.n	8000c1c <Tache_depart_national+0x8>
 8000c78:	200049a8 	.word	0x200049a8
 8000c7c:	20004a14 	.word	0x20004a14
 8000c80:	08006b9c 	.word	0x08006b9c

08000c84 <Tache_depart_international>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_depart_international */
void Tache_depart_international(void *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tache_depart_international */
	unsigned int pvBuffer; // buffer de la file
  /* Infinite loop */
  for(;;)
  {
	  if (xSemaphoreTake(SemaphoreInternational,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <Tache_depart_international+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 ff05 	bl	8003aa4 <xQueueSemaphoreTake>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d018      	beq.n	8000cd2 <Tache_depart_international+0x4e>
	  	{
		  if (xQueuePeek(File_depart_internationalHandle,&pvBuffer,TIMEOUT_FILE_TAPIS_RELECTURE)) //Si on reçoit quelque chose dans la file.
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <Tache_depart_international+0x68>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f107 010c 	add.w	r1, r7, #12
 8000ca8:	2264      	movs	r2, #100	; 0x64
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 f802 	bl	8003cb4 <xQueuePeek>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00d      	beq.n	8000cd2 <Tache_depart_international+0x4e>
			{
			  if (xQueueReceive(File_depart_internationalHandle,&pvBuffer,TIMEOUT_FILE_TAPIS_RELECTURE)) //Alors on l'efface de la file
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <Tache_depart_international+0x68>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f107 010c 	add.w	r1, r7, #12
 8000cbe:	2264      	movs	r2, #100	; 0x64
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fe13 	bl	80038ec <xQueueReceive>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <Tache_depart_international+0x4e>
				{

				affiche_message("Colis envoyé à l'international !\r\n");
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <Tache_depart_international+0x6c>)
 8000cce:	f7ff fde5 	bl	800089c <affiche_message>
				}
			}

	  	}
	  xSemaphoreGive(SemaphoreInternational); //On rend le jeton
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <Tache_depart_international+0x64>)
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f002 fc78 	bl	80035d0 <xQueueGenericSend>
    osDelay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f002 f8b5 	bl	8002e50 <osDelay>
	  if (xSemaphoreTake(SemaphoreInternational,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000ce6:	e7d1      	b.n	8000c8c <Tache_depart_international+0x8>
 8000ce8:	200049ac 	.word	0x200049ac
 8000cec:	200049a4 	.word	0x200049a4
 8000cf0:	08006bbc 	.word	0x08006bbc

08000cf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d04:	d101      	bne.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d06:	f000 f98f 	bl	8001028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d16:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x6>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_MspInit+0x54>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <HAL_MspInit+0x54>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_MspInit+0x54>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_MspInit+0x54>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_MspInit+0x54>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_MspInit+0x54>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	f06f 0001 	mvn.w	r0, #1
 8000d62:	f000 fa39 	bl	80011d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_UART_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12b      	bne.n	8000dee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dde:	2307      	movs	r3, #7
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_UART_MspInit+0x8c>)
 8000dea:	f000 fa1f 	bl	800122c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	201c      	movs	r0, #28
 8000e1a:	f000 f9dd 	bl	80011d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e1e:	201c      	movs	r0, #28
 8000e20:	f000 f9f6 	bl	8001210 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <HAL_InitTick+0xa8>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <HAL_InitTick+0xa8>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_InitTick+0xa8>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e40:	f107 0210 	add.w	r2, r7, #16
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 ffec 	bl	8001e28 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e50:	f000 ffc2 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8000e54:	4603      	mov	r3, r0
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <HAL_InitTick+0xac>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	0c9b      	lsrs	r3, r3, #18
 8000e64:	3b01      	subs	r3, #1
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0xb0>)
 8000e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_InitTick+0xb0>)
 8000e72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e76:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_InitTick+0xb0>)
 8000e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_InitTick+0xb0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_InitTick+0xb0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000e8a:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <HAL_InitTick+0xb0>)
 8000e8c:	f000 fffe 	bl	8001e8c <HAL_TIM_Base_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d104      	bne.n	8000ea0 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <HAL_InitTick+0xb0>)
 8000e98:	f001 f82d 	bl	8001ef6 <HAL_TIM_Base_Start_IT>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	e000      	b.n	8000ea2 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3730      	adds	r7, #48	; 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	431bde83 	.word	0x431bde83
 8000eb4:	20004a20 	.word	0x20004a20

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <TIM2_IRQHandler+0x10>)
 8000eea:	f001 f828 	bl	8001f3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20004a20 	.word	0x20004a20

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f005 f868 	bl	8005ffc <__errno>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	230c      	movs	r3, #12
 8000f30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20018000 	.word	0x20018000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	20000090 	.word	0x20000090
 8000f60:	20004aa8 	.word	0x20004aa8

08000f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <SystemInit+0x28>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <SystemInit+0x28>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SystemInit+0x28>)
 8000f7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f96:	e003      	b.n	8000fa0 <LoopCopyDataInit>

08000f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f9e:	3104      	adds	r1, #4

08000fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fa8:	d3f6      	bcc.n	8000f98 <CopyDataInit>
  ldr  r2, =_sbss
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fac:	e002      	b.n	8000fb4 <LoopFillZerobss>

08000fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fb0:	f842 3b04 	str.w	r3, [r2], #4

08000fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fb8:	d3f9      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fba:	f7ff ffd3 	bl	8000f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f005 f823 	bl	8006008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f7ff fae5 	bl	8000590 <main>
  bx  lr    
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000fcc:	08006d7c 	.word	0x08006d7c
  ldr  r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fd4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000fd8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000fdc:	20004aa8 	.word	0x20004aa8

08000fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <HAL_Init+0x40>)
 8000fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_Init+0x40>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_Init+0x40>)
 8001006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f8d8 	bl	80011c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fef6 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fe80 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023c00 	.word	0x40023c00

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	20004a60 	.word	0x20004a60

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20004a60 	.word	0x20004a60

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff4c 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ea:	f7ff ff61 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80011ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f7ff ffb1 	bl	800115c <NVIC_EncodePriority>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff80 	bl	8001108 <__NVIC_SetPriority>
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff54 	bl	80010cc <__NVIC_EnableIRQ>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	e159      	b.n	80014fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001248:	2201      	movs	r2, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	429a      	cmp	r2, r3
 8001262:	f040 8148 	bne.w	80014f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d00b      	beq.n	8001286 <HAL_GPIO_Init+0x5a>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127a:	2b11      	cmp	r3, #17
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b12      	cmp	r3, #18
 8001284:	d130      	bne.n	80012e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 0201 	and.w	r2, r3, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0xfc>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d123      	bne.n	8001370 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	08da      	lsrs	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3208      	adds	r2, #8
 800136a:	69b9      	ldr	r1, [r7, #24]
 800136c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0203 	and.w	r2, r3, #3
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80a2 	beq.w	80014f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_GPIO_Init+0x2e4>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a55      	ldr	r2, [pc, #340]	; (8001510 <HAL_GPIO_Init+0x2e4>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_GPIO_Init+0x2e4>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ce:	4a51      	ldr	r2, [pc, #324]	; (8001514 <HAL_GPIO_Init+0x2e8>)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a48      	ldr	r2, [pc, #288]	; (8001518 <HAL_GPIO_Init+0x2ec>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d019      	beq.n	800142e <HAL_GPIO_Init+0x202>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a47      	ldr	r2, [pc, #284]	; (800151c <HAL_GPIO_Init+0x2f0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0x1fe>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a46      	ldr	r2, [pc, #280]	; (8001520 <HAL_GPIO_Init+0x2f4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00d      	beq.n	8001426 <HAL_GPIO_Init+0x1fa>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a45      	ldr	r2, [pc, #276]	; (8001524 <HAL_GPIO_Init+0x2f8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d007      	beq.n	8001422 <HAL_GPIO_Init+0x1f6>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a44      	ldr	r2, [pc, #272]	; (8001528 <HAL_GPIO_Init+0x2fc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_GPIO_Init+0x1f2>
 800141a:	2304      	movs	r3, #4
 800141c:	e008      	b.n	8001430 <HAL_GPIO_Init+0x204>
 800141e:	2307      	movs	r3, #7
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x204>
 8001422:	2303      	movs	r3, #3
 8001424:	e004      	b.n	8001430 <HAL_GPIO_Init+0x204>
 8001426:	2302      	movs	r3, #2
 8001428:	e002      	b.n	8001430 <HAL_GPIO_Init+0x204>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <HAL_GPIO_Init+0x204>
 800142e:	2300      	movs	r3, #0
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	f002 0203 	and.w	r2, r2, #3
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4093      	lsls	r3, r2
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001440:	4934      	ldr	r1, [pc, #208]	; (8001514 <HAL_GPIO_Init+0x2e8>)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3302      	adds	r3, #2
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <HAL_GPIO_Init+0x300>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001472:	4a2e      	ldr	r2, [pc, #184]	; (800152c <HAL_GPIO_Init+0x300>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001478:	4b2c      	ldr	r3, [pc, #176]	; (800152c <HAL_GPIO_Init+0x300>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149c:	4a23      	ldr	r2, [pc, #140]	; (800152c <HAL_GPIO_Init+0x300>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_GPIO_Init+0x300>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c6:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_GPIO_Init+0x300>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_GPIO_Init+0x300>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f0:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_GPIO_Init+0x300>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3301      	adds	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	f67f aea2 	bls.w	8001248 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001504:	bf00      	nop
 8001506:	3724      	adds	r7, #36	; 0x24
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40023800 	.word	0x40023800
 8001514:	40013800 	.word	0x40013800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e25b      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d075      	beq.n	800166e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001582:	4ba3      	ldr	r3, [pc, #652]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d00c      	beq.n	80015a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158e:	4ba0      	ldr	r3, [pc, #640]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001596:	2b08      	cmp	r3, #8
 8001598:	d112      	bne.n	80015c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159a:	4b9d      	ldr	r3, [pc, #628]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015a6:	d10b      	bne.n	80015c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	4b99      	ldr	r3, [pc, #612]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d05b      	beq.n	800166c <HAL_RCC_OscConfig+0x108>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d157      	bne.n	800166c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e236      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c8:	d106      	bne.n	80015d8 <HAL_RCC_OscConfig+0x74>
 80015ca:	4b91      	ldr	r3, [pc, #580]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a90      	ldr	r2, [pc, #576]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e01d      	b.n	8001614 <HAL_RCC_OscConfig+0xb0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x98>
 80015e2:	4b8b      	ldr	r3, [pc, #556]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a8a      	ldr	r2, [pc, #552]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b88      	ldr	r3, [pc, #544]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a87      	ldr	r2, [pc, #540]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xb0>
 80015fc:	4b84      	ldr	r3, [pc, #528]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a83      	ldr	r2, [pc, #524]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b81      	ldr	r3, [pc, #516]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a80      	ldr	r2, [pc, #512]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fd18 	bl	8001050 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fd14 	bl	8001050 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1fb      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b76      	ldr	r3, [pc, #472]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0xc0>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fd04 	bl	8001050 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fd00 	bl	8001050 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1e7      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	4b6c      	ldr	r3, [pc, #432]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0xe8>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d063      	beq.n	8001742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800167a:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001686:	4b62      	ldr	r3, [pc, #392]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800168e:	2b08      	cmp	r3, #8
 8001690:	d11c      	bne.n	80016cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001692:	4b5f      	ldr	r3, [pc, #380]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d116      	bne.n	80016cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	4b5c      	ldr	r3, [pc, #368]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x152>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e1bb      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b56      	ldr	r3, [pc, #344]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4952      	ldr	r1, [pc, #328]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	e03a      	b.n	8001742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d4:	4b4f      	ldr	r3, [pc, #316]	; (8001814 <HAL_RCC_OscConfig+0x2b0>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016da:	f7ff fcb9 	bl	8001050 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff fcb5 	bl	8001050 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e19c      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4940      	ldr	r1, [pc, #256]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <HAL_RCC_OscConfig+0x2b0>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fc98 	bl	8001050 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fc94 	bl	8001050 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e17b      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4b36      	ldr	r3, [pc, #216]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d030      	beq.n	80017b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d016      	beq.n	8001784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fc78 	bl	8001050 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fc74 	bl	8001050 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e15b      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x200>
 8001782:	e015      	b.n	80017b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fc61 	bl	8001050 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001792:	f7ff fc5d 	bl	8001050 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e144      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80017a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80a0 	beq.w	80018fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10f      	bne.n	80017ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x2b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d121      	bne.n	800183e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_RCC_OscConfig+0x2b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_RCC_OscConfig+0x2b8>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001806:	f7ff fc23 	bl	8001050 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	e011      	b.n	8001832 <HAL_RCC_OscConfig+0x2ce>
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	42470000 	.word	0x42470000
 8001818:	42470e80 	.word	0x42470e80
 800181c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001820:	f7ff fc16 	bl	8001050 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0fd      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <HAL_RCC_OscConfig+0x4d4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d106      	bne.n	8001854 <HAL_RCC_OscConfig+0x2f0>
 8001846:	4b7d      	ldr	r3, [pc, #500]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	4a7c      	ldr	r2, [pc, #496]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6713      	str	r3, [r2, #112]	; 0x70
 8001852:	e01c      	b.n	800188e <HAL_RCC_OscConfig+0x32a>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d10c      	bne.n	8001876 <HAL_RCC_OscConfig+0x312>
 800185c:	4b77      	ldr	r3, [pc, #476]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	4a76      	ldr	r2, [pc, #472]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6713      	str	r3, [r2, #112]	; 0x70
 8001868:	4b74      	ldr	r3, [pc, #464]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	4a73      	ldr	r2, [pc, #460]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6713      	str	r3, [r2, #112]	; 0x70
 8001874:	e00b      	b.n	800188e <HAL_RCC_OscConfig+0x32a>
 8001876:	4b71      	ldr	r3, [pc, #452]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a70      	ldr	r2, [pc, #448]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a6d      	ldr	r2, [pc, #436]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d015      	beq.n	80018c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fbdb 	bl	8001050 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff fbd7 	bl	8001050 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0bc      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	4b61      	ldr	r3, [pc, #388]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ee      	beq.n	800189e <HAL_RCC_OscConfig+0x33a>
 80018c0:	e014      	b.n	80018ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fbc5 	bl	8001050 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff fbc1 	bl	8001050 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0a6      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ee      	bne.n	80018ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f2:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 80018f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8092 	beq.w	8001a2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001908:	4b4c      	ldr	r3, [pc, #304]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d05c      	beq.n	80019ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d141      	bne.n	80019a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191c:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <HAL_RCC_OscConfig+0x4dc>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff fb95 	bl	8001050 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff fb91 	bl	8001050 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e078      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193c:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69da      	ldr	r2, [r3, #28]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	019b      	lsls	r3, r3, #6
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	3b01      	subs	r3, #1
 8001962:	041b      	lsls	r3, r3, #16
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	061b      	lsls	r3, r3, #24
 800196c:	4933      	ldr	r1, [pc, #204]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <HAL_RCC_OscConfig+0x4dc>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fb6a 	bl	8001050 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff fb66 	bl	8001050 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e04d      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x41c>
 800199e:	e045      	b.n	8001a2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <HAL_RCC_OscConfig+0x4dc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff fb53 	bl	8001050 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ae:	f7ff fb4f 	bl	8001050 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e036      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f0      	bne.n	80019ae <HAL_RCC_OscConfig+0x44a>
 80019cc:	e02e      	b.n	8001a2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e029      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_RCC_OscConfig+0x4d8>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d11c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d115      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a02:	4013      	ands	r3, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d10d      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d106      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	42470060 	.word	0x42470060

08001a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0cc      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b68      	ldr	r3, [pc, #416]	; (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d90c      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0b8      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a98:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab0:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	494d      	ldr	r1, [pc, #308]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d044      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d119      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e07f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e067      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4934      	ldr	r1, [pc, #208]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b34:	f7ff fa8c 	bl	8001050 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7ff fa88 	bl	8001050 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e04f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d20c      	bcs.n	8001b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e032      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4916      	ldr	r1, [pc, #88]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	490e      	ldr	r1, [pc, #56]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bca:	f000 f821 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bce:	4601      	mov	r1, r0
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	fa21 f303 	lsr.w	r3, r1, r3
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f90a 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023c00 	.word	0x40023c00
 8001c00:	40023800 	.word	0x40023800
 8001c04:	08006d20 	.word	0x08006d20
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d007      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x32>
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d008      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x38>
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 80b4 	bne.w	8001da4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b5e      	ldr	r3, [pc, #376]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c3e:	60bb      	str	r3, [r7, #8]
       break;
 8001c40:	e0b3      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c42:	4b5e      	ldr	r3, [pc, #376]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c44:	60bb      	str	r3, [r7, #8]
      break;
 8001c46:	e0b0      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c48:	4b5a      	ldr	r3, [pc, #360]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c52:	4b58      	ldr	r3, [pc, #352]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d04a      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	4b55      	ldr	r3, [pc, #340]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	f04f 0400 	mov.w	r4, #0
 8001c68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	ea03 0501 	and.w	r5, r3, r1
 8001c74:	ea04 0602 	and.w	r6, r4, r2
 8001c78:	4629      	mov	r1, r5
 8001c7a:	4632      	mov	r2, r6
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	f04f 0400 	mov.w	r4, #0
 8001c84:	0154      	lsls	r4, r2, #5
 8001c86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c8a:	014b      	lsls	r3, r1, #5
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4622      	mov	r2, r4
 8001c90:	1b49      	subs	r1, r1, r5
 8001c92:	eb62 0206 	sbc.w	r2, r2, r6
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f04f 0400 	mov.w	r4, #0
 8001c9e:	0194      	lsls	r4, r2, #6
 8001ca0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ca4:	018b      	lsls	r3, r1, #6
 8001ca6:	1a5b      	subs	r3, r3, r1
 8001ca8:	eb64 0402 	sbc.w	r4, r4, r2
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	00e2      	lsls	r2, r4, #3
 8001cb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cba:	00d9      	lsls	r1, r3, #3
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4614      	mov	r4, r2
 8001cc0:	195b      	adds	r3, r3, r5
 8001cc2:	eb44 0406 	adc.w	r4, r4, r6
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	0262      	lsls	r2, r4, #9
 8001cd0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001cd4:	0259      	lsls	r1, r3, #9
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4614      	mov	r4, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	4621      	mov	r1, r4
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f04f 0400 	mov.w	r4, #0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	f7fe fad2 	bl	8000290 <__aeabi_uldivmod>
 8001cec:	4603      	mov	r3, r0
 8001cee:	460c      	mov	r4, r1
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e049      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	f04f 0400 	mov.w	r4, #0
 8001cfe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	ea03 0501 	and.w	r5, r3, r1
 8001d0a:	ea04 0602 	and.w	r6, r4, r2
 8001d0e:	4629      	mov	r1, r5
 8001d10:	4632      	mov	r2, r6
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	f04f 0400 	mov.w	r4, #0
 8001d1a:	0154      	lsls	r4, r2, #5
 8001d1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d20:	014b      	lsls	r3, r1, #5
 8001d22:	4619      	mov	r1, r3
 8001d24:	4622      	mov	r2, r4
 8001d26:	1b49      	subs	r1, r1, r5
 8001d28:	eb62 0206 	sbc.w	r2, r2, r6
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	f04f 0400 	mov.w	r4, #0
 8001d34:	0194      	lsls	r4, r2, #6
 8001d36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d3a:	018b      	lsls	r3, r1, #6
 8001d3c:	1a5b      	subs	r3, r3, r1
 8001d3e:	eb64 0402 	sbc.w	r4, r4, r2
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	00e2      	lsls	r2, r4, #3
 8001d4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d50:	00d9      	lsls	r1, r3, #3
 8001d52:	460b      	mov	r3, r1
 8001d54:	4614      	mov	r4, r2
 8001d56:	195b      	adds	r3, r3, r5
 8001d58:	eb44 0406 	adc.w	r4, r4, r6
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	02a2      	lsls	r2, r4, #10
 8001d66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d6a:	0299      	lsls	r1, r3, #10
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4614      	mov	r4, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	4621      	mov	r1, r4
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f04f 0400 	mov.w	r4, #0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	f7fe fa87 	bl	8000290 <__aeabi_uldivmod>
 8001d82:	4603      	mov	r3, r0
 8001d84:	460c      	mov	r4, r1
 8001d86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	3301      	adds	r3, #1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	60bb      	str	r3, [r7, #8]
      break;
 8001da2:	e002      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001da6:	60bb      	str	r3, [r7, #8]
      break;
 8001da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001daa:	68bb      	ldr	r3, [r7, #8]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	007a1200 	.word	0x007a1200

08001dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ddc:	f7ff fff0 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001de0:	4601      	mov	r1, r0
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	0a9b      	lsrs	r3, r3, #10
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08006d30 	.word	0x08006d30

08001e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e04:	f7ff ffdc 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001e08:	4601      	mov	r1, r0
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0b5b      	lsrs	r3, r3, #13
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	08006d30 	.word	0x08006d30

08001e28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	220f      	movs	r2, #15
 8001e36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HAL_RCC_GetClockConfig+0x60>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	601a      	str	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e01d      	b.n	8001eda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f815 	bl	8001ee2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f000 f968 	bl	80021a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b06      	cmp	r3, #6
 8001f1e:	d007      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d122      	bne.n	8001f9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d11b      	bne.n	8001f9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f06f 0202 	mvn.w	r2, #2
 8001f6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8ee 	bl	8002162 <HAL_TIM_IC_CaptureCallback>
 8001f86:	e005      	b.n	8001f94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f8e0 	bl	800214e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8f1 	bl	8002176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d122      	bne.n	8001fee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d11b      	bne.n	8001fee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f06f 0204 	mvn.w	r2, #4
 8001fbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f8c4 	bl	8002162 <HAL_TIM_IC_CaptureCallback>
 8001fda:	e005      	b.n	8001fe8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8b6 	bl	800214e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8c7 	bl	8002176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d122      	bne.n	8002042 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11b      	bne.n	8002042 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f06f 0208 	mvn.w	r2, #8
 8002012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2204      	movs	r2, #4
 8002018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f89a 	bl	8002162 <HAL_TIM_IC_CaptureCallback>
 800202e:	e005      	b.n	800203c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f88c 	bl	800214e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f89d 	bl	8002176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b10      	cmp	r3, #16
 800204e:	d122      	bne.n	8002096 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b10      	cmp	r3, #16
 800205c:	d11b      	bne.n	8002096 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f06f 0210 	mvn.w	r2, #16
 8002066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2208      	movs	r2, #8
 800206c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f870 	bl	8002162 <HAL_TIM_IC_CaptureCallback>
 8002082:	e005      	b.n	8002090 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f862 	bl	800214e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f873 	bl	8002176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d10e      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f06f 0201 	mvn.w	r2, #1
 80020ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7fe fe19 	bl	8000cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d10e      	bne.n	80020ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b80      	cmp	r3, #128	; 0x80
 80020dc:	d107      	bne.n	80020ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f8e3 	bl	80022b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f8:	2b40      	cmp	r3, #64	; 0x40
 80020fa:	d10e      	bne.n	800211a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d107      	bne.n	800211a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f838 	bl	800218a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b20      	cmp	r3, #32
 8002126:	d10e      	bne.n	8002146 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b20      	cmp	r3, #32
 8002134:	d107      	bne.n	8002146 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f06f 0220 	mvn.w	r2, #32
 800213e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f8ad 	bl	80022a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a34      	ldr	r2, [pc, #208]	; (8002284 <TIM_Base_SetConfig+0xe4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00f      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021be:	d00b      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a31      	ldr	r2, [pc, #196]	; (8002288 <TIM_Base_SetConfig+0xe8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a30      	ldr	r2, [pc, #192]	; (800228c <TIM_Base_SetConfig+0xec>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a2f      	ldr	r2, [pc, #188]	; (8002290 <TIM_Base_SetConfig+0xf0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <TIM_Base_SetConfig+0xe4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01b      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d017      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <TIM_Base_SetConfig+0xe8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a21      	ldr	r2, [pc, #132]	; (800228c <TIM_Base_SetConfig+0xec>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00f      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a20      	ldr	r2, [pc, #128]	; (8002290 <TIM_Base_SetConfig+0xf0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00b      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <TIM_Base_SetConfig+0xf4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <TIM_Base_SetConfig+0xf8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1d      	ldr	r2, [pc, #116]	; (800229c <TIM_Base_SetConfig+0xfc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <TIM_Base_SetConfig+0xe4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d103      	bne.n	8002270 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	615a      	str	r2, [r3, #20]
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40010000 	.word	0x40010000
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800
 8002290:	40000c00 	.word	0x40000c00
 8002294:	40014000 	.word	0x40014000
 8002298:	40014400 	.word	0x40014400
 800229c:	40014800 	.word	0x40014800

080022a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e03f      	b.n	800235a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fd40 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800230a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f90b 	bl	8002528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b088      	sub	sp, #32
 8002366:	af02      	add	r7, sp, #8
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b20      	cmp	r3, #32
 8002380:	f040 8083 	bne.w	800248a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_UART_Transmit+0x2e>
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e07b      	b.n	800248c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Transmit+0x40>
 800239e:	2302      	movs	r3, #2
 80023a0:	e074      	b.n	800248c <HAL_UART_Transmit+0x12a>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2221      	movs	r2, #33	; 0x21
 80023b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80023b8:	f7fe fe4a 	bl	8001050 <HAL_GetTick>
 80023bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80023d2:	e042      	b.n	800245a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ea:	d122      	bne.n	8002432 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2200      	movs	r2, #0
 80023f4:	2180      	movs	r1, #128	; 0x80
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f84c 	bl	8002494 <UART_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e042      	b.n	800248c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002418:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3302      	adds	r3, #2
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	e017      	b.n	800245a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3301      	adds	r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	e013      	b.n	800245a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2200      	movs	r2, #0
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f829 	bl	8002494 <UART_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e01f      	b.n	800248c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	60ba      	str	r2, [r7, #8]
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1b7      	bne.n	80023d4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2200      	movs	r2, #0
 800246c:	2140      	movs	r1, #64	; 0x40
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f810 	bl	8002494 <UART_WaitOnFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e006      	b.n	800248c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a4:	e02c      	b.n	8002500 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d028      	beq.n	8002500 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80024b4:	f7fe fdcc 	bl	8001050 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d21d      	bcs.n	8002500 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e00f      	b.n	8002520 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d0c3      	beq.n	80024a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800256a:	f023 030c 	bic.w	r3, r3, #12
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	68f9      	ldr	r1, [r7, #12]
 8002574:	430b      	orrs	r3, r1
 8002576:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002596:	f040 818b 	bne.w	80028b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4ac1      	ldr	r2, [pc, #772]	; (80028a4 <UART_SetConfig+0x37c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d005      	beq.n	80025b0 <UART_SetConfig+0x88>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4abf      	ldr	r2, [pc, #764]	; (80028a8 <UART_SetConfig+0x380>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	f040 80bd 	bne.w	800272a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025b0:	f7ff fc26 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
 80025b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	461d      	mov	r5, r3
 80025ba:	f04f 0600 	mov.w	r6, #0
 80025be:	46a8      	mov	r8, r5
 80025c0:	46b1      	mov	r9, r6
 80025c2:	eb18 0308 	adds.w	r3, r8, r8
 80025c6:	eb49 0409 	adc.w	r4, r9, r9
 80025ca:	4698      	mov	r8, r3
 80025cc:	46a1      	mov	r9, r4
 80025ce:	eb18 0805 	adds.w	r8, r8, r5
 80025d2:	eb49 0906 	adc.w	r9, r9, r6
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025ea:	4688      	mov	r8, r1
 80025ec:	4691      	mov	r9, r2
 80025ee:	eb18 0005 	adds.w	r0, r8, r5
 80025f2:	eb49 0106 	adc.w	r1, r9, r6
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	461d      	mov	r5, r3
 80025fc:	f04f 0600 	mov.w	r6, #0
 8002600:	196b      	adds	r3, r5, r5
 8002602:	eb46 0406 	adc.w	r4, r6, r6
 8002606:	461a      	mov	r2, r3
 8002608:	4623      	mov	r3, r4
 800260a:	f7fd fe41 	bl	8000290 <__aeabi_uldivmod>
 800260e:	4603      	mov	r3, r0
 8002610:	460c      	mov	r4, r1
 8002612:	461a      	mov	r2, r3
 8002614:	4ba5      	ldr	r3, [pc, #660]	; (80028ac <UART_SetConfig+0x384>)
 8002616:	fba3 2302 	umull	r2, r3, r3, r2
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	461d      	mov	r5, r3
 8002624:	f04f 0600 	mov.w	r6, #0
 8002628:	46a9      	mov	r9, r5
 800262a:	46b2      	mov	sl, r6
 800262c:	eb19 0309 	adds.w	r3, r9, r9
 8002630:	eb4a 040a 	adc.w	r4, sl, sl
 8002634:	4699      	mov	r9, r3
 8002636:	46a2      	mov	sl, r4
 8002638:	eb19 0905 	adds.w	r9, r9, r5
 800263c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800264c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002650:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002654:	4689      	mov	r9, r1
 8002656:	4692      	mov	sl, r2
 8002658:	eb19 0005 	adds.w	r0, r9, r5
 800265c:	eb4a 0106 	adc.w	r1, sl, r6
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	461d      	mov	r5, r3
 8002666:	f04f 0600 	mov.w	r6, #0
 800266a:	196b      	adds	r3, r5, r5
 800266c:	eb46 0406 	adc.w	r4, r6, r6
 8002670:	461a      	mov	r2, r3
 8002672:	4623      	mov	r3, r4
 8002674:	f7fd fe0c 	bl	8000290 <__aeabi_uldivmod>
 8002678:	4603      	mov	r3, r0
 800267a:	460c      	mov	r4, r1
 800267c:	461a      	mov	r2, r3
 800267e:	4b8b      	ldr	r3, [pc, #556]	; (80028ac <UART_SetConfig+0x384>)
 8002680:	fba3 1302 	umull	r1, r3, r3, r2
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	2164      	movs	r1, #100	; 0x64
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	3332      	adds	r3, #50	; 0x32
 8002692:	4a86      	ldr	r2, [pc, #536]	; (80028ac <UART_SetConfig+0x384>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026a0:	4498      	add	r8, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	461d      	mov	r5, r3
 80026a6:	f04f 0600 	mov.w	r6, #0
 80026aa:	46a9      	mov	r9, r5
 80026ac:	46b2      	mov	sl, r6
 80026ae:	eb19 0309 	adds.w	r3, r9, r9
 80026b2:	eb4a 040a 	adc.w	r4, sl, sl
 80026b6:	4699      	mov	r9, r3
 80026b8:	46a2      	mov	sl, r4
 80026ba:	eb19 0905 	adds.w	r9, r9, r5
 80026be:	eb4a 0a06 	adc.w	sl, sl, r6
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026d6:	4689      	mov	r9, r1
 80026d8:	4692      	mov	sl, r2
 80026da:	eb19 0005 	adds.w	r0, r9, r5
 80026de:	eb4a 0106 	adc.w	r1, sl, r6
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	461d      	mov	r5, r3
 80026e8:	f04f 0600 	mov.w	r6, #0
 80026ec:	196b      	adds	r3, r5, r5
 80026ee:	eb46 0406 	adc.w	r4, r6, r6
 80026f2:	461a      	mov	r2, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	f7fd fdcb 	bl	8000290 <__aeabi_uldivmod>
 80026fa:	4603      	mov	r3, r0
 80026fc:	460c      	mov	r4, r1
 80026fe:	461a      	mov	r2, r3
 8002700:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <UART_SetConfig+0x384>)
 8002702:	fba3 1302 	umull	r1, r3, r3, r2
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2164      	movs	r1, #100	; 0x64
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	3332      	adds	r3, #50	; 0x32
 8002714:	4a65      	ldr	r2, [pc, #404]	; (80028ac <UART_SetConfig+0x384>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	f003 0207 	and.w	r2, r3, #7
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4442      	add	r2, r8
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e26f      	b.n	8002c0a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800272a:	f7ff fb55 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 800272e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	461d      	mov	r5, r3
 8002734:	f04f 0600 	mov.w	r6, #0
 8002738:	46a8      	mov	r8, r5
 800273a:	46b1      	mov	r9, r6
 800273c:	eb18 0308 	adds.w	r3, r8, r8
 8002740:	eb49 0409 	adc.w	r4, r9, r9
 8002744:	4698      	mov	r8, r3
 8002746:	46a1      	mov	r9, r4
 8002748:	eb18 0805 	adds.w	r8, r8, r5
 800274c:	eb49 0906 	adc.w	r9, r9, r6
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800275c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002760:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002764:	4688      	mov	r8, r1
 8002766:	4691      	mov	r9, r2
 8002768:	eb18 0005 	adds.w	r0, r8, r5
 800276c:	eb49 0106 	adc.w	r1, r9, r6
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	461d      	mov	r5, r3
 8002776:	f04f 0600 	mov.w	r6, #0
 800277a:	196b      	adds	r3, r5, r5
 800277c:	eb46 0406 	adc.w	r4, r6, r6
 8002780:	461a      	mov	r2, r3
 8002782:	4623      	mov	r3, r4
 8002784:	f7fd fd84 	bl	8000290 <__aeabi_uldivmod>
 8002788:	4603      	mov	r3, r0
 800278a:	460c      	mov	r4, r1
 800278c:	461a      	mov	r2, r3
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <UART_SetConfig+0x384>)
 8002790:	fba3 2302 	umull	r2, r3, r3, r2
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	461d      	mov	r5, r3
 800279e:	f04f 0600 	mov.w	r6, #0
 80027a2:	46a9      	mov	r9, r5
 80027a4:	46b2      	mov	sl, r6
 80027a6:	eb19 0309 	adds.w	r3, r9, r9
 80027aa:	eb4a 040a 	adc.w	r4, sl, sl
 80027ae:	4699      	mov	r9, r3
 80027b0:	46a2      	mov	sl, r4
 80027b2:	eb19 0905 	adds.w	r9, r9, r5
 80027b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027ce:	4689      	mov	r9, r1
 80027d0:	4692      	mov	sl, r2
 80027d2:	eb19 0005 	adds.w	r0, r9, r5
 80027d6:	eb4a 0106 	adc.w	r1, sl, r6
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	461d      	mov	r5, r3
 80027e0:	f04f 0600 	mov.w	r6, #0
 80027e4:	196b      	adds	r3, r5, r5
 80027e6:	eb46 0406 	adc.w	r4, r6, r6
 80027ea:	461a      	mov	r2, r3
 80027ec:	4623      	mov	r3, r4
 80027ee:	f7fd fd4f 	bl	8000290 <__aeabi_uldivmod>
 80027f2:	4603      	mov	r3, r0
 80027f4:	460c      	mov	r4, r1
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <UART_SetConfig+0x384>)
 80027fa:	fba3 1302 	umull	r1, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2164      	movs	r1, #100	; 0x64
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	3332      	adds	r3, #50	; 0x32
 800280c:	4a27      	ldr	r2, [pc, #156]	; (80028ac <UART_SetConfig+0x384>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800281a:	4498      	add	r8, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	461d      	mov	r5, r3
 8002820:	f04f 0600 	mov.w	r6, #0
 8002824:	46a9      	mov	r9, r5
 8002826:	46b2      	mov	sl, r6
 8002828:	eb19 0309 	adds.w	r3, r9, r9
 800282c:	eb4a 040a 	adc.w	r4, sl, sl
 8002830:	4699      	mov	r9, r3
 8002832:	46a2      	mov	sl, r4
 8002834:	eb19 0905 	adds.w	r9, r9, r5
 8002838:	eb4a 0a06 	adc.w	sl, sl, r6
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002848:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800284c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002850:	4689      	mov	r9, r1
 8002852:	4692      	mov	sl, r2
 8002854:	eb19 0005 	adds.w	r0, r9, r5
 8002858:	eb4a 0106 	adc.w	r1, sl, r6
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	461d      	mov	r5, r3
 8002862:	f04f 0600 	mov.w	r6, #0
 8002866:	196b      	adds	r3, r5, r5
 8002868:	eb46 0406 	adc.w	r4, r6, r6
 800286c:	461a      	mov	r2, r3
 800286e:	4623      	mov	r3, r4
 8002870:	f7fd fd0e 	bl	8000290 <__aeabi_uldivmod>
 8002874:	4603      	mov	r3, r0
 8002876:	460c      	mov	r4, r1
 8002878:	461a      	mov	r2, r3
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <UART_SetConfig+0x384>)
 800287c:	fba3 1302 	umull	r1, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	2164      	movs	r1, #100	; 0x64
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	3332      	adds	r3, #50	; 0x32
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <UART_SetConfig+0x384>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	f003 0207 	and.w	r2, r3, #7
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4442      	add	r2, r8
 80028a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80028a2:	e1b2      	b.n	8002c0a <UART_SetConfig+0x6e2>
 80028a4:	40011000 	.word	0x40011000
 80028a8:	40011400 	.word	0x40011400
 80028ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4ad7      	ldr	r2, [pc, #860]	; (8002c14 <UART_SetConfig+0x6ec>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d005      	beq.n	80028c6 <UART_SetConfig+0x39e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4ad6      	ldr	r2, [pc, #856]	; (8002c18 <UART_SetConfig+0x6f0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	f040 80d1 	bne.w	8002a68 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80028c6:	f7ff fa9b 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
 80028ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	469a      	mov	sl, r3
 80028d0:	f04f 0b00 	mov.w	fp, #0
 80028d4:	46d0      	mov	r8, sl
 80028d6:	46d9      	mov	r9, fp
 80028d8:	eb18 0308 	adds.w	r3, r8, r8
 80028dc:	eb49 0409 	adc.w	r4, r9, r9
 80028e0:	4698      	mov	r8, r3
 80028e2:	46a1      	mov	r9, r4
 80028e4:	eb18 080a 	adds.w	r8, r8, sl
 80028e8:	eb49 090b 	adc.w	r9, r9, fp
 80028ec:	f04f 0100 	mov.w	r1, #0
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002900:	4688      	mov	r8, r1
 8002902:	4691      	mov	r9, r2
 8002904:	eb1a 0508 	adds.w	r5, sl, r8
 8002908:	eb4b 0609 	adc.w	r6, fp, r9
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	f04f 0400 	mov.w	r4, #0
 800291e:	0094      	lsls	r4, r2, #2
 8002920:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002924:	008b      	lsls	r3, r1, #2
 8002926:	461a      	mov	r2, r3
 8002928:	4623      	mov	r3, r4
 800292a:	4628      	mov	r0, r5
 800292c:	4631      	mov	r1, r6
 800292e:	f7fd fcaf 	bl	8000290 <__aeabi_uldivmod>
 8002932:	4603      	mov	r3, r0
 8002934:	460c      	mov	r4, r1
 8002936:	461a      	mov	r2, r3
 8002938:	4bb8      	ldr	r3, [pc, #736]	; (8002c1c <UART_SetConfig+0x6f4>)
 800293a:	fba3 2302 	umull	r2, r3, r3, r2
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	469b      	mov	fp, r3
 8002948:	f04f 0c00 	mov.w	ip, #0
 800294c:	46d9      	mov	r9, fp
 800294e:	46e2      	mov	sl, ip
 8002950:	eb19 0309 	adds.w	r3, r9, r9
 8002954:	eb4a 040a 	adc.w	r4, sl, sl
 8002958:	4699      	mov	r9, r3
 800295a:	46a2      	mov	sl, r4
 800295c:	eb19 090b 	adds.w	r9, r9, fp
 8002960:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002964:	f04f 0100 	mov.w	r1, #0
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002970:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002978:	4689      	mov	r9, r1
 800297a:	4692      	mov	sl, r2
 800297c:	eb1b 0509 	adds.w	r5, fp, r9
 8002980:	eb4c 060a 	adc.w	r6, ip, sl
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4619      	mov	r1, r3
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	f04f 0400 	mov.w	r4, #0
 8002996:	0094      	lsls	r4, r2, #2
 8002998:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800299c:	008b      	lsls	r3, r1, #2
 800299e:	461a      	mov	r2, r3
 80029a0:	4623      	mov	r3, r4
 80029a2:	4628      	mov	r0, r5
 80029a4:	4631      	mov	r1, r6
 80029a6:	f7fd fc73 	bl	8000290 <__aeabi_uldivmod>
 80029aa:	4603      	mov	r3, r0
 80029ac:	460c      	mov	r4, r1
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b9a      	ldr	r3, [pc, #616]	; (8002c1c <UART_SetConfig+0x6f4>)
 80029b2:	fba3 1302 	umull	r1, r3, r3, r2
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2164      	movs	r1, #100	; 0x64
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	3332      	adds	r3, #50	; 0x32
 80029c4:	4a95      	ldr	r2, [pc, #596]	; (8002c1c <UART_SetConfig+0x6f4>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d0:	4498      	add	r8, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	469b      	mov	fp, r3
 80029d6:	f04f 0c00 	mov.w	ip, #0
 80029da:	46d9      	mov	r9, fp
 80029dc:	46e2      	mov	sl, ip
 80029de:	eb19 0309 	adds.w	r3, r9, r9
 80029e2:	eb4a 040a 	adc.w	r4, sl, sl
 80029e6:	4699      	mov	r9, r3
 80029e8:	46a2      	mov	sl, r4
 80029ea:	eb19 090b 	adds.w	r9, r9, fp
 80029ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029f2:	f04f 0100 	mov.w	r1, #0
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a06:	4689      	mov	r9, r1
 8002a08:	4692      	mov	sl, r2
 8002a0a:	eb1b 0509 	adds.w	r5, fp, r9
 8002a0e:	eb4c 060a 	adc.w	r6, ip, sl
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4619      	mov	r1, r3
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	f04f 0400 	mov.w	r4, #0
 8002a24:	0094      	lsls	r4, r2, #2
 8002a26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a2a:	008b      	lsls	r3, r1, #2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4623      	mov	r3, r4
 8002a30:	4628      	mov	r0, r5
 8002a32:	4631      	mov	r1, r6
 8002a34:	f7fd fc2c 	bl	8000290 <__aeabi_uldivmod>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b77      	ldr	r3, [pc, #476]	; (8002c1c <UART_SetConfig+0x6f4>)
 8002a40:	fba3 1302 	umull	r1, r3, r3, r2
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	2164      	movs	r1, #100	; 0x64
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	3332      	adds	r3, #50	; 0x32
 8002a52:	4a72      	ldr	r2, [pc, #456]	; (8002c1c <UART_SetConfig+0x6f4>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	f003 020f 	and.w	r2, r3, #15
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4442      	add	r2, r8
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	e0d0      	b.n	8002c0a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a68:	f7ff f9b6 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	469a      	mov	sl, r3
 8002a72:	f04f 0b00 	mov.w	fp, #0
 8002a76:	46d0      	mov	r8, sl
 8002a78:	46d9      	mov	r9, fp
 8002a7a:	eb18 0308 	adds.w	r3, r8, r8
 8002a7e:	eb49 0409 	adc.w	r4, r9, r9
 8002a82:	4698      	mov	r8, r3
 8002a84:	46a1      	mov	r9, r4
 8002a86:	eb18 080a 	adds.w	r8, r8, sl
 8002a8a:	eb49 090b 	adc.w	r9, r9, fp
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002aa2:	4688      	mov	r8, r1
 8002aa4:	4691      	mov	r9, r2
 8002aa6:	eb1a 0508 	adds.w	r5, sl, r8
 8002aaa:	eb4b 0609 	adc.w	r6, fp, r9
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	f04f 0400 	mov.w	r4, #0
 8002ac0:	0094      	lsls	r4, r2, #2
 8002ac2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ac6:	008b      	lsls	r3, r1, #2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4623      	mov	r3, r4
 8002acc:	4628      	mov	r0, r5
 8002ace:	4631      	mov	r1, r6
 8002ad0:	f7fd fbde 	bl	8000290 <__aeabi_uldivmod>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <UART_SetConfig+0x6f4>)
 8002adc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	469b      	mov	fp, r3
 8002aea:	f04f 0c00 	mov.w	ip, #0
 8002aee:	46d9      	mov	r9, fp
 8002af0:	46e2      	mov	sl, ip
 8002af2:	eb19 0309 	adds.w	r3, r9, r9
 8002af6:	eb4a 040a 	adc.w	r4, sl, sl
 8002afa:	4699      	mov	r9, r3
 8002afc:	46a2      	mov	sl, r4
 8002afe:	eb19 090b 	adds.w	r9, r9, fp
 8002b02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b06:	f04f 0100 	mov.w	r1, #0
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b1a:	4689      	mov	r9, r1
 8002b1c:	4692      	mov	sl, r2
 8002b1e:	eb1b 0509 	adds.w	r5, fp, r9
 8002b22:	eb4c 060a 	adc.w	r6, ip, sl
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	f04f 0400 	mov.w	r4, #0
 8002b38:	0094      	lsls	r4, r2, #2
 8002b3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b3e:	008b      	lsls	r3, r1, #2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4623      	mov	r3, r4
 8002b44:	4628      	mov	r0, r5
 8002b46:	4631      	mov	r1, r6
 8002b48:	f7fd fba2 	bl	8000290 <__aeabi_uldivmod>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <UART_SetConfig+0x6f4>)
 8002b54:	fba3 1302 	umull	r1, r3, r3, r2
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	2164      	movs	r1, #100	; 0x64
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	3332      	adds	r3, #50	; 0x32
 8002b66:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <UART_SetConfig+0x6f4>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b72:	4498      	add	r8, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	469b      	mov	fp, r3
 8002b78:	f04f 0c00 	mov.w	ip, #0
 8002b7c:	46d9      	mov	r9, fp
 8002b7e:	46e2      	mov	sl, ip
 8002b80:	eb19 0309 	adds.w	r3, r9, r9
 8002b84:	eb4a 040a 	adc.w	r4, sl, sl
 8002b88:	4699      	mov	r9, r3
 8002b8a:	46a2      	mov	sl, r4
 8002b8c:	eb19 090b 	adds.w	r9, r9, fp
 8002b90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b94:	f04f 0100 	mov.w	r1, #0
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ba0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ba4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ba8:	4689      	mov	r9, r1
 8002baa:	4692      	mov	sl, r2
 8002bac:	eb1b 0509 	adds.w	r5, fp, r9
 8002bb0:	eb4c 060a 	adc.w	r6, ip, sl
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	f04f 0400 	mov.w	r4, #0
 8002bc6:	0094      	lsls	r4, r2, #2
 8002bc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bcc:	008b      	lsls	r3, r1, #2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4623      	mov	r3, r4
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	4631      	mov	r1, r6
 8002bd6:	f7fd fb5b 	bl	8000290 <__aeabi_uldivmod>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	460c      	mov	r4, r1
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <UART_SetConfig+0x6f4>)
 8002be2:	fba3 1302 	umull	r1, r3, r3, r2
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2164      	movs	r1, #100	; 0x64
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	3332      	adds	r3, #50	; 0x32
 8002bf4:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <UART_SetConfig+0x6f4>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	f003 020f 	and.w	r2, r3, #15
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4442      	add	r2, r8
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	e7ff      	b.n	8002c0a <UART_SetConfig+0x6e2>
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c14:	40011000 	.word	0x40011000
 8002c18:	40011400 	.word	0x40011400
 8002c1c:	51eb851f 	.word	0x51eb851f

08002c20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c36:	f3ef 8305 	mrs	r3, IPSR
 8002c3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c42:	f3ef 8310 	mrs	r3, PRIMASK
 8002c46:	607b      	str	r3, [r7, #4]
  return(result);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d105      	bne.n	8002c5a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8002c52:	603b      	str	r3, [r7, #0]
  return(result);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <osKernelInitialize+0x3a>
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <osKernelInitialize+0x64>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d103      	bne.n	8002c6a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002c62:	f06f 0305 	mvn.w	r3, #5
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e00c      	b.n	8002c84 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <osKernelInitialize+0x64>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <osKernelInitialize+0x64>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e002      	b.n	8002c84 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002c84:	68fb      	ldr	r3, [r7, #12]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000094 	.word	0x20000094

08002c98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c9e:	f3ef 8305 	mrs	r3, IPSR
 8002ca2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002caa:	f3ef 8310 	mrs	r3, PRIMASK
 8002cae:	607b      	str	r3, [r7, #4]
  return(result);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8002cba:	603b      	str	r3, [r7, #0]
  return(result);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <osKernelStart+0x3a>
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <osKernelStart+0x68>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d103      	bne.n	8002cd2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002cca:	f06f 0305 	mvn.w	r3, #5
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e010      	b.n	8002cf4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <osKernelStart+0x68>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d109      	bne.n	8002cee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002cda:	f7ff ffa1 	bl	8002c20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <osKernelStart+0x68>)
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002ce4:	f001 fc1a 	bl	800451c <vTaskStartScheduler>
      stat = osOK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e002      	b.n	8002cf4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000094 	.word	0x20000094

08002d04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b090      	sub	sp, #64	; 0x40
 8002d08:	af04      	add	r7, sp, #16
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d14:	f3ef 8305 	mrs	r3, IPSR
 8002d18:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d1a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 808f 	bne.w	8002e40 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d22:	f3ef 8310 	mrs	r3, PRIMASK
 8002d26:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d32:	617b      	str	r3, [r7, #20]
  return(result);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <osThreadNew+0x3e>
 8002d3a:	4b44      	ldr	r3, [pc, #272]	; (8002e4c <osThreadNew+0x148>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d07e      	beq.n	8002e40 <osThreadNew+0x13c>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d07b      	beq.n	8002e40 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002d4c:	2318      	movs	r3, #24
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
 8002d58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d045      	beq.n	8002dec <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <osThreadNew+0x6a>
        name = attr->name;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <osThreadNew+0x90>
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	2b38      	cmp	r3, #56	; 0x38
 8002d86:	d805      	bhi.n	8002d94 <osThreadNew+0x90>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <osThreadNew+0x94>
        return (NULL);
 8002d94:	2300      	movs	r3, #0
 8002d96:	e054      	b.n	8002e42 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00e      	beq.n	8002dce <osThreadNew+0xca>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b5b      	cmp	r3, #91	; 0x5b
 8002db6:	d90a      	bls.n	8002dce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d006      	beq.n	8002dce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <osThreadNew+0xca>
        mem = 1;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	623b      	str	r3, [r7, #32]
 8002dcc:	e010      	b.n	8002df0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10c      	bne.n	8002df0 <osThreadNew+0xec>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d108      	bne.n	8002df0 <osThreadNew+0xec>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d104      	bne.n	8002df0 <osThreadNew+0xec>
          mem = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	e001      	b.n	8002df0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d110      	bne.n	8002e18 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dfe:	9202      	str	r2, [sp, #8]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f001 f9b3 	bl	8004178 <xTaskCreateStatic>
 8002e12:	4603      	mov	r3, r0
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	e013      	b.n	8002e40 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d110      	bne.n	8002e40 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	f107 0310 	add.w	r3, r7, #16
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f001 f9fb 	bl	800422c <xTaskCreate>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <osThreadNew+0x13c>
          hTask = NULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e40:	693b      	ldr	r3, [r7, #16]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3730      	adds	r7, #48	; 0x30
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000094 	.word	0x20000094

08002e50 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e58:	f3ef 8305 	mrs	r3, IPSR
 8002e5c:	613b      	str	r3, [r7, #16]
  return(result);
 8002e5e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10f      	bne.n	8002e84 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e64:	f3ef 8310 	mrs	r3, PRIMASK
 8002e68:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e70:	f3ef 8311 	mrs	r3, BASEPRI
 8002e74:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <osDelay+0x3c>
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <osDelay+0x58>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d103      	bne.n	8002e8c <osDelay+0x3c>
    stat = osErrorISR;
 8002e84:	f06f 0305 	mvn.w	r3, #5
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e007      	b.n	8002e9c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f001 fb0c 	bl	80044b4 <vTaskDelay>
    }
  }

  return (stat);
 8002e9c:	697b      	ldr	r3, [r7, #20]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000094 	.word	0x20000094

08002eac <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eb8:	f3ef 8305 	mrs	r3, IPSR
 8002ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8002ebe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f040 8085 	bne.w	8002fd0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eca:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ed6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <osMutexNew+0x3a>
 8002ede:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <osMutexNew+0x130>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d074      	beq.n	8002fd0 <osMutexNew+0x124>
    if (attr != NULL) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <osMutexNew+0x48>
      type = attr->attr_bits;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	e001      	b.n	8002ef8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <osMutexNew+0x5c>
      rmtx = 1U;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e001      	b.n	8002f0c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d15c      	bne.n	8002fd0 <osMutexNew+0x124>
      mem = -1;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d015      	beq.n	8002f4e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <osMutexNew+0x8c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b4f      	cmp	r3, #79	; 0x4f
 8002f30:	d902      	bls.n	8002f38 <osMutexNew+0x8c>
          mem = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e00c      	b.n	8002f52 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d108      	bne.n	8002f52 <osMutexNew+0xa6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d104      	bne.n	8002f52 <osMutexNew+0xa6>
            mem = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e001      	b.n	8002f52 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d112      	bne.n	8002f7e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4619      	mov	r1, r3
 8002f64:	2004      	movs	r0, #4
 8002f66:	f000 fb18 	bl	800359a <xQueueCreateMutexStatic>
 8002f6a:	6278      	str	r0, [r7, #36]	; 0x24
 8002f6c:	e016      	b.n	8002f9c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4619      	mov	r1, r3
 8002f74:	2001      	movs	r0, #1
 8002f76:	f000 fb10 	bl	800359a <xQueueCreateMutexStatic>
 8002f7a:	6278      	str	r0, [r7, #36]	; 0x24
 8002f7c:	e00e      	b.n	8002f9c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8002f8a:	2004      	movs	r0, #4
 8002f8c:	f000 faed 	bl	800356a <xQueueCreateMutex>
 8002f90:	6278      	str	r0, [r7, #36]	; 0x24
 8002f92:	e003      	b.n	8002f9c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8002f94:	2001      	movs	r0, #1
 8002f96:	f000 fae8 	bl	800356a <xQueueCreateMutex>
 8002f9a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <osMutexNew+0x110>
        if (attr != NULL) {
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <osMutexNew+0x104>
          name = attr->name;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e001      	b.n	8002fb4 <osMutexNew+0x108>
        } else {
          name = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8002fb4:	6979      	ldr	r1, [r7, #20]
 8002fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fb8:	f001 f882 	bl	80040c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <osMutexNew+0x124>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3728      	adds	r7, #40	; 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000094 	.word	0x20000094

08002fe0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	; 0x30
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ff0:	f3ef 8305 	mrs	r3, IPSR
 8002ff4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ff6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d170      	bne.n	80030de <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8003000:	617b      	str	r3, [r7, #20]
  return(result);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003008:	f3ef 8311 	mrs	r3, BASEPRI
 800300c:	613b      	str	r3, [r7, #16]
  return(result);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <osMessageQueueNew+0x3c>
 8003014:	4b34      	ldr	r3, [pc, #208]	; (80030e8 <osMessageQueueNew+0x108>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d060      	beq.n	80030de <osMessageQueueNew+0xfe>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d05d      	beq.n	80030de <osMessageQueueNew+0xfe>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d05a      	beq.n	80030de <osMessageQueueNew+0xfe>
    mem = -1;
 8003028:	f04f 33ff 	mov.w	r3, #4294967295
 800302c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d029      	beq.n	8003088 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d012      	beq.n	8003062 <osMessageQueueNew+0x82>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2b4f      	cmp	r3, #79	; 0x4f
 8003042:	d90e      	bls.n	8003062 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <osMessageQueueNew+0x82>
        mem = 1;
 800305c:	2301      	movs	r3, #1
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	e014      	b.n	800308c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d110      	bne.n	800308c <osMessageQueueNew+0xac>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10c      	bne.n	800308c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003076:	2b00      	cmp	r3, #0
 8003078:	d108      	bne.n	800308c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d104      	bne.n	800308c <osMessageQueueNew+0xac>
          mem = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
 8003086:	e001      	b.n	800308c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d10c      	bne.n	80030ac <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6899      	ldr	r1, [r3, #8]
 800309a:	2300      	movs	r3, #0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	460b      	mov	r3, r1
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f972 	bl	800338c <xQueueGenericCreateStatic>
 80030a8:	6278      	str	r0, [r7, #36]	; 0x24
 80030aa:	e008      	b.n	80030be <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80030b2:	2200      	movs	r2, #0
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f9db 	bl	8003472 <xQueueGenericCreate>
 80030bc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00c      	beq.n	80030de <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	e001      	b.n	80030d6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80030d6:	69f9      	ldr	r1, [r7, #28]
 80030d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030da:	f000 fff1 	bl	80040c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3728      	adds	r7, #40	; 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000094 	.word	0x20000094

080030ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a07      	ldr	r2, [pc, #28]	; (8003118 <vApplicationGetIdleTaskMemory+0x2c>)
 80030fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4a06      	ldr	r2, [pc, #24]	; (800311c <vApplicationGetIdleTaskMemory+0x30>)
 8003102:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2280      	movs	r2, #128	; 0x80
 8003108:	601a      	str	r2, [r3, #0]
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20000098 	.word	0x20000098
 800311c:	200000f4 	.word	0x200000f4

08003120 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a07      	ldr	r2, [pc, #28]	; (800314c <vApplicationGetTimerTaskMemory+0x2c>)
 8003130:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4a06      	ldr	r2, [pc, #24]	; (8003150 <vApplicationGetTimerTaskMemory+0x30>)
 8003136:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313e:	601a      	str	r2, [r3, #0]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	200002f4 	.word	0x200002f4
 8003150:	20000350 	.word	0x20000350

08003154 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f103 0208 	add.w	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f04f 32ff 	mov.w	r2, #4294967295
 800316c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f103 0208 	add.w	r2, r3, #8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f103 0208 	add.w	r2, r3, #8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	601a      	str	r2, [r3, #0]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d103      	bne.n	8003216 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e00c      	b.n	8003230 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3308      	adds	r3, #8
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e002      	b.n	8003224 <vListInsert+0x2e>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	d2f6      	bcs.n	800321e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	601a      	str	r2, [r3, #0]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6892      	ldr	r2, [r2, #8]
 800327e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6852      	ldr	r2, [r2, #4]
 8003288:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d103      	bne.n	800329c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	1e5a      	subs	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	e7fe      	b.n	80032e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80032e4:	f002 fb9a 	bl	8005a1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	68f9      	ldr	r1, [r7, #12]
 80032f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	441a      	add	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	3b01      	subs	r3, #1
 8003316:	68f9      	ldr	r1, [r7, #12]
 8003318:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	441a      	add	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	22ff      	movs	r2, #255	; 0xff
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	22ff      	movs	r2, #255	; 0xff
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d114      	bne.n	8003364 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01a      	beq.n	8003378 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3310      	adds	r3, #16
 8003346:	4618      	mov	r0, r3
 8003348:	f001 fb68 	bl	8004a1c <xTaskRemoveFromEventList>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <xQueueGenericReset+0xcc>)
 8003354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	e009      	b.n	8003378 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3310      	adds	r3, #16
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fef3 	bl	8003154 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3324      	adds	r3, #36	; 0x24
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff feee 	bl	8003154 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003378:	f002 fb7e 	bl	8005a78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800337c:	2301      	movs	r3, #1
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08e      	sub	sp, #56	; 0x38
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <xQueueGenericCreateStatic+0x28>
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b2:	e7fe      	b.n	80033b2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <xQueueGenericCreateStatic+0x42>
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
 80033cc:	e7fe      	b.n	80033cc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <xQueueGenericCreateStatic+0x4e>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <xQueueGenericCreateStatic+0x52>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <xQueueGenericCreateStatic+0x54>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <xQueueGenericCreateStatic+0x6c>
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	623b      	str	r3, [r7, #32]
 80033f6:	e7fe      	b.n	80033f6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <xQueueGenericCreateStatic+0x78>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <xQueueGenericCreateStatic+0x7c>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <xQueueGenericCreateStatic+0x7e>
 8003408:	2300      	movs	r3, #0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <xQueueGenericCreateStatic+0x96>
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	e7fe      	b.n	8003420 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003422:	2350      	movs	r3, #80	; 0x50
 8003424:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b50      	cmp	r3, #80	; 0x50
 800342a:	d009      	beq.n	8003440 <xQueueGenericCreateStatic+0xb4>
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	e7fe      	b.n	800343e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003440:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003454:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f844 	bl	80034f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800346a:	4618      	mov	r0, r3
 800346c:	3730      	adds	r7, #48	; 0x30
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003472:	b580      	push	{r7, lr}
 8003474:	b08a      	sub	sp, #40	; 0x28
 8003476:	af02      	add	r7, sp, #8
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	4613      	mov	r3, r2
 800347e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <xQueueGenericCreate+0x28>
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	e7fe      	b.n	8003498 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	e004      	b.n	80034b0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	3350      	adds	r3, #80	; 0x50
 80034b4:	4618      	mov	r0, r3
 80034b6:	f002 fbcb 	bl	8005c50 <pvPortMalloc>
 80034ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d011      	beq.n	80034e6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	3350      	adds	r3, #80	; 0x50
 80034ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034d4:	79fa      	ldrb	r2, [r7, #7]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f805 	bl	80034f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034e6:	69bb      	ldr	r3, [r7, #24]
	}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e002      	b.n	8003512 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800351e:	2101      	movs	r1, #1
 8003520:	69b8      	ldr	r0, [r7, #24]
 8003522:	f7ff fecb 	bl	80032bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00e      	beq.n	8003562 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003556:	2300      	movs	r3, #0
 8003558:	2200      	movs	r2, #0
 800355a:	2100      	movs	r1, #0
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f837 	bl	80035d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003574:	2301      	movs	r3, #1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	461a      	mov	r2, r3
 8003580:	6939      	ldr	r1, [r7, #16]
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7ff ff75 	bl	8003472 <xQueueGenericCreate>
 8003588:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff ffd3 	bl	8003536 <prvInitialiseMutex>

		return xNewQueue;
 8003590:	68fb      	ldr	r3, [r7, #12]
	}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800359a:	b580      	push	{r7, lr}
 800359c:	b088      	sub	sp, #32
 800359e:	af02      	add	r7, sp, #8
 80035a0:	4603      	mov	r3, r0
 80035a2:	6039      	str	r1, [r7, #0]
 80035a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80035a6:	2301      	movs	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2200      	movs	r2, #0
 80035b6:	6939      	ldr	r1, [r7, #16]
 80035b8:	6978      	ldr	r0, [r7, #20]
 80035ba:	f7ff fee7 	bl	800338c <xQueueGenericCreateStatic>
 80035be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff ffb8 	bl	8003536 <prvInitialiseMutex>

		return xNewQueue;
 80035c6:	68fb      	ldr	r3, [r7, #12]
	}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08e      	sub	sp, #56	; 0x38
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035de:	2300      	movs	r3, #0
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <xQueueGenericSend+0x30>
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035fe:	e7fe      	b.n	80035fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <xQueueGenericSend+0x3e>
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <xQueueGenericSend+0x42>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <xQueueGenericSend+0x44>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <xQueueGenericSend+0x5c>
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	e7fe      	b.n	800362a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d103      	bne.n	800363a <xQueueGenericSend+0x6a>
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <xQueueGenericSend+0x6e>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <xQueueGenericSend+0x70>
 800363e:	2300      	movs	r3, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <xQueueGenericSend+0x88>
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	e7fe      	b.n	8003656 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003658:	f001 fb96 	bl	8004d88 <xTaskGetSchedulerState>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <xQueueGenericSend+0x98>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <xQueueGenericSend+0x9c>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <xQueueGenericSend+0x9e>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <xQueueGenericSend+0xb6>
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	e7fe      	b.n	8003684 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003686:	f002 f9c9 	bl	8005a1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <xQueueGenericSend+0xcc>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d129      	bne.n	80036f0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036a2:	f000 fbfd 	bl	8003ea0 <prvCopyDataToQueue>
 80036a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d010      	beq.n	80036d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	3324      	adds	r3, #36	; 0x24
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 f9b1 	bl	8004a1c <xTaskRemoveFromEventList>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036c0:	4b3f      	ldr	r3, [pc, #252]	; (80037c0 <xQueueGenericSend+0x1f0>)
 80036c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	e00a      	b.n	80036e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <xQueueGenericSend+0x1f0>)
 80036da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036e8:	f002 f9c6 	bl	8005a78 <vPortExitCritical>
				return pdPASS;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e063      	b.n	80037b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036f6:	f002 f9bf 	bl	8005a78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e05c      	b.n	80037b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	2b00      	cmp	r3, #0
 8003702:	d106      	bne.n	8003712 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4618      	mov	r0, r3
 800370a:	f001 f9e9 	bl	8004ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800370e:	2301      	movs	r3, #1
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003712:	f002 f9b1 	bl	8005a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003716:	f000 ff65 	bl	80045e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800371a:	f002 f97f 	bl	8005a1c <vPortEnterCritical>
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003724:	b25b      	sxtb	r3, r3
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d103      	bne.n	8003734 <xQueueGenericSend+0x164>
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800373a:	b25b      	sxtb	r3, r3
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d103      	bne.n	800374a <xQueueGenericSend+0x17a>
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800374a:	f002 f995 	bl	8005a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800374e:	1d3a      	adds	r2, r7, #4
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f001 f9d8 	bl	8004b0c <xTaskCheckForTimeOut>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d124      	bne.n	80037ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003764:	f000 fc94 	bl	8004090 <prvIsQueueFull>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	3310      	adds	r3, #16
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f001 f902 	bl	8004980 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800377c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377e:	f000 fc1f 	bl	8003fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003782:	f000 ff3d 	bl	8004600 <xTaskResumeAll>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	f47f af7c 	bne.w	8003686 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <xQueueGenericSend+0x1f0>)
 8003790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	e772      	b.n	8003686 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037a2:	f000 fc0d 	bl	8003fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037a6:	f000 ff2b 	bl	8004600 <xTaskResumeAll>
 80037aa:	e76c      	b.n	8003686 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ae:	f000 fc07 	bl	8003fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037b2:	f000 ff25 	bl	8004600 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3738      	adds	r7, #56	; 0x38
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	e000ed04 	.word	0xe000ed04

080037c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08e      	sub	sp, #56	; 0x38
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <xQueueGenericSendFromISR+0x2c>
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	e7fe      	b.n	80037ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <xQueueGenericSendFromISR+0x3a>
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <xQueueGenericSendFromISR+0x3e>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <xQueueGenericSendFromISR+0x40>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <xQueueGenericSendFromISR+0x58>
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	623b      	str	r3, [r7, #32]
 800381a:	e7fe      	b.n	800381a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d103      	bne.n	800382a <xQueueGenericSendFromISR+0x66>
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <xQueueGenericSendFromISR+0x6a>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueGenericSendFromISR+0x6c>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <xQueueGenericSendFromISR+0x84>
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e7fe      	b.n	8003846 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003848:	f002 f9c4 	bl	8005bd4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800384c:	f3ef 8211 	mrs	r2, BASEPRI
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	61ba      	str	r2, [r7, #24]
 8003862:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003864:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	429a      	cmp	r2, r3
 8003872:	d302      	bcc.n	800387a <xQueueGenericSendFromISR+0xb6>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d12c      	bne.n	80038d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388a:	f000 fb09 	bl	8003ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800388e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d112      	bne.n	80038be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d016      	beq.n	80038ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	3324      	adds	r3, #36	; 0x24
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 f8b9 	bl	8004a1c <xTaskRemoveFromEventList>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00e      	beq.n	80038ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e007      	b.n	80038ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038c2:	3301      	adds	r3, #1
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	b25a      	sxtb	r2, r3
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038ce:	2301      	movs	r3, #1
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80038d2:	e001      	b.n	80038d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3738      	adds	r7, #56	; 0x38
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	; 0x30
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <xQueueReceive+0x2e>
	__asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	e7fe      	b.n	8003918 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <xQueueReceive+0x3c>
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <xQueueReceive+0x40>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <xQueueReceive+0x42>
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <xQueueReceive+0x5a>
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	e7fe      	b.n	8003944 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003946:	f001 fa1f 	bl	8004d88 <xTaskGetSchedulerState>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <xQueueReceive+0x6a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <xQueueReceive+0x6e>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <xQueueReceive+0x70>
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <xQueueReceive+0x88>
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	e7fe      	b.n	8003972 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003974:	f002 f852 	bl	8005a1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01f      	beq.n	80039c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003988:	f000 faf4 	bl	8003f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	1e5a      	subs	r2, r3, #1
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00f      	beq.n	80039bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	3310      	adds	r3, #16
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 f83b 	bl	8004a1c <xTaskRemoveFromEventList>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039ac:	4b3c      	ldr	r3, [pc, #240]	; (8003aa0 <xQueueReceive+0x1b4>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039bc:	f002 f85c 	bl	8005a78 <vPortExitCritical>
				return pdPASS;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e069      	b.n	8003a98 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ca:	f002 f855 	bl	8005a78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e062      	b.n	8003a98 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039d8:	f107 0310 	add.w	r3, r7, #16
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 f87f 	bl	8004ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039e2:	2301      	movs	r3, #1
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039e6:	f002 f847 	bl	8005a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ea:	f000 fdfb 	bl	80045e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039ee:	f002 f815 	bl	8005a1c <vPortEnterCritical>
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039f8:	b25b      	sxtb	r3, r3
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fe:	d103      	bne.n	8003a08 <xQueueReceive+0x11c>
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d103      	bne.n	8003a1e <xQueueReceive+0x132>
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a1e:	f002 f82b 	bl	8005a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a22:	1d3a      	adds	r2, r7, #4
 8003a24:	f107 0310 	add.w	r3, r7, #16
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 f86e 	bl	8004b0c <xTaskCheckForTimeOut>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d123      	bne.n	8003a7e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a38:	f000 fb14 	bl	8004064 <prvIsQueueEmpty>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d017      	beq.n	8003a72 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	3324      	adds	r3, #36	; 0x24
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 ff98 	bl	8004980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a52:	f000 fab5 	bl	8003fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a56:	f000 fdd3 	bl	8004600 <xTaskResumeAll>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d189      	bne.n	8003974 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <xQueueReceive+0x1b4>)
 8003a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	e780      	b.n	8003974 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a74:	f000 faa4 	bl	8003fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a78:	f000 fdc2 	bl	8004600 <xTaskResumeAll>
 8003a7c:	e77a      	b.n	8003974 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a80:	f000 fa9e 	bl	8003fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a84:	f000 fdbc 	bl	8004600 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8a:	f000 faeb 	bl	8004064 <prvIsQueueEmpty>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f43f af6f 	beq.w	8003974 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3730      	adds	r7, #48	; 0x30
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08e      	sub	sp, #56	; 0x38
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <xQueueSemaphoreTake+0x30>
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	e7fe      	b.n	8003ad2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <xQueueSemaphoreTake+0x4c>
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	e7fe      	b.n	8003aee <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003af0:	f001 f94a 	bl	8004d88 <xTaskGetSchedulerState>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d102      	bne.n	8003b00 <xQueueSemaphoreTake+0x5c>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <xQueueSemaphoreTake+0x60>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <xQueueSemaphoreTake+0x62>
 8003b04:	2300      	movs	r3, #0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <xQueueSemaphoreTake+0x7a>
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	e7fe      	b.n	8003b1c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b1e:	f001 ff7d 	bl	8005a1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d024      	beq.n	8003b78 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	1e5a      	subs	r2, r3, #1
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b3e:	f001 fa95 	bl	800506c <pvTaskIncrementMutexHeldCount>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00f      	beq.n	8003b70 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	3310      	adds	r3, #16
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 ff61 	bl	8004a1c <xTaskRemoveFromEventList>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <xQueueSemaphoreTake+0x20c>)
 8003b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b70:	f001 ff82 	bl	8005a78 <vPortExitCritical>
				return pdPASS;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e096      	b.n	8003ca6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d110      	bne.n	8003ba0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <xQueueSemaphoreTake+0xf4>
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e7fe      	b.n	8003b96 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003b98:	f001 ff6e 	bl	8005a78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e082      	b.n	8003ca6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 ff98 	bl	8004ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bb4:	f001 ff60 	bl	8005a78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bb8:	f000 fd14 	bl	80045e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bbc:	f001 ff2e 	bl	8005a1c <vPortEnterCritical>
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bc6:	b25b      	sxtb	r3, r3
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d103      	bne.n	8003bd6 <xQueueSemaphoreTake+0x132>
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d103      	bne.n	8003bec <xQueueSemaphoreTake+0x148>
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bec:	f001 ff44 	bl	8005a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bf0:	463a      	mov	r2, r7
 8003bf2:	f107 030c 	add.w	r3, r7, #12
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 ff87 	bl	8004b0c <xTaskCheckForTimeOut>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d132      	bne.n	8003c6a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c06:	f000 fa2d 	bl	8004064 <prvIsQueueEmpty>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d026      	beq.n	8003c5e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003c18:	f001 ff00 	bl	8005a1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f8cf 	bl	8004dc4 <xTaskPriorityInherit>
 8003c26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003c28:	f001 ff26 	bl	8005a78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2e:	3324      	adds	r3, #36	; 0x24
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fea3 	bl	8004980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c3c:	f000 f9c0 	bl	8003fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c40:	f000 fcde 	bl	8004600 <xTaskResumeAll>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f47f af69 	bne.w	8003b1e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003c4c:	4b18      	ldr	r3, [pc, #96]	; (8003cb0 <xQueueSemaphoreTake+0x20c>)
 8003c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	e75f      	b.n	8003b1e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003c5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c60:	f000 f9ae 	bl	8003fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c64:	f000 fccc 	bl	8004600 <xTaskResumeAll>
 8003c68:	e759      	b.n	8003b1e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003c6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c6c:	f000 f9a8 	bl	8003fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c70:	f000 fcc6 	bl	8004600 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c76:	f000 f9f5 	bl	8004064 <prvIsQueueEmpty>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f43f af4e 	beq.w	8003b1e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003c88:	f001 fec8 	bl	8005a1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003c8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c8e:	f000 f8ef 	bl	8003e70 <prvGetDisinheritPriorityAfterTimeout>
 8003c92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 f966 	bl	8004f6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ca0:	f001 feea 	bl	8005a78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ca4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3738      	adds	r7, #56	; 0x38
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08e      	sub	sp, #56	; 0x38
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <xQueuePeek+0x2e>
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce0:	e7fe      	b.n	8003ce0 <xQueuePeek+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d103      	bne.n	8003cf0 <xQueuePeek+0x3c>
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <xQueuePeek+0x40>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <xQueuePeek+0x42>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <xQueuePeek+0x5a>
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	e7fe      	b.n	8003d0c <xQueuePeek+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d0e:	f001 f83b 	bl	8004d88 <xTaskGetSchedulerState>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <xQueuePeek+0x6a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <xQueuePeek+0x6e>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <xQueuePeek+0x70>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d109      	bne.n	8003d3c <xQueuePeek+0x88>
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	e7fe      	b.n	8003d3a <xQueuePeek+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d3c:	f001 fe6e 	bl	8005a1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d021      	beq.n	8003d90 <xQueuePeek+0xdc>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d56:	f000 f90d 	bl	8003f74 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d5e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00f      	beq.n	8003d88 <xQueuePeek+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fe55 	bl	8004a1c <xTaskRemoveFromEventList>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <xQueuePeek+0xd4>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d78:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <xQueuePeek+0x1b8>)
 8003d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d88:	f001 fe76 	bl	8005a78 <vPortExitCritical>
				return pdPASS;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e069      	b.n	8003e64 <xQueuePeek+0x1b0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <xQueuePeek+0xea>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d96:	f001 fe6f 	bl	8005a78 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e062      	b.n	8003e64 <xQueuePeek+0x1b0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <xQueuePeek+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fe99 	bl	8004ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dae:	2301      	movs	r3, #1
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003db2:	f001 fe61 	bl	8005a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003db6:	f000 fc15 	bl	80045e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dba:	f001 fe2f 	bl	8005a1c <vPortEnterCritical>
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dc4:	b25b      	sxtb	r3, r3
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d103      	bne.n	8003dd4 <xQueuePeek+0x120>
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dda:	b25b      	sxtb	r3, r3
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d103      	bne.n	8003dea <xQueuePeek+0x136>
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dea:	f001 fe45 	bl	8005a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dee:	1d3a      	adds	r2, r7, #4
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fe88 	bl	8004b0c <xTaskCheckForTimeOut>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d123      	bne.n	8003e4a <xQueuePeek+0x196>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e04:	f000 f92e 	bl	8004064 <prvIsQueueEmpty>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d017      	beq.n	8003e3e <xQueuePeek+0x18a>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	3324      	adds	r3, #36	; 0x24
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fdb2 	bl	8004980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e1e:	f000 f8cf 	bl	8003fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e22:	f000 fbed 	bl	8004600 <xTaskResumeAll>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d187      	bne.n	8003d3c <xQueuePeek+0x88>
				{
					portYIELD_WITHIN_API();
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <xQueuePeek+0x1b8>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	e77e      	b.n	8003d3c <xQueuePeek+0x88>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8003e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e40:	f000 f8be 	bl	8003fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e44:	f000 fbdc 	bl	8004600 <xTaskResumeAll>
 8003e48:	e778      	b.n	8003d3c <xQueuePeek+0x88>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8003e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e4c:	f000 f8b8 	bl	8003fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e50:	f000 fbd6 	bl	8004600 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e56:	f000 f905 	bl	8004064 <prvIsQueueEmpty>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f43f af6d 	beq.w	8003d3c <xQueuePeek+0x88>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3738      	adds	r7, #56	; 0x38
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e001      	b.n	8003e92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e92:	68fb      	ldr	r3, [r7, #12]
	}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10d      	bne.n	8003eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d14d      	bne.n	8003f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 ffe2 	bl	8004e94 <xTaskPriorityDisinherit>
 8003ed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	e043      	b.n	8003f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d119      	bne.n	8003f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6858      	ldr	r0, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	f002 f8b0 	bl	8006050 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	441a      	add	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d32b      	bcc.n	8003f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	e026      	b.n	8003f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68d8      	ldr	r0, [r3, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	f002 f896 	bl	8006050 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	425b      	negs	r3, r3
 8003f2e:	441a      	add	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d207      	bcs.n	8003f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	425b      	negs	r3, r3
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d105      	bne.n	8003f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f6a:	697b      	ldr	r3, [r7, #20]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	441a      	add	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d303      	bcc.n	8003fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68d9      	ldr	r1, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f002 f84c 	bl	8006050 <memcpy>
	}
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fc8:	f001 fd28 	bl	8005a1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fd4:	e011      	b.n	8003ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d012      	beq.n	8004004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3324      	adds	r3, #36	; 0x24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fd1a 	bl	8004a1c <xTaskRemoveFromEventList>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fee:	f000 fded 	bl	8004bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	dce9      	bgt.n	8003fd6 <prvUnlockQueue+0x16>
 8004002:	e000      	b.n	8004006 <prvUnlockQueue+0x46>
					break;
 8004004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	22ff      	movs	r2, #255	; 0xff
 800400a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800400e:	f001 fd33 	bl	8005a78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004012:	f001 fd03 	bl	8005a1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800401c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800401e:	e011      	b.n	8004044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d012      	beq.n	800404e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3310      	adds	r3, #16
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fcf5 	bl	8004a1c <xTaskRemoveFromEventList>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004038:	f000 fdc8 	bl	8004bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800403c:	7bbb      	ldrb	r3, [r7, #14]
 800403e:	3b01      	subs	r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004048:	2b00      	cmp	r3, #0
 800404a:	dce9      	bgt.n	8004020 <prvUnlockQueue+0x60>
 800404c:	e000      	b.n	8004050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800404e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	22ff      	movs	r2, #255	; 0xff
 8004054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004058:	f001 fd0e 	bl	8005a78 <vPortExitCritical>
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800406c:	f001 fcd6 	bl	8005a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004078:	2301      	movs	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e001      	b.n	8004082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004082:	f001 fcf9 	bl	8005a78 <vPortExitCritical>

	return xReturn;
 8004086:	68fb      	ldr	r3, [r7, #12]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004098:	f001 fcc0 	bl	8005a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d102      	bne.n	80040ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e001      	b.n	80040b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040b2:	f001 fce1 	bl	8005a78 <vPortExitCritical>

	return xReturn;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e014      	b.n	80040fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <vQueueAddToRegistry+0x4c>)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040dc:	490b      	ldr	r1, [pc, #44]	; (800410c <vQueueAddToRegistry+0x4c>)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040e6:	4a09      	ldr	r2, [pc, #36]	; (800410c <vQueueAddToRegistry+0x4c>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040f2:	e005      	b.n	8004100 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3301      	adds	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b07      	cmp	r3, #7
 80040fe:	d9e7      	bls.n	80040d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	20004a64 	.word	0x20004a64

08004110 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004120:	f001 fc7c 	bl	8005a1c <vPortEnterCritical>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800412a:	b25b      	sxtb	r3, r3
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d103      	bne.n	800413a <vQueueWaitForMessageRestricted+0x2a>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004140:	b25b      	sxtb	r3, r3
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d103      	bne.n	8004150 <vQueueWaitForMessageRestricted+0x40>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004150:	f001 fc92 	bl	8005a78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	3324      	adds	r3, #36	; 0x24
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fc2f 	bl	80049c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800416a:	6978      	ldr	r0, [r7, #20]
 800416c:	f7ff ff28 	bl	8003fc0 <prvUnlockQueue>
	}
 8004170:	bf00      	nop
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	; 0x38
 800417c:	af04      	add	r7, sp, #16
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <xTaskCreateStatic+0x28>
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	e7fe      	b.n	800419e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <xTaskCreateStatic+0x42>
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e7fe      	b.n	80041b8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041ba:	235c      	movs	r3, #92	; 0x5c
 80041bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b5c      	cmp	r3, #92	; 0x5c
 80041c2:	d009      	beq.n	80041d8 <xTaskCreateStatic+0x60>
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	e7fe      	b.n	80041d6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01e      	beq.n	800421e <xTaskCreateStatic+0xa6>
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01b      	beq.n	800421e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041f8:	2300      	movs	r3, #0
 80041fa:	9303      	str	r3, [sp, #12]
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	9302      	str	r3, [sp, #8]
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f850 	bl	80042b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004218:	f000 f8dc 	bl	80043d4 <prvAddNewTaskToReadyList>
 800421c:	e001      	b.n	8004222 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004222:	697b      	ldr	r3, [r7, #20]
	}
 8004224:	4618      	mov	r0, r3
 8004226:	3728      	adds	r7, #40	; 0x28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	; 0x30
 8004230:	af04      	add	r7, sp, #16
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fd05 	bl	8005c50 <pvPortMalloc>
 8004246:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00e      	beq.n	800426c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800424e:	205c      	movs	r0, #92	; 0x5c
 8004250:	f001 fcfe 	bl	8005c50 <pvPortMalloc>
 8004254:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
 8004262:	e005      	b.n	8004270 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004264:	6978      	ldr	r0, [r7, #20]
 8004266:	f001 fdb5 	bl	8005dd4 <vPortFree>
 800426a:	e001      	b.n	8004270 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d017      	beq.n	80042a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	2300      	movs	r3, #0
 8004282:	9303      	str	r3, [sp, #12]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	9302      	str	r3, [sp, #8]
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f80e 	bl	80042b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800429a:	69f8      	ldr	r0, [r7, #28]
 800429c:	f000 f89a 	bl	80043d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042a0:	2301      	movs	r3, #1
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e002      	b.n	80042ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042ac:	69bb      	ldr	r3, [r7, #24]
	}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b088      	sub	sp, #32
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	461a      	mov	r2, r3
 80042ce:	21a5      	movs	r1, #165	; 0xa5
 80042d0:	f001 fec9 	bl	8006066 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042de:	3b01      	subs	r3, #1
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f023 0307 	bic.w	r3, r3, #7
 80042ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <prvInitialiseNewTask+0x56>
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	e7fe      	b.n	800430a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01f      	beq.n	8004352 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e012      	b.n	800433e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	7819      	ldrb	r1, [r3, #0]
 8004320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	3334      	adds	r3, #52	; 0x34
 8004328:	460a      	mov	r2, r1
 800432a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2b0f      	cmp	r3, #15
 8004342:	d9e9      	bls.n	8004318 <prvInitialiseNewTask+0x62>
 8004344:	e000      	b.n	8004348 <prvInitialiseNewTask+0x92>
			{
				break;
 8004346:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004350:	e003      	b.n	800435a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	2b37      	cmp	r3, #55	; 0x37
 800435e:	d901      	bls.n	8004364 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004360:	2337      	movs	r3, #55	; 0x37
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	2200      	movs	r2, #0
 8004374:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	3304      	adds	r3, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe ff0a 	bl	8003194 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	3318      	adds	r3, #24
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe ff05 	bl	8003194 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	2200      	movs	r2, #0
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68f9      	ldr	r1, [r7, #12]
 80043b2:	69b8      	ldr	r0, [r7, #24]
 80043b4:	f001 fa08 	bl	80057c8 <pxPortInitialiseStack>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ca:	bf00      	nop
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043dc:	f001 fb1e 	bl	8005a1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a2c      	ldr	r2, [pc, #176]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 80043e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ea:	4b2c      	ldr	r3, [pc, #176]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043f2:	4a2a      	ldr	r2, [pc, #168]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043f8:	4b27      	ldr	r3, [pc, #156]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d110      	bne.n	8004422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004400:	f000 fc08 	bl	8004c14 <prvInitialiseTaskLists>
 8004404:	e00d      	b.n	8004422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <prvAddNewTaskToReadyList+0xcc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	429a      	cmp	r2, r3
 800441a:	d802      	bhi.n	8004422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 800442a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800442c:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <prvAddNewTaskToReadyList+0xd4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d903      	bls.n	8004448 <prvAddNewTaskToReadyList+0x74>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <prvAddNewTaskToReadyList+0xd4>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <prvAddNewTaskToReadyList+0xd8>)
 8004456:	441a      	add	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7fe fea5 	bl	80031ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004464:	f001 fb08 	bl	8005a78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <prvAddNewTaskToReadyList+0xcc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00e      	beq.n	800448e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	429a      	cmp	r2, r3
 800447c:	d207      	bcs.n	800448e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <prvAddNewTaskToReadyList+0xdc>)
 8004480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000c24 	.word	0x20000c24
 800449c:	20000750 	.word	0x20000750
 80044a0:	20000c30 	.word	0x20000c30
 80044a4:	20000c40 	.word	0x20000c40
 80044a8:	20000c2c 	.word	0x20000c2c
 80044ac:	20000754 	.word	0x20000754
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d016      	beq.n	80044f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044c6:	4b13      	ldr	r3, [pc, #76]	; (8004514 <vTaskDelay+0x60>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <vTaskDelay+0x2e>
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	e7fe      	b.n	80044e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80044e2:	f000 f87f 	bl	80045e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044e6:	2100      	movs	r1, #0
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fdd3 	bl	8005094 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044ee:	f000 f887 	bl	8004600 <xTaskResumeAll>
 80044f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80044fa:	4b07      	ldr	r3, [pc, #28]	; (8004518 <vTaskDelay+0x64>)
 80044fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000c4c 	.word	0x20000c4c
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800452a:	463a      	mov	r2, r7
 800452c:	1d39      	adds	r1, r7, #4
 800452e:	f107 0308 	add.w	r3, r7, #8
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fdda 	bl	80030ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004538:	6839      	ldr	r1, [r7, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	9202      	str	r2, [sp, #8]
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	2300      	movs	r3, #0
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	2300      	movs	r3, #0
 8004548:	460a      	mov	r2, r1
 800454a:	4920      	ldr	r1, [pc, #128]	; (80045cc <vTaskStartScheduler+0xb0>)
 800454c:	4820      	ldr	r0, [pc, #128]	; (80045d0 <vTaskStartScheduler+0xb4>)
 800454e:	f7ff fe13 	bl	8004178 <xTaskCreateStatic>
 8004552:	4602      	mov	r2, r0
 8004554:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <vTaskStartScheduler+0xb8>)
 8004556:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <vTaskStartScheduler+0xb8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004560:	2301      	movs	r3, #1
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	e001      	b.n	800456a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d102      	bne.n	8004576 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004570:	f000 fde4 	bl	800513c <xTimerCreateTimerTask>
 8004574:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d115      	bne.n	80045a8 <vTaskStartScheduler+0x8c>
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <vTaskStartScheduler+0xbc>)
 8004590:	f04f 32ff 	mov.w	r2, #4294967295
 8004594:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <vTaskStartScheduler+0xc0>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <vTaskStartScheduler+0xc4>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045a2:	f001 f99d 	bl	80058e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045a6:	e00d      	b.n	80045c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d109      	bne.n	80045c4 <vTaskStartScheduler+0xa8>
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e7fe      	b.n	80045c2 <vTaskStartScheduler+0xa6>
}
 80045c4:	bf00      	nop
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	08006be4 	.word	0x08006be4
 80045d0:	08004be5 	.word	0x08004be5
 80045d4:	20000c48 	.word	0x20000c48
 80045d8:	20000c44 	.word	0x20000c44
 80045dc:	20000c30 	.word	0x20000c30
 80045e0:	20000c28 	.word	0x20000c28

080045e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <vTaskSuspendAll+0x18>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	4a03      	ldr	r2, [pc, #12]	; (80045fc <vTaskSuspendAll+0x18>)
 80045f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80045f2:	bf00      	nop
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000c4c 	.word	0x20000c4c

08004600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <xTaskResumeAll+0x114>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <xTaskResumeAll+0x2a>
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	e7fe      	b.n	8004628 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800462a:	f001 f9f7 	bl	8005a1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800462e:	4b39      	ldr	r3, [pc, #228]	; (8004714 <xTaskResumeAll+0x114>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3b01      	subs	r3, #1
 8004634:	4a37      	ldr	r2, [pc, #220]	; (8004714 <xTaskResumeAll+0x114>)
 8004636:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004638:	4b36      	ldr	r3, [pc, #216]	; (8004714 <xTaskResumeAll+0x114>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d162      	bne.n	8004706 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <xTaskResumeAll+0x118>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d05e      	beq.n	8004706 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004648:	e02f      	b.n	80046aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464a:	4b34      	ldr	r3, [pc, #208]	; (800471c <xTaskResumeAll+0x11c>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3318      	adds	r3, #24
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe fe06 	bl	8003268 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe fe01 	bl	8003268 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466a:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <xTaskResumeAll+0x120>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d903      	bls.n	800467a <xTaskResumeAll+0x7a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <xTaskResumeAll+0x120>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4a27      	ldr	r2, [pc, #156]	; (8004724 <xTaskResumeAll+0x124>)
 8004688:	441a      	add	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7fe fd8c 	bl	80031ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <xTaskResumeAll+0x128>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d302      	bcc.n	80046aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80046a4:	4b21      	ldr	r3, [pc, #132]	; (800472c <xTaskResumeAll+0x12c>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <xTaskResumeAll+0x11c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1cb      	bne.n	800464a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046b8:	f000 fb46 	bl	8004d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80046bc:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <xTaskResumeAll+0x130>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d010      	beq.n	80046ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046c8:	f000 f846 	bl	8004758 <xTaskIncrementTick>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80046d2:	4b16      	ldr	r3, [pc, #88]	; (800472c <xTaskResumeAll+0x12c>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3b01      	subs	r3, #1
 80046dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f1      	bne.n	80046c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80046e4:	4b12      	ldr	r3, [pc, #72]	; (8004730 <xTaskResumeAll+0x130>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <xTaskResumeAll+0x12c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046f2:	2301      	movs	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046f6:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <xTaskResumeAll+0x134>)
 80046f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004706:	f001 f9b7 	bl	8005a78 <vPortExitCritical>

	return xAlreadyYielded;
 800470a:	68bb      	ldr	r3, [r7, #8]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20000c4c 	.word	0x20000c4c
 8004718:	20000c24 	.word	0x20000c24
 800471c:	20000be4 	.word	0x20000be4
 8004720:	20000c2c 	.word	0x20000c2c
 8004724:	20000754 	.word	0x20000754
 8004728:	20000750 	.word	0x20000750
 800472c:	20000c38 	.word	0x20000c38
 8004730:	20000c34 	.word	0x20000c34
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <xTaskGetTickCount+0x1c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004744:	687b      	ldr	r3, [r7, #4]
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000c28 	.word	0x20000c28

08004758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004762:	4b4e      	ldr	r3, [pc, #312]	; (800489c <xTaskIncrementTick+0x144>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 8088 	bne.w	800487c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800476c:	4b4c      	ldr	r3, [pc, #304]	; (80048a0 <xTaskIncrementTick+0x148>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004774:	4a4a      	ldr	r2, [pc, #296]	; (80048a0 <xTaskIncrementTick+0x148>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11f      	bne.n	80047c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004780:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <xTaskIncrementTick+0x14c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <xTaskIncrementTick+0x46>
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	e7fe      	b.n	800479c <xTaskIncrementTick+0x44>
 800479e:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	4b40      	ldr	r3, [pc, #256]	; (80048a8 <xTaskIncrementTick+0x150>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3e      	ldr	r2, [pc, #248]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4a3e      	ldr	r2, [pc, #248]	; (80048a8 <xTaskIncrementTick+0x150>)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b3e      	ldr	r3, [pc, #248]	; (80048ac <xTaskIncrementTick+0x154>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3301      	adds	r3, #1
 80047b8:	4a3c      	ldr	r2, [pc, #240]	; (80048ac <xTaskIncrementTick+0x154>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	f000 fac4 	bl	8004d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047c0:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d349      	bcc.n	800485e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ca:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d4:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047d6:	f04f 32ff 	mov.w	r2, #4294967295
 80047da:	601a      	str	r2, [r3, #0]
					break;
 80047dc:	e03f      	b.n	800485e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d203      	bcs.n	80047fe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047f6:	4a2e      	ldr	r2, [pc, #184]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047fc:	e02f      	b.n	800485e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3304      	adds	r3, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe fd30 	bl	8003268 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3318      	adds	r3, #24
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe fd27 	bl	8003268 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <xTaskIncrementTick+0x15c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d903      	bls.n	800482e <xTaskIncrementTick+0xd6>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <xTaskIncrementTick+0x15c>)
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <xTaskIncrementTick+0x160>)
 800483c:	441a      	add	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7fe fcb2 	bl	80031ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <xTaskIncrementTick+0x164>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	429a      	cmp	r2, r3
 8004856:	d3b8      	bcc.n	80047ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004858:	2301      	movs	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800485c:	e7b5      	b.n	80047ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800485e:	4b17      	ldr	r3, [pc, #92]	; (80048bc <xTaskIncrementTick+0x164>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4914      	ldr	r1, [pc, #80]	; (80048b8 <xTaskIncrementTick+0x160>)
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d907      	bls.n	8004886 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004876:	2301      	movs	r3, #1
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e004      	b.n	8004886 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800487c:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <xTaskIncrementTick+0x168>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <xTaskIncrementTick+0x168>)
 8004884:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <xTaskIncrementTick+0x16c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800488e:	2301      	movs	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000c4c 	.word	0x20000c4c
 80048a0:	20000c28 	.word	0x20000c28
 80048a4:	20000bdc 	.word	0x20000bdc
 80048a8:	20000be0 	.word	0x20000be0
 80048ac:	20000c3c 	.word	0x20000c3c
 80048b0:	20000c44 	.word	0x20000c44
 80048b4:	20000c2c 	.word	0x20000c2c
 80048b8:	20000754 	.word	0x20000754
 80048bc:	20000750 	.word	0x20000750
 80048c0:	20000c34 	.word	0x20000c34
 80048c4:	20000c38 	.word	0x20000c38

080048c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048ce:	4b27      	ldr	r3, [pc, #156]	; (800496c <vTaskSwitchContext+0xa4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048d6:	4b26      	ldr	r3, [pc, #152]	; (8004970 <vTaskSwitchContext+0xa8>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048dc:	e040      	b.n	8004960 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <vTaskSwitchContext+0xa8>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e4:	4b23      	ldr	r3, [pc, #140]	; (8004974 <vTaskSwitchContext+0xac>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e00f      	b.n	800490c <vTaskSwitchContext+0x44>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <vTaskSwitchContext+0x3e>
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	e7fe      	b.n	8004904 <vTaskSwitchContext+0x3c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b01      	subs	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	491a      	ldr	r1, [pc, #104]	; (8004978 <vTaskSwitchContext+0xb0>)
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0e5      	beq.n	80048ec <vTaskSwitchContext+0x24>
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4a13      	ldr	r2, [pc, #76]	; (8004978 <vTaskSwitchContext+0xb0>)
 800492c:	4413      	add	r3, r2
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3308      	adds	r3, #8
 8004942:	429a      	cmp	r2, r3
 8004944:	d104      	bne.n	8004950 <vTaskSwitchContext+0x88>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4a09      	ldr	r2, [pc, #36]	; (800497c <vTaskSwitchContext+0xb4>)
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4a06      	ldr	r2, [pc, #24]	; (8004974 <vTaskSwitchContext+0xac>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6013      	str	r3, [r2, #0]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	20000c4c 	.word	0x20000c4c
 8004970:	20000c38 	.word	0x20000c38
 8004974:	20000c2c 	.word	0x20000c2c
 8004978:	20000754 	.word	0x20000754
 800497c:	20000750 	.word	0x20000750

08004980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <vTaskPlaceOnEventList+0x24>
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	e7fe      	b.n	80049a2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <vTaskPlaceOnEventList+0x44>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3318      	adds	r3, #24
 80049aa:	4619      	mov	r1, r3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fe fc22 	bl	80031f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049b2:	2101      	movs	r1, #1
 80049b4:	6838      	ldr	r0, [r7, #0]
 80049b6:	f000 fb6d 	bl	8005094 <prvAddCurrentTaskToDelayedList>
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000750 	.word	0x20000750

080049c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <vTaskPlaceOnEventListRestricted+0x26>
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e7fe      	b.n	80049ec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <vTaskPlaceOnEventListRestricted+0x50>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3318      	adds	r3, #24
 80049f4:	4619      	mov	r1, r3
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7fe fbd9 	bl	80031ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
 8004a06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	68b8      	ldr	r0, [r7, #8]
 8004a0c:	f000 fb42 	bl	8005094 <prvAddCurrentTaskToDelayedList>
	}
 8004a10:	bf00      	nop
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000750 	.word	0x20000750

08004a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <xTaskRemoveFromEventList+0x2a>
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e7fe      	b.n	8004a44 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3318      	adds	r3, #24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fc0c 	bl	8003268 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <xTaskRemoveFromEventList+0xac>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11d      	bne.n	8004a94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe fc03 	bl	8003268 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a66:	4b19      	ldr	r3, [pc, #100]	; (8004acc <xTaskRemoveFromEventList+0xb0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d903      	bls.n	8004a76 <xTaskRemoveFromEventList+0x5a>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <xTaskRemoveFromEventList+0xb0>)
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <xTaskRemoveFromEventList+0xb4>)
 8004a84:	441a      	add	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f7fe fb8e 	bl	80031ae <vListInsertEnd>
 8004a92:	e005      	b.n	8004aa0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3318      	adds	r3, #24
 8004a98:	4619      	mov	r1, r3
 8004a9a:	480e      	ldr	r0, [pc, #56]	; (8004ad4 <xTaskRemoveFromEventList+0xb8>)
 8004a9c:	f7fe fb87 	bl	80031ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <xTaskRemoveFromEventList+0xbc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d905      	bls.n	8004aba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <xTaskRemoveFromEventList+0xc0>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e001      	b.n	8004abe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004abe:	697b      	ldr	r3, [r7, #20]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000c4c 	.word	0x20000c4c
 8004acc:	20000c2c 	.word	0x20000c2c
 8004ad0:	20000754 	.word	0x20000754
 8004ad4:	20000be4 	.word	0x20000be4
 8004ad8:	20000750 	.word	0x20000750
 8004adc:	20000c38 	.word	0x20000c38

08004ae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ae8:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <vTaskInternalSetTimeOutState+0x24>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <vTaskInternalSetTimeOutState+0x28>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	605a      	str	r2, [r3, #4]
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	20000c3c 	.word	0x20000c3c
 8004b08:	20000c28 	.word	0x20000c28

08004b0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <xTaskCheckForTimeOut+0x24>
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e7fe      	b.n	8004b2e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <xTaskCheckForTimeOut+0x3e>
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e7fe      	b.n	8004b48 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004b4a:	f000 ff67 	bl	8005a1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <xTaskCheckForTimeOut+0xb8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d102      	bne.n	8004b6e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	e023      	b.n	8004bb6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <xTaskCheckForTimeOut+0xbc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d007      	beq.n	8004b8a <xTaskCheckForTimeOut+0x7e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e015      	b.n	8004bb6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d20b      	bcs.n	8004bac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff9d 	bl	8004ae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	e004      	b.n	8004bb6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bb6:	f000 ff5f 	bl	8005a78 <vPortExitCritical>

	return xReturn;
 8004bba:	69fb      	ldr	r3, [r7, #28]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000c28 	.word	0x20000c28
 8004bc8:	20000c3c 	.word	0x20000c3c

08004bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <vTaskMissedYield+0x14>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000c38 	.word	0x20000c38

08004be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bec:	f000 f852 	bl	8004c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <prvIdleTask+0x28>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d9f9      	bls.n	8004bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <prvIdleTask+0x2c>)
 8004bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c08:	e7f0      	b.n	8004bec <prvIdleTask+0x8>
 8004c0a:	bf00      	nop
 8004c0c:	20000754 	.word	0x20000754
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
 8004c1e:	e00c      	b.n	8004c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <prvInitialiseTaskLists+0x60>)
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fa90 	bl	8003154 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3301      	adds	r3, #1
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b37      	cmp	r3, #55	; 0x37
 8004c3e:	d9ef      	bls.n	8004c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c40:	480d      	ldr	r0, [pc, #52]	; (8004c78 <prvInitialiseTaskLists+0x64>)
 8004c42:	f7fe fa87 	bl	8003154 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c46:	480d      	ldr	r0, [pc, #52]	; (8004c7c <prvInitialiseTaskLists+0x68>)
 8004c48:	f7fe fa84 	bl	8003154 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c4c:	480c      	ldr	r0, [pc, #48]	; (8004c80 <prvInitialiseTaskLists+0x6c>)
 8004c4e:	f7fe fa81 	bl	8003154 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c52:	480c      	ldr	r0, [pc, #48]	; (8004c84 <prvInitialiseTaskLists+0x70>)
 8004c54:	f7fe fa7e 	bl	8003154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c58:	480b      	ldr	r0, [pc, #44]	; (8004c88 <prvInitialiseTaskLists+0x74>)
 8004c5a:	f7fe fa7b 	bl	8003154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <prvInitialiseTaskLists+0x78>)
 8004c60:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <prvInitialiseTaskLists+0x64>)
 8004c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <prvInitialiseTaskLists+0x7c>)
 8004c66:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <prvInitialiseTaskLists+0x68>)
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000754 	.word	0x20000754
 8004c78:	20000bb4 	.word	0x20000bb4
 8004c7c:	20000bc8 	.word	0x20000bc8
 8004c80:	20000be4 	.word	0x20000be4
 8004c84:	20000bf8 	.word	0x20000bf8
 8004c88:	20000c10 	.word	0x20000c10
 8004c8c:	20000bdc 	.word	0x20000bdc
 8004c90:	20000be0 	.word	0x20000be0

08004c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c9a:	e019      	b.n	8004cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c9c:	f000 febe 	bl	8005a1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <prvCheckTasksWaitingTermination+0x4c>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe fadb 	bl	8003268 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <prvCheckTasksWaitingTermination+0x50>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <prvCheckTasksWaitingTermination+0x50>)
 8004cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <prvCheckTasksWaitingTermination+0x54>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <prvCheckTasksWaitingTermination+0x54>)
 8004cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cc6:	f000 fed7 	bl	8005a78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f80e 	bl	8004cec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <prvCheckTasksWaitingTermination+0x54>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e1      	bne.n	8004c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000bf8 	.word	0x20000bf8
 8004ce4:	20000c24 	.word	0x20000c24
 8004ce8:	20000c0c 	.word	0x20000c0c

08004cec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 f866 	bl	8005dd4 <vPortFree>
				vPortFree( pxTCB );
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f001 f863 	bl	8005dd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d0e:	e017      	b.n	8004d40 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d103      	bne.n	8004d22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f001 f85a 	bl	8005dd4 <vPortFree>
	}
 8004d20:	e00e      	b.n	8004d40 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d009      	beq.n	8004d40 <prvDeleteTCB+0x54>
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	e7fe      	b.n	8004d3e <prvDeleteTCB+0x52>
	}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <prvResetNextTaskUnblockTime+0x38>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <prvResetNextTaskUnblockTime+0x3c>)
 8004d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d60:	e008      	b.n	8004d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <prvResetNextTaskUnblockTime+0x38>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4a04      	ldr	r2, [pc, #16]	; (8004d84 <prvResetNextTaskUnblockTime+0x3c>)
 8004d72:	6013      	str	r3, [r2, #0]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000bdc 	.word	0x20000bdc
 8004d84:	20000c44 	.word	0x20000c44

08004d88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <xTaskGetSchedulerState+0x34>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d96:	2301      	movs	r3, #1
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	e008      	b.n	8004dae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9c:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <xTaskGetSchedulerState+0x38>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d102      	bne.n	8004daa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004da4:	2302      	movs	r3, #2
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	e001      	b.n	8004dae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004daa:	2300      	movs	r3, #0
 8004dac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dae:	687b      	ldr	r3, [r7, #4]
	}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	20000c30 	.word	0x20000c30
 8004dc0:	20000c4c 	.word	0x20000c4c

08004dc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d051      	beq.n	8004e7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dde:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <xTaskPriorityInherit+0xc4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d241      	bcs.n	8004e6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	db06      	blt.n	8004dfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df0:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <xTaskPriorityInherit+0xc4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6959      	ldr	r1, [r3, #20]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <xTaskPriorityInherit+0xc8>)
 8004e10:	4413      	add	r3, r2
 8004e12:	4299      	cmp	r1, r3
 8004e14:	d122      	bne.n	8004e5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fa24 	bl	8003268 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e20:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <xTaskPriorityInherit+0xc4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	4b18      	ldr	r3, [pc, #96]	; (8004e90 <xTaskPriorityInherit+0xcc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d903      	bls.n	8004e3e <xTaskPriorityInherit+0x7a>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <xTaskPriorityInherit+0xcc>)
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4a10      	ldr	r2, [pc, #64]	; (8004e8c <xTaskPriorityInherit+0xc8>)
 8004e4c:	441a      	add	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7fe f9aa 	bl	80031ae <vListInsertEnd>
 8004e5a:	e004      	b.n	8004e66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <xTaskPriorityInherit+0xc4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e008      	b.n	8004e7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <xTaskPriorityInherit+0xc4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d201      	bcs.n	8004e7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000750 	.word	0x20000750
 8004e8c:	20000754 	.word	0x20000754
 8004e90:	20000c2c 	.word	0x20000c2c

08004e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d054      	beq.n	8004f54 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004eaa:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <xTaskPriorityDisinherit+0xcc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d009      	beq.n	8004ec8 <xTaskPriorityDisinherit+0x34>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	e7fe      	b.n	8004ec6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <xTaskPriorityDisinherit+0x50>
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	e7fe      	b.n	8004ee2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee8:	1e5a      	subs	r2, r3, #1
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d02c      	beq.n	8004f54 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d128      	bne.n	8004f54 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe f9ae 	bl	8003268 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <xTaskPriorityDisinherit+0xd0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d903      	bls.n	8004f34 <xTaskPriorityDisinherit+0xa0>
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <xTaskPriorityDisinherit+0xd0>)
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <xTaskPriorityDisinherit+0xd4>)
 8004f42:	441a      	add	r2, r3
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f7fe f92f 	bl	80031ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f50:	2301      	movs	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f54:	697b      	ldr	r3, [r7, #20]
	}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000750 	.word	0x20000750
 8004f64:	20000c2c 	.word	0x20000c2c
 8004f68:	20000754 	.word	0x20000754

08004f6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d068      	beq.n	8005056 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e7fe      	b.n	8004f9e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d902      	bls.n	8004fb0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	e002      	b.n	8004fb6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d04a      	beq.n	8005056 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d145      	bne.n	8005056 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fca:	4b25      	ldr	r3, [pc, #148]	; (8005060 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d109      	bne.n	8004fe8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	e7fe      	b.n	8004fe6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	db04      	blt.n	8005006 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	6959      	ldr	r1, [r3, #20]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005016:	4413      	add	r3, r2
 8005018:	4299      	cmp	r1, r3
 800501a:	d11c      	bne.n	8005056 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	3304      	adds	r3, #4
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe f921 	bl	8003268 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502a:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d903      	bls.n	800503a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	4a0c      	ldr	r2, [pc, #48]	; (8005068 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4a07      	ldr	r2, [pc, #28]	; (8005064 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005048:	441a      	add	r2, r3
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	3304      	adds	r3, #4
 800504e:	4619      	mov	r1, r3
 8005050:	4610      	mov	r0, r2
 8005052:	f7fe f8ac 	bl	80031ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005056:	bf00      	nop
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000750 	.word	0x20000750
 8005064:	20000754 	.word	0x20000754
 8005068:	20000c2c 	.word	0x20000c2c

0800506c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005070:	4b07      	ldr	r3, [pc, #28]	; (8005090 <pvTaskIncrementMutexHeldCount+0x24>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d004      	beq.n	8005082 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <pvTaskIncrementMutexHeldCount+0x24>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800507e:	3201      	adds	r2, #1
 8005080:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005082:	4b03      	ldr	r3, [pc, #12]	; (8005090 <pvTaskIncrementMutexHeldCount+0x24>)
 8005084:	681b      	ldr	r3, [r3, #0]
	}
 8005086:	4618      	mov	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	20000750 	.word	0x20000750

08005094 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800509e:	4b21      	ldr	r3, [pc, #132]	; (8005124 <prvAddCurrentTaskToDelayedList+0x90>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050a4:	4b20      	ldr	r3, [pc, #128]	; (8005128 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe f8dc 	bl	8003268 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d10a      	bne.n	80050ce <prvAddCurrentTaskToDelayedList+0x3a>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050be:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <prvAddCurrentTaskToDelayedList+0x94>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	4819      	ldr	r0, [pc, #100]	; (800512c <prvAddCurrentTaskToDelayedList+0x98>)
 80050c8:	f7fe f871 	bl	80031ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050cc:	e026      	b.n	800511c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <prvAddCurrentTaskToDelayedList+0x94>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d209      	bcs.n	80050fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <prvAddCurrentTaskToDelayedList+0x94>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7fe f87f 	bl	80031f6 <vListInsert>
}
 80050f8:	e010      	b.n	800511c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <prvAddCurrentTaskToDelayedList+0x94>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3304      	adds	r3, #4
 8005104:	4619      	mov	r1, r3
 8005106:	4610      	mov	r0, r2
 8005108:	f7fe f875 	bl	80031f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800510c:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <prvAddCurrentTaskToDelayedList+0xa4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	d202      	bcs.n	800511c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005116:	4a08      	ldr	r2, [pc, #32]	; (8005138 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6013      	str	r3, [r2, #0]
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000c28 	.word	0x20000c28
 8005128:	20000750 	.word	0x20000750
 800512c:	20000c10 	.word	0x20000c10
 8005130:	20000be0 	.word	0x20000be0
 8005134:	20000bdc 	.word	0x20000bdc
 8005138:	20000c44 	.word	0x20000c44

0800513c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005146:	f000 faff 	bl	8005748 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800514a:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <xTimerCreateTimerTask+0x80>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d021      	beq.n	8005196 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800515a:	1d3a      	adds	r2, r7, #4
 800515c:	f107 0108 	add.w	r1, r7, #8
 8005160:	f107 030c 	add.w	r3, r7, #12
 8005164:	4618      	mov	r0, r3
 8005166:	f7fd ffdb 	bl	8003120 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	9202      	str	r2, [sp, #8]
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	2302      	movs	r3, #2
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	2300      	movs	r3, #0
 800517a:	460a      	mov	r2, r1
 800517c:	4910      	ldr	r1, [pc, #64]	; (80051c0 <xTimerCreateTimerTask+0x84>)
 800517e:	4811      	ldr	r0, [pc, #68]	; (80051c4 <xTimerCreateTimerTask+0x88>)
 8005180:	f7fe fffa 	bl	8004178 <xTaskCreateStatic>
 8005184:	4602      	mov	r2, r0
 8005186:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <xTimerCreateTimerTask+0x8c>)
 8005188:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <xTimerCreateTimerTask+0x8c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005192:	2301      	movs	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d109      	bne.n	80051b0 <xTimerCreateTimerTask+0x74>
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e7fe      	b.n	80051ae <xTimerCreateTimerTask+0x72>
	return xReturn;
 80051b0:	697b      	ldr	r3, [r7, #20]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000c80 	.word	0x20000c80
 80051c0:	08006bec 	.word	0x08006bec
 80051c4:	080052fd 	.word	0x080052fd
 80051c8:	20000c84 	.word	0x20000c84

080051cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	; 0x28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051da:	2300      	movs	r3, #0
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d109      	bne.n	80051f8 <xTimerGenericCommand+0x2c>
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	e7fe      	b.n	80051f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051f8:	4b19      	ldr	r3, [pc, #100]	; (8005260 <xTimerGenericCommand+0x94>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d02a      	beq.n	8005256 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b05      	cmp	r3, #5
 8005210:	dc18      	bgt.n	8005244 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005212:	f7ff fdb9 	bl	8004d88 <xTaskGetSchedulerState>
 8005216:	4603      	mov	r3, r0
 8005218:	2b02      	cmp	r3, #2
 800521a:	d109      	bne.n	8005230 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800521c:	4b10      	ldr	r3, [pc, #64]	; (8005260 <xTimerGenericCommand+0x94>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	f107 0110 	add.w	r1, r7, #16
 8005224:	2300      	movs	r3, #0
 8005226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005228:	f7fe f9d2 	bl	80035d0 <xQueueGenericSend>
 800522c:	6278      	str	r0, [r7, #36]	; 0x24
 800522e:	e012      	b.n	8005256 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <xTimerGenericCommand+0x94>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	f107 0110 	add.w	r1, r7, #16
 8005238:	2300      	movs	r3, #0
 800523a:	2200      	movs	r2, #0
 800523c:	f7fe f9c8 	bl	80035d0 <xQueueGenericSend>
 8005240:	6278      	str	r0, [r7, #36]	; 0x24
 8005242:	e008      	b.n	8005256 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <xTimerGenericCommand+0x94>)
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	f107 0110 	add.w	r1, r7, #16
 800524c:	2300      	movs	r3, #0
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	f7fe fab8 	bl	80037c4 <xQueueGenericSendFromISR>
 8005254:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005258:	4618      	mov	r0, r3
 800525a:	3728      	adds	r7, #40	; 0x28
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000c80 	.word	0x20000c80

08005264 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af02      	add	r7, sp, #8
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <prvProcessExpiredTimer+0x94>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	3304      	adds	r3, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f7fd fff3 	bl	8003268 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d021      	beq.n	80052d4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	18d1      	adds	r1, r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	6978      	ldr	r0, [r7, #20]
 800529e:	f000 f8d1 	bl	8005444 <prvInsertTimerInActiveList>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01e      	beq.n	80052e6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a8:	2300      	movs	r3, #0
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	2300      	movs	r3, #0
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	2100      	movs	r1, #0
 80052b2:	6978      	ldr	r0, [r7, #20]
 80052b4:	f7ff ff8a 	bl	80051cc <xTimerGenericCommand>
 80052b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d112      	bne.n	80052e6 <prvProcessExpiredTimer+0x82>
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e7fe      	b.n	80052d2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	6978      	ldr	r0, [r7, #20]
 80052ec:	4798      	blx	r3
}
 80052ee:	bf00      	nop
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000c78 	.word	0x20000c78

080052fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f857 	bl	80053bc <prvGetNextExpireTime>
 800530e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4619      	mov	r1, r3
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f803 	bl	8005320 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800531a:	f000 f8d5 	bl	80054c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800531e:	e7f1      	b.n	8005304 <prvTimerTask+0x8>

08005320 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800532a:	f7ff f95b 	bl	80045e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800532e:	f107 0308 	add.w	r3, r7, #8
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f866 	bl	8005404 <prvSampleTimeNow>
 8005338:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d130      	bne.n	80053a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <prvProcessTimerOrBlockTask+0x3c>
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	429a      	cmp	r2, r3
 800534c:	d806      	bhi.n	800535c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800534e:	f7ff f957 	bl	8004600 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ff85 	bl	8005264 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800535a:	e024      	b.n	80053a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005362:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <prvProcessTimerOrBlockTask+0x90>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <prvProcessTimerOrBlockTask+0x50>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <prvProcessTimerOrBlockTask+0x52>
 8005370:	2300      	movs	r3, #0
 8005372:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <prvProcessTimerOrBlockTask+0x94>)
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	4619      	mov	r1, r3
 8005382:	f7fe fec5 	bl	8004110 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005386:	f7ff f93b 	bl	8004600 <xTaskResumeAll>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005390:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <prvProcessTimerOrBlockTask+0x98>)
 8005392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	f3bf 8f6f 	isb	sy
}
 80053a0:	e001      	b.n	80053a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053a2:	f7ff f92d 	bl	8004600 <xTaskResumeAll>
}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000c7c 	.word	0x20000c7c
 80053b4:	20000c80 	.word	0x20000c80
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053c4:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <prvGetNextExpireTime+0x44>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <prvGetNextExpireTime+0x16>
 80053ce:	2201      	movs	r2, #1
 80053d0:	e000      	b.n	80053d4 <prvGetNextExpireTime+0x18>
 80053d2:	2200      	movs	r2, #0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <prvGetNextExpireTime+0x44>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	e001      	b.n	80053f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053f0:	68fb      	ldr	r3, [r7, #12]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	20000c78 	.word	0x20000c78

08005404 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800540c:	f7ff f994 	bl	8004738 <xTaskGetTickCount>
 8005410:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <prvSampleTimeNow+0x3c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	429a      	cmp	r2, r3
 800541a:	d205      	bcs.n	8005428 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800541c:	f000 f930 	bl	8005680 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e002      	b.n	800542e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800542e:	4a04      	ldr	r2, [pc, #16]	; (8005440 <prvSampleTimeNow+0x3c>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005434:	68fb      	ldr	r3, [r7, #12]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000c88 	.word	0x20000c88

08005444 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	429a      	cmp	r2, r3
 8005468:	d812      	bhi.n	8005490 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e01b      	b.n	80054b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <prvInsertTimerInActiveList+0x7c>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f7fd feb4 	bl	80031f6 <vListInsert>
 800548e:	e012      	b.n	80054b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d206      	bcs.n	80054a6 <prvInsertTimerInActiveList+0x62>
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d302      	bcc.n	80054a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054a0:	2301      	movs	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e007      	b.n	80054b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054a6:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <prvInsertTimerInActiveList+0x80>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f7fd fea0 	bl	80031f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054b6:	697b      	ldr	r3, [r7, #20]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000c7c 	.word	0x20000c7c
 80054c4:	20000c78 	.word	0x20000c78

080054c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08e      	sub	sp, #56	; 0x38
 80054cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054ce:	e0c6      	b.n	800565e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da17      	bge.n	8005506 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	3304      	adds	r3, #4
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <prvProcessReceivedCommands+0x2e>
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	e7fe      	b.n	80054f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fc:	6850      	ldr	r0, [r2, #4]
 80054fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005500:	6892      	ldr	r2, [r2, #8]
 8005502:	4611      	mov	r1, r2
 8005504:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f2c0 80a7 	blt.w	800565c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	3304      	adds	r3, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f7fd fea2 	bl	8003268 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005524:	463b      	mov	r3, r7
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff ff6c 	bl	8005404 <prvSampleTimeNow>
 800552c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b09      	cmp	r3, #9
 8005532:	f200 8094 	bhi.w	800565e <prvProcessReceivedCommands+0x196>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <prvProcessReceivedCommands+0x74>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005565 	.word	0x08005565
 8005540:	08005565 	.word	0x08005565
 8005544:	08005565 	.word	0x08005565
 8005548:	080055d7 	.word	0x080055d7
 800554c:	080055eb 	.word	0x080055eb
 8005550:	08005633 	.word	0x08005633
 8005554:	08005565 	.word	0x08005565
 8005558:	08005565 	.word	0x08005565
 800555c:	080055d7 	.word	0x080055d7
 8005560:	080055eb 	.word	0x080055eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	b2da      	uxtb	r2, r3
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	18d1      	adds	r1, r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005584:	f7ff ff5e 	bl	8005444 <prvInsertTimerInActiveList>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d067      	beq.n	800565e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005594:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d05c      	beq.n	800565e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	441a      	add	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	2300      	movs	r3, #0
 80055b2:	2100      	movs	r1, #0
 80055b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b6:	f7ff fe09 	bl	80051cc <xTimerGenericCommand>
 80055ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d14d      	bne.n	800565e <prvProcessReceivedCommands+0x196>
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	e7fe      	b.n	80055d4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055e8:	e039      	b.n	800565e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <prvProcessReceivedCommands+0x156>
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e7fe      	b.n	800561c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	18d1      	adds	r1, r2, r3
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800562c:	f7ff ff0a 	bl	8005444 <prvInsertTimerInActiveList>
					break;
 8005630:	e015      	b.n	800565e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d103      	bne.n	8005648 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005642:	f000 fbc7 	bl	8005dd4 <vPortFree>
 8005646:	e00a      	b.n	800565e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800564e:	f023 0301 	bic.w	r3, r3, #1
 8005652:	b2da      	uxtb	r2, r3
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800565a:	e000      	b.n	800565e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800565c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800565e:	4b07      	ldr	r3, [pc, #28]	; (800567c <prvProcessReceivedCommands+0x1b4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	1d39      	adds	r1, r7, #4
 8005664:	2200      	movs	r2, #0
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe f940 	bl	80038ec <xQueueReceive>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	f47f af2e 	bne.w	80054d0 <prvProcessReceivedCommands+0x8>
	}
}
 8005674:	bf00      	nop
 8005676:	3730      	adds	r7, #48	; 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20000c80 	.word	0x20000c80

08005680 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005686:	e047      	b.n	8005718 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005688:	4b2d      	ldr	r3, [pc, #180]	; (8005740 <prvSwitchTimerLists+0xc0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005692:	4b2b      	ldr	r3, [pc, #172]	; (8005740 <prvSwitchTimerLists+0xc0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3304      	adds	r3, #4
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fd fde1 	bl	8003268 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d02d      	beq.n	8005718 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4413      	add	r3, r2
 80056c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d90e      	bls.n	80056ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056da:	4b19      	ldr	r3, [pc, #100]	; (8005740 <prvSwitchTimerLists+0xc0>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fd fd86 	bl	80031f6 <vListInsert>
 80056ea:	e015      	b.n	8005718 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056ec:	2300      	movs	r3, #0
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	2300      	movs	r3, #0
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	2100      	movs	r1, #0
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff fd68 	bl	80051cc <xTimerGenericCommand>
 80056fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d109      	bne.n	8005718 <prvSwitchTimerLists+0x98>
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	603b      	str	r3, [r7, #0]
 8005716:	e7fe      	b.n	8005716 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005718:	4b09      	ldr	r3, [pc, #36]	; (8005740 <prvSwitchTimerLists+0xc0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1b2      	bne.n	8005688 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005722:	4b07      	ldr	r3, [pc, #28]	; (8005740 <prvSwitchTimerLists+0xc0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <prvSwitchTimerLists+0xc4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a04      	ldr	r2, [pc, #16]	; (8005740 <prvSwitchTimerLists+0xc0>)
 800572e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005730:	4a04      	ldr	r2, [pc, #16]	; (8005744 <prvSwitchTimerLists+0xc4>)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	6013      	str	r3, [r2, #0]
}
 8005736:	bf00      	nop
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000c78 	.word	0x20000c78
 8005744:	20000c7c 	.word	0x20000c7c

08005748 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800574e:	f000 f965 	bl	8005a1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <prvCheckForValidListAndQueue+0x60>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d120      	bne.n	800579c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800575a:	4814      	ldr	r0, [pc, #80]	; (80057ac <prvCheckForValidListAndQueue+0x64>)
 800575c:	f7fd fcfa 	bl	8003154 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005760:	4813      	ldr	r0, [pc, #76]	; (80057b0 <prvCheckForValidListAndQueue+0x68>)
 8005762:	f7fd fcf7 	bl	8003154 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005766:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <prvCheckForValidListAndQueue+0x6c>)
 8005768:	4a10      	ldr	r2, [pc, #64]	; (80057ac <prvCheckForValidListAndQueue+0x64>)
 800576a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800576c:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <prvCheckForValidListAndQueue+0x70>)
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <prvCheckForValidListAndQueue+0x68>)
 8005770:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005772:	2300      	movs	r3, #0
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	4b11      	ldr	r3, [pc, #68]	; (80057bc <prvCheckForValidListAndQueue+0x74>)
 8005778:	4a11      	ldr	r2, [pc, #68]	; (80057c0 <prvCheckForValidListAndQueue+0x78>)
 800577a:	2110      	movs	r1, #16
 800577c:	200a      	movs	r0, #10
 800577e:	f7fd fe05 	bl	800338c <xQueueGenericCreateStatic>
 8005782:	4602      	mov	r2, r0
 8005784:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <prvCheckForValidListAndQueue+0x60>)
 8005786:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005788:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <prvCheckForValidListAndQueue+0x60>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <prvCheckForValidListAndQueue+0x60>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	490b      	ldr	r1, [pc, #44]	; (80057c4 <prvCheckForValidListAndQueue+0x7c>)
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe fc92 	bl	80040c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800579c:	f000 f96c 	bl	8005a78 <vPortExitCritical>
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000c80 	.word	0x20000c80
 80057ac:	20000c50 	.word	0x20000c50
 80057b0:	20000c64 	.word	0x20000c64
 80057b4:	20000c78 	.word	0x20000c78
 80057b8:	20000c7c 	.word	0x20000c7c
 80057bc:	20000d2c 	.word	0x20000d2c
 80057c0:	20000c8c 	.word	0x20000c8c
 80057c4:	08006bf4 	.word	0x08006bf4

080057c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3b04      	subs	r3, #4
 80057d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b04      	subs	r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3b04      	subs	r3, #4
 80057f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057f8:	4a0c      	ldr	r2, [pc, #48]	; (800582c <pxPortInitialiseStack+0x64>)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3b14      	subs	r3, #20
 8005802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3b04      	subs	r3, #4
 800580e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f06f 0202 	mvn.w	r2, #2
 8005816:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b20      	subs	r3, #32
 800581c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	08005831 	.word	0x08005831

08005830 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800583a:	4b11      	ldr	r3, [pc, #68]	; (8005880 <prvTaskExitError+0x50>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d009      	beq.n	8005858 <prvTaskExitError+0x28>
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e7fe      	b.n	8005856 <prvTaskExitError+0x26>
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800586a:	bf00      	nop
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0fc      	beq.n	800586c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005872:	bf00      	nop
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	2000000c 	.word	0x2000000c
	...

08005890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <pxCurrentTCBConst2>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f380 8809 	msr	PSP, r0
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8811 	msr	BASEPRI, r0
 80058aa:	4770      	bx	lr
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst2>:
 80058b0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058b8:	4808      	ldr	r0, [pc, #32]	; (80058dc <prvPortStartFirstTask+0x24>)
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	6800      	ldr	r0, [r0, #0]
 80058be:	f380 8808 	msr	MSP, r0
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8814 	msr	CONTROL, r0
 80058ca:	b662      	cpsie	i
 80058cc:	b661      	cpsie	f
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	df00      	svc	0
 80058d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058da:	bf00      	nop
 80058dc:	e000ed08 	.word	0xe000ed08

080058e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058e6:	4b44      	ldr	r3, [pc, #272]	; (80059f8 <xPortStartScheduler+0x118>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a44      	ldr	r2, [pc, #272]	; (80059fc <xPortStartScheduler+0x11c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d109      	bne.n	8005904 <xPortStartScheduler+0x24>
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	e7fe      	b.n	8005902 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005904:	4b3c      	ldr	r3, [pc, #240]	; (80059f8 <xPortStartScheduler+0x118>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a3d      	ldr	r2, [pc, #244]	; (8005a00 <xPortStartScheduler+0x120>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d109      	bne.n	8005922 <xPortStartScheduler+0x42>
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e7fe      	b.n	8005920 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005922:	4b38      	ldr	r3, [pc, #224]	; (8005a04 <xPortStartScheduler+0x124>)
 8005924:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	22ff      	movs	r2, #255	; 0xff
 8005932:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005944:	b2da      	uxtb	r2, r3
 8005946:	4b30      	ldr	r3, [pc, #192]	; (8005a08 <xPortStartScheduler+0x128>)
 8005948:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800594a:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <xPortStartScheduler+0x12c>)
 800594c:	2207      	movs	r2, #7
 800594e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005950:	e009      	b.n	8005966 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005952:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <xPortStartScheduler+0x12c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3b01      	subs	r3, #1
 8005958:	4a2c      	ldr	r2, [pc, #176]	; (8005a0c <xPortStartScheduler+0x12c>)
 800595a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	b2db      	uxtb	r3, r3
 8005964:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d0ef      	beq.n	8005952 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005972:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <xPortStartScheduler+0x12c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f1c3 0307 	rsb	r3, r3, #7
 800597a:	2b04      	cmp	r3, #4
 800597c:	d009      	beq.n	8005992 <xPortStartScheduler+0xb2>
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	e7fe      	b.n	8005990 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005992:	4b1e      	ldr	r3, [pc, #120]	; (8005a0c <xPortStartScheduler+0x12c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	4a1c      	ldr	r2, [pc, #112]	; (8005a0c <xPortStartScheduler+0x12c>)
 800599a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800599c:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <xPortStartScheduler+0x12c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059a4:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <xPortStartScheduler+0x12c>)
 80059a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059b0:	4b17      	ldr	r3, [pc, #92]	; (8005a10 <xPortStartScheduler+0x130>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <xPortStartScheduler+0x130>)
 80059b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059bc:	4b14      	ldr	r3, [pc, #80]	; (8005a10 <xPortStartScheduler+0x130>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <xPortStartScheduler+0x130>)
 80059c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059c8:	f000 f8d6 	bl	8005b78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059cc:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <xPortStartScheduler+0x134>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059d2:	f000 f8f5 	bl	8005bc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059d6:	4b10      	ldr	r3, [pc, #64]	; (8005a18 <xPortStartScheduler+0x138>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a0f      	ldr	r2, [pc, #60]	; (8005a18 <xPortStartScheduler+0x138>)
 80059dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059e2:	f7ff ff69 	bl	80058b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059e6:	f7fe ff6f 	bl	80048c8 <vTaskSwitchContext>
	prvTaskExitError();
 80059ea:	f7ff ff21 	bl	8005830 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	e000ed00 	.word	0xe000ed00
 80059fc:	410fc271 	.word	0x410fc271
 8005a00:	410fc270 	.word	0x410fc270
 8005a04:	e000e400 	.word	0xe000e400
 8005a08:	20000d7c 	.word	0x20000d7c
 8005a0c:	20000d80 	.word	0x20000d80
 8005a10:	e000ed20 	.word	0xe000ed20
 8005a14:	2000000c 	.word	0x2000000c
 8005a18:	e000ef34 	.word	0xe000ef34

08005a1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a34:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <vPortEnterCritical+0x54>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <vPortEnterCritical+0x54>)
 8005a3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <vPortEnterCritical+0x54>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d10e      	bne.n	8005a64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <vPortEnterCritical+0x58>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <vPortEnterCritical+0x48>
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	e7fe      	b.n	8005a62 <vPortEnterCritical+0x46>
	}
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	2000000c 	.word	0x2000000c
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <vPortExitCritical+0x4c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <vPortExitCritical+0x22>
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	e7fe      	b.n	8005a98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <vPortExitCritical+0x4c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	4a08      	ldr	r2, [pc, #32]	; (8005ac4 <vPortExitCritical+0x4c>)
 8005aa2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aa4:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <vPortExitCritical+0x4c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <vPortExitCritical+0x3e>
 8005aac:	2300      	movs	r3, #0
 8005aae:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	2000000c 	.word	0x2000000c
	...

08005ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ad0:	f3ef 8009 	mrs	r0, PSP
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <pxCurrentTCBConst>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	f01e 0f10 	tst.w	lr, #16
 8005ae0:	bf08      	it	eq
 8005ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aea:	6010      	str	r0, [r2, #0]
 8005aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005af4:	f380 8811 	msr	BASEPRI, r0
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f7fe fee2 	bl	80048c8 <vTaskSwitchContext>
 8005b04:	f04f 0000 	mov.w	r0, #0
 8005b08:	f380 8811 	msr	BASEPRI, r0
 8005b0c:	bc09      	pop	{r0, r3}
 8005b0e:	6819      	ldr	r1, [r3, #0]
 8005b10:	6808      	ldr	r0, [r1, #0]
 8005b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b16:	f01e 0f10 	tst.w	lr, #16
 8005b1a:	bf08      	it	eq
 8005b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b20:	f380 8809 	msr	PSP, r0
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	f3af 8000 	nop.w

08005b30 <pxCurrentTCBConst>:
 8005b30:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop

08005b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b50:	f7fe fe02 	bl	8004758 <xTaskIncrementTick>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b5a:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <SysTick_Handler+0x3c>)
 8005b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	2300      	movs	r3, #0
 8005b64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <vPortSetupTimerInterrupt+0x34>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b82:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <vPortSetupTimerInterrupt+0x38>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b88:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <vPortSetupTimerInterrupt+0x3c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <vPortSetupTimerInterrupt+0x40>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	099b      	lsrs	r3, r3, #6
 8005b94:	4a09      	ldr	r2, [pc, #36]	; (8005bbc <vPortSetupTimerInterrupt+0x44>)
 8005b96:	3b01      	subs	r3, #1
 8005b98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b9a:	4b04      	ldr	r3, [pc, #16]	; (8005bac <vPortSetupTimerInterrupt+0x34>)
 8005b9c:	2207      	movs	r2, #7
 8005b9e:	601a      	str	r2, [r3, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	e000e010 	.word	0xe000e010
 8005bb0:	e000e018 	.word	0xe000e018
 8005bb4:	20000000 	.word	0x20000000
 8005bb8:	10624dd3 	.word	0x10624dd3
 8005bbc:	e000e014 	.word	0xe000e014

08005bc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bd0 <vPortEnableVFP+0x10>
 8005bc4:	6801      	ldr	r1, [r0, #0]
 8005bc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bca:	6001      	str	r1, [r0, #0]
 8005bcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bce:	bf00      	nop
 8005bd0:	e000ed88 	.word	0xe000ed88

08005bd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bda:	f3ef 8305 	mrs	r3, IPSR
 8005bde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d913      	bls.n	8005c0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005be6:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <vPortValidateInterruptPriority+0x6c>)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bf0:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <vPortValidateInterruptPriority+0x70>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	7afa      	ldrb	r2, [r7, #11]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d209      	bcs.n	8005c0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	607b      	str	r3, [r7, #4]
 8005c0c:	e7fe      	b.n	8005c0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <vPortValidateInterruptPriority+0x74>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c16:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <vPortValidateInterruptPriority+0x78>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d909      	bls.n	8005c32 <vPortValidateInterruptPriority+0x5e>
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	e7fe      	b.n	8005c30 <vPortValidateInterruptPriority+0x5c>
	}
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e3f0 	.word	0xe000e3f0
 8005c44:	20000d7c 	.word	0x20000d7c
 8005c48:	e000ed0c 	.word	0xe000ed0c
 8005c4c:	20000d80 	.word	0x20000d80

08005c50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	; 0x28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c5c:	f7fe fcc2 	bl	80045e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c60:	4b57      	ldr	r3, [pc, #348]	; (8005dc0 <pvPortMalloc+0x170>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c68:	f000 f90c 	bl	8005e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c6c:	4b55      	ldr	r3, [pc, #340]	; (8005dc4 <pvPortMalloc+0x174>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 808c 	bne.w	8005d92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01c      	beq.n	8005cba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005c80:	2208      	movs	r2, #8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4413      	add	r3, r2
 8005c86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d013      	beq.n	8005cba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f023 0307 	bic.w	r3, r3, #7
 8005c98:	3308      	adds	r3, #8
 8005c9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <pvPortMalloc+0x6a>
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e7fe      	b.n	8005cb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d068      	beq.n	8005d92 <pvPortMalloc+0x142>
 8005cc0:	4b41      	ldr	r3, [pc, #260]	; (8005dc8 <pvPortMalloc+0x178>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d863      	bhi.n	8005d92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cca:	4b40      	ldr	r3, [pc, #256]	; (8005dcc <pvPortMalloc+0x17c>)
 8005ccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cce:	4b3f      	ldr	r3, [pc, #252]	; (8005dcc <pvPortMalloc+0x17c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cd4:	e004      	b.n	8005ce0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d903      	bls.n	8005cf2 <pvPortMalloc+0xa2>
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f1      	bne.n	8005cd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cf2:	4b33      	ldr	r3, [pc, #204]	; (8005dc0 <pvPortMalloc+0x170>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d04a      	beq.n	8005d92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2208      	movs	r2, #8
 8005d02:	4413      	add	r3, r2
 8005d04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	1ad2      	subs	r2, r2, r3
 8005d16:	2308      	movs	r3, #8
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d91e      	bls.n	8005d5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4413      	add	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <pvPortMalloc+0xf4>
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	e7fe      	b.n	8005d42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d56:	69b8      	ldr	r0, [r7, #24]
 8005d58:	f000 f8f6 	bl	8005f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <pvPortMalloc+0x178>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <pvPortMalloc+0x178>)
 8005d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d6a:	4b17      	ldr	r3, [pc, #92]	; (8005dc8 <pvPortMalloc+0x178>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b18      	ldr	r3, [pc, #96]	; (8005dd0 <pvPortMalloc+0x180>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d203      	bcs.n	8005d7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <pvPortMalloc+0x178>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <pvPortMalloc+0x180>)
 8005d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <pvPortMalloc+0x174>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d92:	f7fe fc35 	bl	8004600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d009      	beq.n	8005db4 <pvPortMalloc+0x164>
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	e7fe      	b.n	8005db2 <pvPortMalloc+0x162>
	return pvReturn;
 8005db4:	69fb      	ldr	r3, [r7, #28]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3728      	adds	r7, #40	; 0x28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	2000498c 	.word	0x2000498c
 8005dc4:	20004998 	.word	0x20004998
 8005dc8:	20004990 	.word	0x20004990
 8005dcc:	20004984 	.word	0x20004984
 8005dd0:	20004994 	.word	0x20004994

08005dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d046      	beq.n	8005e74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005de6:	2308      	movs	r3, #8
 8005de8:	425b      	negs	r3, r3
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	4b20      	ldr	r3, [pc, #128]	; (8005e7c <vPortFree+0xa8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <vPortFree+0x42>
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e7fe      	b.n	8005e14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <vPortFree+0x5e>
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	60bb      	str	r3, [r7, #8]
 8005e30:	e7fe      	b.n	8005e30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <vPortFree+0xa8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d019      	beq.n	8005e74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d115      	bne.n	8005e74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <vPortFree+0xa8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	401a      	ands	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e58:	f7fe fbc4 	bl	80045e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <vPortFree+0xac>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4413      	add	r3, r2
 8005e66:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <vPortFree+0xac>)
 8005e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e6a:	6938      	ldr	r0, [r7, #16]
 8005e6c:	f000 f86c 	bl	8005f48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e70:	f7fe fbc6 	bl	8004600 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e74:	bf00      	nop
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20004998 	.word	0x20004998
 8005e80:	20004990 	.word	0x20004990

08005e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e90:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <prvHeapInit+0xac>)
 8005e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3307      	adds	r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0307 	bic.w	r3, r3, #7
 8005eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	4a1f      	ldr	r2, [pc, #124]	; (8005f30 <prvHeapInit+0xac>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <prvHeapInit+0xb0>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <prvHeapInit+0xb0>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a15      	ldr	r2, [pc, #84]	; (8005f38 <prvHeapInit+0xb4>)
 8005ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <prvHeapInit+0xb4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eee:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <prvHeapInit+0xb4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f04:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <prvHeapInit+0xb4>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a0a      	ldr	r2, [pc, #40]	; (8005f3c <prvHeapInit+0xb8>)
 8005f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <prvHeapInit+0xbc>)
 8005f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <prvHeapInit+0xc0>)
 8005f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f22:	601a      	str	r2, [r3, #0]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	20000d84 	.word	0x20000d84
 8005f34:	20004984 	.word	0x20004984
 8005f38:	2000498c 	.word	0x2000498c
 8005f3c:	20004994 	.word	0x20004994
 8005f40:	20004990 	.word	0x20004990
 8005f44:	20004998 	.word	0x20004998

08005f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f50:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <prvInsertBlockIntoFreeList+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e002      	b.n	8005f5c <prvInsertBlockIntoFreeList+0x14>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d8f7      	bhi.n	8005f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4413      	add	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d108      	bne.n	8005f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	441a      	add	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	441a      	add	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d118      	bne.n	8005fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d00d      	beq.n	8005fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	441a      	add	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	e008      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e003      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d002      	beq.n	8005fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20004984 	.word	0x20004984
 8005ff8:	2000498c 	.word	0x2000498c

08005ffc <__errno>:
 8005ffc:	4b01      	ldr	r3, [pc, #4]	; (8006004 <__errno+0x8>)
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000010 	.word	0x20000010

08006008 <__libc_init_array>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	4e0d      	ldr	r6, [pc, #52]	; (8006040 <__libc_init_array+0x38>)
 800600c:	4c0d      	ldr	r4, [pc, #52]	; (8006044 <__libc_init_array+0x3c>)
 800600e:	1ba4      	subs	r4, r4, r6
 8006010:	10a4      	asrs	r4, r4, #2
 8006012:	2500      	movs	r5, #0
 8006014:	42a5      	cmp	r5, r4
 8006016:	d109      	bne.n	800602c <__libc_init_array+0x24>
 8006018:	4e0b      	ldr	r6, [pc, #44]	; (8006048 <__libc_init_array+0x40>)
 800601a:	4c0c      	ldr	r4, [pc, #48]	; (800604c <__libc_init_array+0x44>)
 800601c:	f000 fc28 	bl	8006870 <_init>
 8006020:	1ba4      	subs	r4, r4, r6
 8006022:	10a4      	asrs	r4, r4, #2
 8006024:	2500      	movs	r5, #0
 8006026:	42a5      	cmp	r5, r4
 8006028:	d105      	bne.n	8006036 <__libc_init_array+0x2e>
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006030:	4798      	blx	r3
 8006032:	3501      	adds	r5, #1
 8006034:	e7ee      	b.n	8006014 <__libc_init_array+0xc>
 8006036:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800603a:	4798      	blx	r3
 800603c:	3501      	adds	r5, #1
 800603e:	e7f2      	b.n	8006026 <__libc_init_array+0x1e>
 8006040:	08006d74 	.word	0x08006d74
 8006044:	08006d74 	.word	0x08006d74
 8006048:	08006d74 	.word	0x08006d74
 800604c:	08006d78 	.word	0x08006d78

08006050 <memcpy>:
 8006050:	b510      	push	{r4, lr}
 8006052:	1e43      	subs	r3, r0, #1
 8006054:	440a      	add	r2, r1
 8006056:	4291      	cmp	r1, r2
 8006058:	d100      	bne.n	800605c <memcpy+0xc>
 800605a:	bd10      	pop	{r4, pc}
 800605c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006064:	e7f7      	b.n	8006056 <memcpy+0x6>

08006066 <memset>:
 8006066:	4402      	add	r2, r0
 8006068:	4603      	mov	r3, r0
 800606a:	4293      	cmp	r3, r2
 800606c:	d100      	bne.n	8006070 <memset+0xa>
 800606e:	4770      	bx	lr
 8006070:	f803 1b01 	strb.w	r1, [r3], #1
 8006074:	e7f9      	b.n	800606a <memset+0x4>
	...

08006078 <siprintf>:
 8006078:	b40e      	push	{r1, r2, r3}
 800607a:	b500      	push	{lr}
 800607c:	b09c      	sub	sp, #112	; 0x70
 800607e:	ab1d      	add	r3, sp, #116	; 0x74
 8006080:	9002      	str	r0, [sp, #8]
 8006082:	9006      	str	r0, [sp, #24]
 8006084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006088:	4809      	ldr	r0, [pc, #36]	; (80060b0 <siprintf+0x38>)
 800608a:	9107      	str	r1, [sp, #28]
 800608c:	9104      	str	r1, [sp, #16]
 800608e:	4909      	ldr	r1, [pc, #36]	; (80060b4 <siprintf+0x3c>)
 8006090:	f853 2b04 	ldr.w	r2, [r3], #4
 8006094:	9105      	str	r1, [sp, #20]
 8006096:	6800      	ldr	r0, [r0, #0]
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	a902      	add	r1, sp, #8
 800609c:	f000 f866 	bl	800616c <_svfiprintf_r>
 80060a0:	9b02      	ldr	r3, [sp, #8]
 80060a2:	2200      	movs	r2, #0
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	b01c      	add	sp, #112	; 0x70
 80060a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060ac:	b003      	add	sp, #12
 80060ae:	4770      	bx	lr
 80060b0:	20000010 	.word	0x20000010
 80060b4:	ffff0208 	.word	0xffff0208

080060b8 <__ssputs_r>:
 80060b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060bc:	688e      	ldr	r6, [r1, #8]
 80060be:	429e      	cmp	r6, r3
 80060c0:	4682      	mov	sl, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	4690      	mov	r8, r2
 80060c6:	4699      	mov	r9, r3
 80060c8:	d837      	bhi.n	800613a <__ssputs_r+0x82>
 80060ca:	898a      	ldrh	r2, [r1, #12]
 80060cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060d0:	d031      	beq.n	8006136 <__ssputs_r+0x7e>
 80060d2:	6825      	ldr	r5, [r4, #0]
 80060d4:	6909      	ldr	r1, [r1, #16]
 80060d6:	1a6f      	subs	r7, r5, r1
 80060d8:	6965      	ldr	r5, [r4, #20]
 80060da:	2302      	movs	r3, #2
 80060dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80060e4:	f109 0301 	add.w	r3, r9, #1
 80060e8:	443b      	add	r3, r7
 80060ea:	429d      	cmp	r5, r3
 80060ec:	bf38      	it	cc
 80060ee:	461d      	movcc	r5, r3
 80060f0:	0553      	lsls	r3, r2, #21
 80060f2:	d530      	bpl.n	8006156 <__ssputs_r+0x9e>
 80060f4:	4629      	mov	r1, r5
 80060f6:	f000 fb21 	bl	800673c <_malloc_r>
 80060fa:	4606      	mov	r6, r0
 80060fc:	b950      	cbnz	r0, 8006114 <__ssputs_r+0x5c>
 80060fe:	230c      	movs	r3, #12
 8006100:	f8ca 3000 	str.w	r3, [sl]
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006114:	463a      	mov	r2, r7
 8006116:	6921      	ldr	r1, [r4, #16]
 8006118:	f7ff ff9a 	bl	8006050 <memcpy>
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	6126      	str	r6, [r4, #16]
 800612a:	6165      	str	r5, [r4, #20]
 800612c:	443e      	add	r6, r7
 800612e:	1bed      	subs	r5, r5, r7
 8006130:	6026      	str	r6, [r4, #0]
 8006132:	60a5      	str	r5, [r4, #8]
 8006134:	464e      	mov	r6, r9
 8006136:	454e      	cmp	r6, r9
 8006138:	d900      	bls.n	800613c <__ssputs_r+0x84>
 800613a:	464e      	mov	r6, r9
 800613c:	4632      	mov	r2, r6
 800613e:	4641      	mov	r1, r8
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	f000 fa93 	bl	800666c <memmove>
 8006146:	68a3      	ldr	r3, [r4, #8]
 8006148:	1b9b      	subs	r3, r3, r6
 800614a:	60a3      	str	r3, [r4, #8]
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	441e      	add	r6, r3
 8006150:	6026      	str	r6, [r4, #0]
 8006152:	2000      	movs	r0, #0
 8006154:	e7dc      	b.n	8006110 <__ssputs_r+0x58>
 8006156:	462a      	mov	r2, r5
 8006158:	f000 fb4a 	bl	80067f0 <_realloc_r>
 800615c:	4606      	mov	r6, r0
 800615e:	2800      	cmp	r0, #0
 8006160:	d1e2      	bne.n	8006128 <__ssputs_r+0x70>
 8006162:	6921      	ldr	r1, [r4, #16]
 8006164:	4650      	mov	r0, sl
 8006166:	f000 fa9b 	bl	80066a0 <_free_r>
 800616a:	e7c8      	b.n	80060fe <__ssputs_r+0x46>

0800616c <_svfiprintf_r>:
 800616c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006170:	461d      	mov	r5, r3
 8006172:	898b      	ldrh	r3, [r1, #12]
 8006174:	061f      	lsls	r7, r3, #24
 8006176:	b09d      	sub	sp, #116	; 0x74
 8006178:	4680      	mov	r8, r0
 800617a:	460c      	mov	r4, r1
 800617c:	4616      	mov	r6, r2
 800617e:	d50f      	bpl.n	80061a0 <_svfiprintf_r+0x34>
 8006180:	690b      	ldr	r3, [r1, #16]
 8006182:	b96b      	cbnz	r3, 80061a0 <_svfiprintf_r+0x34>
 8006184:	2140      	movs	r1, #64	; 0x40
 8006186:	f000 fad9 	bl	800673c <_malloc_r>
 800618a:	6020      	str	r0, [r4, #0]
 800618c:	6120      	str	r0, [r4, #16]
 800618e:	b928      	cbnz	r0, 800619c <_svfiprintf_r+0x30>
 8006190:	230c      	movs	r3, #12
 8006192:	f8c8 3000 	str.w	r3, [r8]
 8006196:	f04f 30ff 	mov.w	r0, #4294967295
 800619a:	e0c8      	b.n	800632e <_svfiprintf_r+0x1c2>
 800619c:	2340      	movs	r3, #64	; 0x40
 800619e:	6163      	str	r3, [r4, #20]
 80061a0:	2300      	movs	r3, #0
 80061a2:	9309      	str	r3, [sp, #36]	; 0x24
 80061a4:	2320      	movs	r3, #32
 80061a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061aa:	2330      	movs	r3, #48	; 0x30
 80061ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061b0:	9503      	str	r5, [sp, #12]
 80061b2:	f04f 0b01 	mov.w	fp, #1
 80061b6:	4637      	mov	r7, r6
 80061b8:	463d      	mov	r5, r7
 80061ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061be:	b10b      	cbz	r3, 80061c4 <_svfiprintf_r+0x58>
 80061c0:	2b25      	cmp	r3, #37	; 0x25
 80061c2:	d13e      	bne.n	8006242 <_svfiprintf_r+0xd6>
 80061c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80061c8:	d00b      	beq.n	80061e2 <_svfiprintf_r+0x76>
 80061ca:	4653      	mov	r3, sl
 80061cc:	4632      	mov	r2, r6
 80061ce:	4621      	mov	r1, r4
 80061d0:	4640      	mov	r0, r8
 80061d2:	f7ff ff71 	bl	80060b8 <__ssputs_r>
 80061d6:	3001      	adds	r0, #1
 80061d8:	f000 80a4 	beq.w	8006324 <_svfiprintf_r+0x1b8>
 80061dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061de:	4453      	add	r3, sl
 80061e0:	9309      	str	r3, [sp, #36]	; 0x24
 80061e2:	783b      	ldrb	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 809d 	beq.w	8006324 <_svfiprintf_r+0x1b8>
 80061ea:	2300      	movs	r3, #0
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061f4:	9304      	str	r3, [sp, #16]
 80061f6:	9307      	str	r3, [sp, #28]
 80061f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061fc:	931a      	str	r3, [sp, #104]	; 0x68
 80061fe:	462f      	mov	r7, r5
 8006200:	2205      	movs	r2, #5
 8006202:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006206:	4850      	ldr	r0, [pc, #320]	; (8006348 <_svfiprintf_r+0x1dc>)
 8006208:	f7f9 fff2 	bl	80001f0 <memchr>
 800620c:	9b04      	ldr	r3, [sp, #16]
 800620e:	b9d0      	cbnz	r0, 8006246 <_svfiprintf_r+0xda>
 8006210:	06d9      	lsls	r1, r3, #27
 8006212:	bf44      	itt	mi
 8006214:	2220      	movmi	r2, #32
 8006216:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800621a:	071a      	lsls	r2, r3, #28
 800621c:	bf44      	itt	mi
 800621e:	222b      	movmi	r2, #43	; 0x2b
 8006220:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006224:	782a      	ldrb	r2, [r5, #0]
 8006226:	2a2a      	cmp	r2, #42	; 0x2a
 8006228:	d015      	beq.n	8006256 <_svfiprintf_r+0xea>
 800622a:	9a07      	ldr	r2, [sp, #28]
 800622c:	462f      	mov	r7, r5
 800622e:	2000      	movs	r0, #0
 8006230:	250a      	movs	r5, #10
 8006232:	4639      	mov	r1, r7
 8006234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006238:	3b30      	subs	r3, #48	; 0x30
 800623a:	2b09      	cmp	r3, #9
 800623c:	d94d      	bls.n	80062da <_svfiprintf_r+0x16e>
 800623e:	b1b8      	cbz	r0, 8006270 <_svfiprintf_r+0x104>
 8006240:	e00f      	b.n	8006262 <_svfiprintf_r+0xf6>
 8006242:	462f      	mov	r7, r5
 8006244:	e7b8      	b.n	80061b8 <_svfiprintf_r+0x4c>
 8006246:	4a40      	ldr	r2, [pc, #256]	; (8006348 <_svfiprintf_r+0x1dc>)
 8006248:	1a80      	subs	r0, r0, r2
 800624a:	fa0b f000 	lsl.w	r0, fp, r0
 800624e:	4318      	orrs	r0, r3
 8006250:	9004      	str	r0, [sp, #16]
 8006252:	463d      	mov	r5, r7
 8006254:	e7d3      	b.n	80061fe <_svfiprintf_r+0x92>
 8006256:	9a03      	ldr	r2, [sp, #12]
 8006258:	1d11      	adds	r1, r2, #4
 800625a:	6812      	ldr	r2, [r2, #0]
 800625c:	9103      	str	r1, [sp, #12]
 800625e:	2a00      	cmp	r2, #0
 8006260:	db01      	blt.n	8006266 <_svfiprintf_r+0xfa>
 8006262:	9207      	str	r2, [sp, #28]
 8006264:	e004      	b.n	8006270 <_svfiprintf_r+0x104>
 8006266:	4252      	negs	r2, r2
 8006268:	f043 0302 	orr.w	r3, r3, #2
 800626c:	9207      	str	r2, [sp, #28]
 800626e:	9304      	str	r3, [sp, #16]
 8006270:	783b      	ldrb	r3, [r7, #0]
 8006272:	2b2e      	cmp	r3, #46	; 0x2e
 8006274:	d10c      	bne.n	8006290 <_svfiprintf_r+0x124>
 8006276:	787b      	ldrb	r3, [r7, #1]
 8006278:	2b2a      	cmp	r3, #42	; 0x2a
 800627a:	d133      	bne.n	80062e4 <_svfiprintf_r+0x178>
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	9203      	str	r2, [sp, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	bfb8      	it	lt
 8006288:	f04f 33ff 	movlt.w	r3, #4294967295
 800628c:	3702      	adds	r7, #2
 800628e:	9305      	str	r3, [sp, #20]
 8006290:	4d2e      	ldr	r5, [pc, #184]	; (800634c <_svfiprintf_r+0x1e0>)
 8006292:	7839      	ldrb	r1, [r7, #0]
 8006294:	2203      	movs	r2, #3
 8006296:	4628      	mov	r0, r5
 8006298:	f7f9 ffaa 	bl	80001f0 <memchr>
 800629c:	b138      	cbz	r0, 80062ae <_svfiprintf_r+0x142>
 800629e:	2340      	movs	r3, #64	; 0x40
 80062a0:	1b40      	subs	r0, r0, r5
 80062a2:	fa03 f000 	lsl.w	r0, r3, r0
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	4303      	orrs	r3, r0
 80062aa:	3701      	adds	r7, #1
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	7839      	ldrb	r1, [r7, #0]
 80062b0:	4827      	ldr	r0, [pc, #156]	; (8006350 <_svfiprintf_r+0x1e4>)
 80062b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062b6:	2206      	movs	r2, #6
 80062b8:	1c7e      	adds	r6, r7, #1
 80062ba:	f7f9 ff99 	bl	80001f0 <memchr>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d038      	beq.n	8006334 <_svfiprintf_r+0x1c8>
 80062c2:	4b24      	ldr	r3, [pc, #144]	; (8006354 <_svfiprintf_r+0x1e8>)
 80062c4:	bb13      	cbnz	r3, 800630c <_svfiprintf_r+0x1a0>
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	3307      	adds	r3, #7
 80062ca:	f023 0307 	bic.w	r3, r3, #7
 80062ce:	3308      	adds	r3, #8
 80062d0:	9303      	str	r3, [sp, #12]
 80062d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d4:	444b      	add	r3, r9
 80062d6:	9309      	str	r3, [sp, #36]	; 0x24
 80062d8:	e76d      	b.n	80061b6 <_svfiprintf_r+0x4a>
 80062da:	fb05 3202 	mla	r2, r5, r2, r3
 80062de:	2001      	movs	r0, #1
 80062e0:	460f      	mov	r7, r1
 80062e2:	e7a6      	b.n	8006232 <_svfiprintf_r+0xc6>
 80062e4:	2300      	movs	r3, #0
 80062e6:	3701      	adds	r7, #1
 80062e8:	9305      	str	r3, [sp, #20]
 80062ea:	4619      	mov	r1, r3
 80062ec:	250a      	movs	r5, #10
 80062ee:	4638      	mov	r0, r7
 80062f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f4:	3a30      	subs	r2, #48	; 0x30
 80062f6:	2a09      	cmp	r2, #9
 80062f8:	d903      	bls.n	8006302 <_svfiprintf_r+0x196>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0c8      	beq.n	8006290 <_svfiprintf_r+0x124>
 80062fe:	9105      	str	r1, [sp, #20]
 8006300:	e7c6      	b.n	8006290 <_svfiprintf_r+0x124>
 8006302:	fb05 2101 	mla	r1, r5, r1, r2
 8006306:	2301      	movs	r3, #1
 8006308:	4607      	mov	r7, r0
 800630a:	e7f0      	b.n	80062ee <_svfiprintf_r+0x182>
 800630c:	ab03      	add	r3, sp, #12
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4622      	mov	r2, r4
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <_svfiprintf_r+0x1ec>)
 8006314:	a904      	add	r1, sp, #16
 8006316:	4640      	mov	r0, r8
 8006318:	f3af 8000 	nop.w
 800631c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006320:	4681      	mov	r9, r0
 8006322:	d1d6      	bne.n	80062d2 <_svfiprintf_r+0x166>
 8006324:	89a3      	ldrh	r3, [r4, #12]
 8006326:	065b      	lsls	r3, r3, #25
 8006328:	f53f af35 	bmi.w	8006196 <_svfiprintf_r+0x2a>
 800632c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800632e:	b01d      	add	sp, #116	; 0x74
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	ab03      	add	r3, sp, #12
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	4622      	mov	r2, r4
 800633a:	4b07      	ldr	r3, [pc, #28]	; (8006358 <_svfiprintf_r+0x1ec>)
 800633c:	a904      	add	r1, sp, #16
 800633e:	4640      	mov	r0, r8
 8006340:	f000 f882 	bl	8006448 <_printf_i>
 8006344:	e7ea      	b.n	800631c <_svfiprintf_r+0x1b0>
 8006346:	bf00      	nop
 8006348:	08006d38 	.word	0x08006d38
 800634c:	08006d3e 	.word	0x08006d3e
 8006350:	08006d42 	.word	0x08006d42
 8006354:	00000000 	.word	0x00000000
 8006358:	080060b9 	.word	0x080060b9

0800635c <_printf_common>:
 800635c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006360:	4691      	mov	r9, r2
 8006362:	461f      	mov	r7, r3
 8006364:	688a      	ldr	r2, [r1, #8]
 8006366:	690b      	ldr	r3, [r1, #16]
 8006368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800636c:	4293      	cmp	r3, r2
 800636e:	bfb8      	it	lt
 8006370:	4613      	movlt	r3, r2
 8006372:	f8c9 3000 	str.w	r3, [r9]
 8006376:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800637a:	4606      	mov	r6, r0
 800637c:	460c      	mov	r4, r1
 800637e:	b112      	cbz	r2, 8006386 <_printf_common+0x2a>
 8006380:	3301      	adds	r3, #1
 8006382:	f8c9 3000 	str.w	r3, [r9]
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	0699      	lsls	r1, r3, #26
 800638a:	bf42      	ittt	mi
 800638c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006390:	3302      	addmi	r3, #2
 8006392:	f8c9 3000 	strmi.w	r3, [r9]
 8006396:	6825      	ldr	r5, [r4, #0]
 8006398:	f015 0506 	ands.w	r5, r5, #6
 800639c:	d107      	bne.n	80063ae <_printf_common+0x52>
 800639e:	f104 0a19 	add.w	sl, r4, #25
 80063a2:	68e3      	ldr	r3, [r4, #12]
 80063a4:	f8d9 2000 	ldr.w	r2, [r9]
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	42ab      	cmp	r3, r5
 80063ac:	dc28      	bgt.n	8006400 <_printf_common+0xa4>
 80063ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063b2:	6822      	ldr	r2, [r4, #0]
 80063b4:	3300      	adds	r3, #0
 80063b6:	bf18      	it	ne
 80063b8:	2301      	movne	r3, #1
 80063ba:	0692      	lsls	r2, r2, #26
 80063bc:	d42d      	bmi.n	800641a <_printf_common+0xbe>
 80063be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063c2:	4639      	mov	r1, r7
 80063c4:	4630      	mov	r0, r6
 80063c6:	47c0      	blx	r8
 80063c8:	3001      	adds	r0, #1
 80063ca:	d020      	beq.n	800640e <_printf_common+0xb2>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	68e5      	ldr	r5, [r4, #12]
 80063d0:	f8d9 2000 	ldr.w	r2, [r9]
 80063d4:	f003 0306 	and.w	r3, r3, #6
 80063d8:	2b04      	cmp	r3, #4
 80063da:	bf08      	it	eq
 80063dc:	1aad      	subeq	r5, r5, r2
 80063de:	68a3      	ldr	r3, [r4, #8]
 80063e0:	6922      	ldr	r2, [r4, #16]
 80063e2:	bf0c      	ite	eq
 80063e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063e8:	2500      	movne	r5, #0
 80063ea:	4293      	cmp	r3, r2
 80063ec:	bfc4      	itt	gt
 80063ee:	1a9b      	subgt	r3, r3, r2
 80063f0:	18ed      	addgt	r5, r5, r3
 80063f2:	f04f 0900 	mov.w	r9, #0
 80063f6:	341a      	adds	r4, #26
 80063f8:	454d      	cmp	r5, r9
 80063fa:	d11a      	bne.n	8006432 <_printf_common+0xd6>
 80063fc:	2000      	movs	r0, #0
 80063fe:	e008      	b.n	8006412 <_printf_common+0xb6>
 8006400:	2301      	movs	r3, #1
 8006402:	4652      	mov	r2, sl
 8006404:	4639      	mov	r1, r7
 8006406:	4630      	mov	r0, r6
 8006408:	47c0      	blx	r8
 800640a:	3001      	adds	r0, #1
 800640c:	d103      	bne.n	8006416 <_printf_common+0xba>
 800640e:	f04f 30ff 	mov.w	r0, #4294967295
 8006412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006416:	3501      	adds	r5, #1
 8006418:	e7c3      	b.n	80063a2 <_printf_common+0x46>
 800641a:	18e1      	adds	r1, r4, r3
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	2030      	movs	r0, #48	; 0x30
 8006420:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006424:	4422      	add	r2, r4
 8006426:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800642a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800642e:	3302      	adds	r3, #2
 8006430:	e7c5      	b.n	80063be <_printf_common+0x62>
 8006432:	2301      	movs	r3, #1
 8006434:	4622      	mov	r2, r4
 8006436:	4639      	mov	r1, r7
 8006438:	4630      	mov	r0, r6
 800643a:	47c0      	blx	r8
 800643c:	3001      	adds	r0, #1
 800643e:	d0e6      	beq.n	800640e <_printf_common+0xb2>
 8006440:	f109 0901 	add.w	r9, r9, #1
 8006444:	e7d8      	b.n	80063f8 <_printf_common+0x9c>
	...

08006448 <_printf_i>:
 8006448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800644c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006450:	460c      	mov	r4, r1
 8006452:	7e09      	ldrb	r1, [r1, #24]
 8006454:	b085      	sub	sp, #20
 8006456:	296e      	cmp	r1, #110	; 0x6e
 8006458:	4617      	mov	r7, r2
 800645a:	4606      	mov	r6, r0
 800645c:	4698      	mov	r8, r3
 800645e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006460:	f000 80b3 	beq.w	80065ca <_printf_i+0x182>
 8006464:	d822      	bhi.n	80064ac <_printf_i+0x64>
 8006466:	2963      	cmp	r1, #99	; 0x63
 8006468:	d036      	beq.n	80064d8 <_printf_i+0x90>
 800646a:	d80a      	bhi.n	8006482 <_printf_i+0x3a>
 800646c:	2900      	cmp	r1, #0
 800646e:	f000 80b9 	beq.w	80065e4 <_printf_i+0x19c>
 8006472:	2958      	cmp	r1, #88	; 0x58
 8006474:	f000 8083 	beq.w	800657e <_printf_i+0x136>
 8006478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800647c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006480:	e032      	b.n	80064e8 <_printf_i+0xa0>
 8006482:	2964      	cmp	r1, #100	; 0x64
 8006484:	d001      	beq.n	800648a <_printf_i+0x42>
 8006486:	2969      	cmp	r1, #105	; 0x69
 8006488:	d1f6      	bne.n	8006478 <_printf_i+0x30>
 800648a:	6820      	ldr	r0, [r4, #0]
 800648c:	6813      	ldr	r3, [r2, #0]
 800648e:	0605      	lsls	r5, r0, #24
 8006490:	f103 0104 	add.w	r1, r3, #4
 8006494:	d52a      	bpl.n	80064ec <_printf_i+0xa4>
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6011      	str	r1, [r2, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	da03      	bge.n	80064a6 <_printf_i+0x5e>
 800649e:	222d      	movs	r2, #45	; 0x2d
 80064a0:	425b      	negs	r3, r3
 80064a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80064a6:	486f      	ldr	r0, [pc, #444]	; (8006664 <_printf_i+0x21c>)
 80064a8:	220a      	movs	r2, #10
 80064aa:	e039      	b.n	8006520 <_printf_i+0xd8>
 80064ac:	2973      	cmp	r1, #115	; 0x73
 80064ae:	f000 809d 	beq.w	80065ec <_printf_i+0x1a4>
 80064b2:	d808      	bhi.n	80064c6 <_printf_i+0x7e>
 80064b4:	296f      	cmp	r1, #111	; 0x6f
 80064b6:	d020      	beq.n	80064fa <_printf_i+0xb2>
 80064b8:	2970      	cmp	r1, #112	; 0x70
 80064ba:	d1dd      	bne.n	8006478 <_printf_i+0x30>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	f043 0320 	orr.w	r3, r3, #32
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	e003      	b.n	80064ce <_printf_i+0x86>
 80064c6:	2975      	cmp	r1, #117	; 0x75
 80064c8:	d017      	beq.n	80064fa <_printf_i+0xb2>
 80064ca:	2978      	cmp	r1, #120	; 0x78
 80064cc:	d1d4      	bne.n	8006478 <_printf_i+0x30>
 80064ce:	2378      	movs	r3, #120	; 0x78
 80064d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064d4:	4864      	ldr	r0, [pc, #400]	; (8006668 <_printf_i+0x220>)
 80064d6:	e055      	b.n	8006584 <_printf_i+0x13c>
 80064d8:	6813      	ldr	r3, [r2, #0]
 80064da:	1d19      	adds	r1, r3, #4
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6011      	str	r1, [r2, #0]
 80064e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064e8:	2301      	movs	r3, #1
 80064ea:	e08c      	b.n	8006606 <_printf_i+0x1be>
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6011      	str	r1, [r2, #0]
 80064f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064f4:	bf18      	it	ne
 80064f6:	b21b      	sxthne	r3, r3
 80064f8:	e7cf      	b.n	800649a <_printf_i+0x52>
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	6825      	ldr	r5, [r4, #0]
 80064fe:	1d18      	adds	r0, r3, #4
 8006500:	6010      	str	r0, [r2, #0]
 8006502:	0628      	lsls	r0, r5, #24
 8006504:	d501      	bpl.n	800650a <_printf_i+0xc2>
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	e002      	b.n	8006510 <_printf_i+0xc8>
 800650a:	0668      	lsls	r0, r5, #25
 800650c:	d5fb      	bpl.n	8006506 <_printf_i+0xbe>
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	4854      	ldr	r0, [pc, #336]	; (8006664 <_printf_i+0x21c>)
 8006512:	296f      	cmp	r1, #111	; 0x6f
 8006514:	bf14      	ite	ne
 8006516:	220a      	movne	r2, #10
 8006518:	2208      	moveq	r2, #8
 800651a:	2100      	movs	r1, #0
 800651c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006520:	6865      	ldr	r5, [r4, #4]
 8006522:	60a5      	str	r5, [r4, #8]
 8006524:	2d00      	cmp	r5, #0
 8006526:	f2c0 8095 	blt.w	8006654 <_printf_i+0x20c>
 800652a:	6821      	ldr	r1, [r4, #0]
 800652c:	f021 0104 	bic.w	r1, r1, #4
 8006530:	6021      	str	r1, [r4, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d13d      	bne.n	80065b2 <_printf_i+0x16a>
 8006536:	2d00      	cmp	r5, #0
 8006538:	f040 808e 	bne.w	8006658 <_printf_i+0x210>
 800653c:	4665      	mov	r5, ip
 800653e:	2a08      	cmp	r2, #8
 8006540:	d10b      	bne.n	800655a <_printf_i+0x112>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	07db      	lsls	r3, r3, #31
 8006546:	d508      	bpl.n	800655a <_printf_i+0x112>
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	6862      	ldr	r2, [r4, #4]
 800654c:	429a      	cmp	r2, r3
 800654e:	bfde      	ittt	le
 8006550:	2330      	movle	r3, #48	; 0x30
 8006552:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006556:	f105 35ff 	addle.w	r5, r5, #4294967295
 800655a:	ebac 0305 	sub.w	r3, ip, r5
 800655e:	6123      	str	r3, [r4, #16]
 8006560:	f8cd 8000 	str.w	r8, [sp]
 8006564:	463b      	mov	r3, r7
 8006566:	aa03      	add	r2, sp, #12
 8006568:	4621      	mov	r1, r4
 800656a:	4630      	mov	r0, r6
 800656c:	f7ff fef6 	bl	800635c <_printf_common>
 8006570:	3001      	adds	r0, #1
 8006572:	d14d      	bne.n	8006610 <_printf_i+0x1c8>
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	b005      	add	sp, #20
 800657a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800657e:	4839      	ldr	r0, [pc, #228]	; (8006664 <_printf_i+0x21c>)
 8006580:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006584:	6813      	ldr	r3, [r2, #0]
 8006586:	6821      	ldr	r1, [r4, #0]
 8006588:	1d1d      	adds	r5, r3, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6015      	str	r5, [r2, #0]
 800658e:	060a      	lsls	r2, r1, #24
 8006590:	d50b      	bpl.n	80065aa <_printf_i+0x162>
 8006592:	07ca      	lsls	r2, r1, #31
 8006594:	bf44      	itt	mi
 8006596:	f041 0120 	orrmi.w	r1, r1, #32
 800659a:	6021      	strmi	r1, [r4, #0]
 800659c:	b91b      	cbnz	r3, 80065a6 <_printf_i+0x15e>
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	f022 0220 	bic.w	r2, r2, #32
 80065a4:	6022      	str	r2, [r4, #0]
 80065a6:	2210      	movs	r2, #16
 80065a8:	e7b7      	b.n	800651a <_printf_i+0xd2>
 80065aa:	064d      	lsls	r5, r1, #25
 80065ac:	bf48      	it	mi
 80065ae:	b29b      	uxthmi	r3, r3
 80065b0:	e7ef      	b.n	8006592 <_printf_i+0x14a>
 80065b2:	4665      	mov	r5, ip
 80065b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80065b8:	fb02 3311 	mls	r3, r2, r1, r3
 80065bc:	5cc3      	ldrb	r3, [r0, r3]
 80065be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065c2:	460b      	mov	r3, r1
 80065c4:	2900      	cmp	r1, #0
 80065c6:	d1f5      	bne.n	80065b4 <_printf_i+0x16c>
 80065c8:	e7b9      	b.n	800653e <_printf_i+0xf6>
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	6825      	ldr	r5, [r4, #0]
 80065ce:	6961      	ldr	r1, [r4, #20]
 80065d0:	1d18      	adds	r0, r3, #4
 80065d2:	6010      	str	r0, [r2, #0]
 80065d4:	0628      	lsls	r0, r5, #24
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	d501      	bpl.n	80065de <_printf_i+0x196>
 80065da:	6019      	str	r1, [r3, #0]
 80065dc:	e002      	b.n	80065e4 <_printf_i+0x19c>
 80065de:	066a      	lsls	r2, r5, #25
 80065e0:	d5fb      	bpl.n	80065da <_printf_i+0x192>
 80065e2:	8019      	strh	r1, [r3, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	6123      	str	r3, [r4, #16]
 80065e8:	4665      	mov	r5, ip
 80065ea:	e7b9      	b.n	8006560 <_printf_i+0x118>
 80065ec:	6813      	ldr	r3, [r2, #0]
 80065ee:	1d19      	adds	r1, r3, #4
 80065f0:	6011      	str	r1, [r2, #0]
 80065f2:	681d      	ldr	r5, [r3, #0]
 80065f4:	6862      	ldr	r2, [r4, #4]
 80065f6:	2100      	movs	r1, #0
 80065f8:	4628      	mov	r0, r5
 80065fa:	f7f9 fdf9 	bl	80001f0 <memchr>
 80065fe:	b108      	cbz	r0, 8006604 <_printf_i+0x1bc>
 8006600:	1b40      	subs	r0, r0, r5
 8006602:	6060      	str	r0, [r4, #4]
 8006604:	6863      	ldr	r3, [r4, #4]
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	2300      	movs	r3, #0
 800660a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800660e:	e7a7      	b.n	8006560 <_printf_i+0x118>
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	462a      	mov	r2, r5
 8006614:	4639      	mov	r1, r7
 8006616:	4630      	mov	r0, r6
 8006618:	47c0      	blx	r8
 800661a:	3001      	adds	r0, #1
 800661c:	d0aa      	beq.n	8006574 <_printf_i+0x12c>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	079b      	lsls	r3, r3, #30
 8006622:	d413      	bmi.n	800664c <_printf_i+0x204>
 8006624:	68e0      	ldr	r0, [r4, #12]
 8006626:	9b03      	ldr	r3, [sp, #12]
 8006628:	4298      	cmp	r0, r3
 800662a:	bfb8      	it	lt
 800662c:	4618      	movlt	r0, r3
 800662e:	e7a3      	b.n	8006578 <_printf_i+0x130>
 8006630:	2301      	movs	r3, #1
 8006632:	464a      	mov	r2, r9
 8006634:	4639      	mov	r1, r7
 8006636:	4630      	mov	r0, r6
 8006638:	47c0      	blx	r8
 800663a:	3001      	adds	r0, #1
 800663c:	d09a      	beq.n	8006574 <_printf_i+0x12c>
 800663e:	3501      	adds	r5, #1
 8006640:	68e3      	ldr	r3, [r4, #12]
 8006642:	9a03      	ldr	r2, [sp, #12]
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	42ab      	cmp	r3, r5
 8006648:	dcf2      	bgt.n	8006630 <_printf_i+0x1e8>
 800664a:	e7eb      	b.n	8006624 <_printf_i+0x1dc>
 800664c:	2500      	movs	r5, #0
 800664e:	f104 0919 	add.w	r9, r4, #25
 8006652:	e7f5      	b.n	8006640 <_printf_i+0x1f8>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ac      	bne.n	80065b2 <_printf_i+0x16a>
 8006658:	7803      	ldrb	r3, [r0, #0]
 800665a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800665e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006662:	e76c      	b.n	800653e <_printf_i+0xf6>
 8006664:	08006d49 	.word	0x08006d49
 8006668:	08006d5a 	.word	0x08006d5a

0800666c <memmove>:
 800666c:	4288      	cmp	r0, r1
 800666e:	b510      	push	{r4, lr}
 8006670:	eb01 0302 	add.w	r3, r1, r2
 8006674:	d807      	bhi.n	8006686 <memmove+0x1a>
 8006676:	1e42      	subs	r2, r0, #1
 8006678:	4299      	cmp	r1, r3
 800667a:	d00a      	beq.n	8006692 <memmove+0x26>
 800667c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006680:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006684:	e7f8      	b.n	8006678 <memmove+0xc>
 8006686:	4283      	cmp	r3, r0
 8006688:	d9f5      	bls.n	8006676 <memmove+0xa>
 800668a:	1881      	adds	r1, r0, r2
 800668c:	1ad2      	subs	r2, r2, r3
 800668e:	42d3      	cmn	r3, r2
 8006690:	d100      	bne.n	8006694 <memmove+0x28>
 8006692:	bd10      	pop	{r4, pc}
 8006694:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006698:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800669c:	e7f7      	b.n	800668e <memmove+0x22>
	...

080066a0 <_free_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4605      	mov	r5, r0
 80066a4:	2900      	cmp	r1, #0
 80066a6:	d045      	beq.n	8006734 <_free_r+0x94>
 80066a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066ac:	1f0c      	subs	r4, r1, #4
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	bfb8      	it	lt
 80066b2:	18e4      	addlt	r4, r4, r3
 80066b4:	f000 f8d2 	bl	800685c <__malloc_lock>
 80066b8:	4a1f      	ldr	r2, [pc, #124]	; (8006738 <_free_r+0x98>)
 80066ba:	6813      	ldr	r3, [r2, #0]
 80066bc:	4610      	mov	r0, r2
 80066be:	b933      	cbnz	r3, 80066ce <_free_r+0x2e>
 80066c0:	6063      	str	r3, [r4, #4]
 80066c2:	6014      	str	r4, [r2, #0]
 80066c4:	4628      	mov	r0, r5
 80066c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ca:	f000 b8c8 	b.w	800685e <__malloc_unlock>
 80066ce:	42a3      	cmp	r3, r4
 80066d0:	d90c      	bls.n	80066ec <_free_r+0x4c>
 80066d2:	6821      	ldr	r1, [r4, #0]
 80066d4:	1862      	adds	r2, r4, r1
 80066d6:	4293      	cmp	r3, r2
 80066d8:	bf04      	itt	eq
 80066da:	681a      	ldreq	r2, [r3, #0]
 80066dc:	685b      	ldreq	r3, [r3, #4]
 80066de:	6063      	str	r3, [r4, #4]
 80066e0:	bf04      	itt	eq
 80066e2:	1852      	addeq	r2, r2, r1
 80066e4:	6022      	streq	r2, [r4, #0]
 80066e6:	6004      	str	r4, [r0, #0]
 80066e8:	e7ec      	b.n	80066c4 <_free_r+0x24>
 80066ea:	4613      	mov	r3, r2
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	b10a      	cbz	r2, 80066f4 <_free_r+0x54>
 80066f0:	42a2      	cmp	r2, r4
 80066f2:	d9fa      	bls.n	80066ea <_free_r+0x4a>
 80066f4:	6819      	ldr	r1, [r3, #0]
 80066f6:	1858      	adds	r0, r3, r1
 80066f8:	42a0      	cmp	r0, r4
 80066fa:	d10b      	bne.n	8006714 <_free_r+0x74>
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	4401      	add	r1, r0
 8006700:	1858      	adds	r0, r3, r1
 8006702:	4282      	cmp	r2, r0
 8006704:	6019      	str	r1, [r3, #0]
 8006706:	d1dd      	bne.n	80066c4 <_free_r+0x24>
 8006708:	6810      	ldr	r0, [r2, #0]
 800670a:	6852      	ldr	r2, [r2, #4]
 800670c:	605a      	str	r2, [r3, #4]
 800670e:	4401      	add	r1, r0
 8006710:	6019      	str	r1, [r3, #0]
 8006712:	e7d7      	b.n	80066c4 <_free_r+0x24>
 8006714:	d902      	bls.n	800671c <_free_r+0x7c>
 8006716:	230c      	movs	r3, #12
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	e7d3      	b.n	80066c4 <_free_r+0x24>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	1821      	adds	r1, r4, r0
 8006720:	428a      	cmp	r2, r1
 8006722:	bf04      	itt	eq
 8006724:	6811      	ldreq	r1, [r2, #0]
 8006726:	6852      	ldreq	r2, [r2, #4]
 8006728:	6062      	str	r2, [r4, #4]
 800672a:	bf04      	itt	eq
 800672c:	1809      	addeq	r1, r1, r0
 800672e:	6021      	streq	r1, [r4, #0]
 8006730:	605c      	str	r4, [r3, #4]
 8006732:	e7c7      	b.n	80066c4 <_free_r+0x24>
 8006734:	bd38      	pop	{r3, r4, r5, pc}
 8006736:	bf00      	nop
 8006738:	2000499c 	.word	0x2000499c

0800673c <_malloc_r>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	1ccd      	adds	r5, r1, #3
 8006740:	f025 0503 	bic.w	r5, r5, #3
 8006744:	3508      	adds	r5, #8
 8006746:	2d0c      	cmp	r5, #12
 8006748:	bf38      	it	cc
 800674a:	250c      	movcc	r5, #12
 800674c:	2d00      	cmp	r5, #0
 800674e:	4606      	mov	r6, r0
 8006750:	db01      	blt.n	8006756 <_malloc_r+0x1a>
 8006752:	42a9      	cmp	r1, r5
 8006754:	d903      	bls.n	800675e <_malloc_r+0x22>
 8006756:	230c      	movs	r3, #12
 8006758:	6033      	str	r3, [r6, #0]
 800675a:	2000      	movs	r0, #0
 800675c:	bd70      	pop	{r4, r5, r6, pc}
 800675e:	f000 f87d 	bl	800685c <__malloc_lock>
 8006762:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <_malloc_r+0xac>)
 8006764:	6814      	ldr	r4, [r2, #0]
 8006766:	4621      	mov	r1, r4
 8006768:	b991      	cbnz	r1, 8006790 <_malloc_r+0x54>
 800676a:	4c20      	ldr	r4, [pc, #128]	; (80067ec <_malloc_r+0xb0>)
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	b91b      	cbnz	r3, 8006778 <_malloc_r+0x3c>
 8006770:	4630      	mov	r0, r6
 8006772:	f000 f863 	bl	800683c <_sbrk_r>
 8006776:	6020      	str	r0, [r4, #0]
 8006778:	4629      	mov	r1, r5
 800677a:	4630      	mov	r0, r6
 800677c:	f000 f85e 	bl	800683c <_sbrk_r>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d124      	bne.n	80067ce <_malloc_r+0x92>
 8006784:	230c      	movs	r3, #12
 8006786:	6033      	str	r3, [r6, #0]
 8006788:	4630      	mov	r0, r6
 800678a:	f000 f868 	bl	800685e <__malloc_unlock>
 800678e:	e7e4      	b.n	800675a <_malloc_r+0x1e>
 8006790:	680b      	ldr	r3, [r1, #0]
 8006792:	1b5b      	subs	r3, r3, r5
 8006794:	d418      	bmi.n	80067c8 <_malloc_r+0x8c>
 8006796:	2b0b      	cmp	r3, #11
 8006798:	d90f      	bls.n	80067ba <_malloc_r+0x7e>
 800679a:	600b      	str	r3, [r1, #0]
 800679c:	50cd      	str	r5, [r1, r3]
 800679e:	18cc      	adds	r4, r1, r3
 80067a0:	4630      	mov	r0, r6
 80067a2:	f000 f85c 	bl	800685e <__malloc_unlock>
 80067a6:	f104 000b 	add.w	r0, r4, #11
 80067aa:	1d23      	adds	r3, r4, #4
 80067ac:	f020 0007 	bic.w	r0, r0, #7
 80067b0:	1ac3      	subs	r3, r0, r3
 80067b2:	d0d3      	beq.n	800675c <_malloc_r+0x20>
 80067b4:	425a      	negs	r2, r3
 80067b6:	50e2      	str	r2, [r4, r3]
 80067b8:	e7d0      	b.n	800675c <_malloc_r+0x20>
 80067ba:	428c      	cmp	r4, r1
 80067bc:	684b      	ldr	r3, [r1, #4]
 80067be:	bf16      	itet	ne
 80067c0:	6063      	strne	r3, [r4, #4]
 80067c2:	6013      	streq	r3, [r2, #0]
 80067c4:	460c      	movne	r4, r1
 80067c6:	e7eb      	b.n	80067a0 <_malloc_r+0x64>
 80067c8:	460c      	mov	r4, r1
 80067ca:	6849      	ldr	r1, [r1, #4]
 80067cc:	e7cc      	b.n	8006768 <_malloc_r+0x2c>
 80067ce:	1cc4      	adds	r4, r0, #3
 80067d0:	f024 0403 	bic.w	r4, r4, #3
 80067d4:	42a0      	cmp	r0, r4
 80067d6:	d005      	beq.n	80067e4 <_malloc_r+0xa8>
 80067d8:	1a21      	subs	r1, r4, r0
 80067da:	4630      	mov	r0, r6
 80067dc:	f000 f82e 	bl	800683c <_sbrk_r>
 80067e0:	3001      	adds	r0, #1
 80067e2:	d0cf      	beq.n	8006784 <_malloc_r+0x48>
 80067e4:	6025      	str	r5, [r4, #0]
 80067e6:	e7db      	b.n	80067a0 <_malloc_r+0x64>
 80067e8:	2000499c 	.word	0x2000499c
 80067ec:	200049a0 	.word	0x200049a0

080067f0 <_realloc_r>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	4607      	mov	r7, r0
 80067f4:	4614      	mov	r4, r2
 80067f6:	460e      	mov	r6, r1
 80067f8:	b921      	cbnz	r1, 8006804 <_realloc_r+0x14>
 80067fa:	4611      	mov	r1, r2
 80067fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006800:	f7ff bf9c 	b.w	800673c <_malloc_r>
 8006804:	b922      	cbnz	r2, 8006810 <_realloc_r+0x20>
 8006806:	f7ff ff4b 	bl	80066a0 <_free_r>
 800680a:	4625      	mov	r5, r4
 800680c:	4628      	mov	r0, r5
 800680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006810:	f000 f826 	bl	8006860 <_malloc_usable_size_r>
 8006814:	42a0      	cmp	r0, r4
 8006816:	d20f      	bcs.n	8006838 <_realloc_r+0x48>
 8006818:	4621      	mov	r1, r4
 800681a:	4638      	mov	r0, r7
 800681c:	f7ff ff8e 	bl	800673c <_malloc_r>
 8006820:	4605      	mov	r5, r0
 8006822:	2800      	cmp	r0, #0
 8006824:	d0f2      	beq.n	800680c <_realloc_r+0x1c>
 8006826:	4631      	mov	r1, r6
 8006828:	4622      	mov	r2, r4
 800682a:	f7ff fc11 	bl	8006050 <memcpy>
 800682e:	4631      	mov	r1, r6
 8006830:	4638      	mov	r0, r7
 8006832:	f7ff ff35 	bl	80066a0 <_free_r>
 8006836:	e7e9      	b.n	800680c <_realloc_r+0x1c>
 8006838:	4635      	mov	r5, r6
 800683a:	e7e7      	b.n	800680c <_realloc_r+0x1c>

0800683c <_sbrk_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4c06      	ldr	r4, [pc, #24]	; (8006858 <_sbrk_r+0x1c>)
 8006840:	2300      	movs	r3, #0
 8006842:	4605      	mov	r5, r0
 8006844:	4608      	mov	r0, r1
 8006846:	6023      	str	r3, [r4, #0]
 8006848:	f7fa fb56 	bl	8000ef8 <_sbrk>
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d102      	bne.n	8006856 <_sbrk_r+0x1a>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	b103      	cbz	r3, 8006856 <_sbrk_r+0x1a>
 8006854:	602b      	str	r3, [r5, #0]
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	20004aa4 	.word	0x20004aa4

0800685c <__malloc_lock>:
 800685c:	4770      	bx	lr

0800685e <__malloc_unlock>:
 800685e:	4770      	bx	lr

08006860 <_malloc_usable_size_r>:
 8006860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006864:	1f18      	subs	r0, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	bfbc      	itt	lt
 800686a:	580b      	ldrlt	r3, [r1, r0]
 800686c:	18c0      	addlt	r0, r0, r3
 800686e:	4770      	bx	lr

08006870 <_init>:
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	bf00      	nop
 8006874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006876:	bc08      	pop	{r3}
 8006878:	469e      	mov	lr, r3
 800687a:	4770      	bx	lr

0800687c <_fini>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	bf00      	nop
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr
