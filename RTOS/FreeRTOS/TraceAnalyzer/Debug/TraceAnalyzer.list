
TraceAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009058  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000192c  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab24  0800ab24  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab24  0800ab24  0001ab24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab2c  0800ab2c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab2c  0800ab2c  0001ab2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab30  0800ab30  0001ab30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ab34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006418  20000080  0800abb4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006498  0800abb4  00026498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e292  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000362a  00000000  00000000  0003e342  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001590  00000000  00000000  00041970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  00042f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004e55  00000000  00000000  00044328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012d23  00000000  00000000  0004917d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a22b3  00000000  00000000  0005bea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d90  00000000  00000000  000fe1d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091e0 	.word	0x080091e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080091e0 	.word	0x080091e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f002 f984 	bl	80028a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f87c 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f910 	bl	80007c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f8e4 	bl	800076c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  vTraceEnable(TRC_START);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 fdcf 	bl	8001148 <vTraceEnable>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005aa:	f003 ffaf 	bl	800450c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex */
  MutexHandle = osMutexNew(&Mutex_attributes);
 80005ae:	4827      	ldr	r0, [pc, #156]	; (800064c <main+0xbc>)
 80005b0:	f004 f8ea 	bl	8004788 <osMutexNew>
 80005b4:	4602      	mov	r2, r0
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <main+0xc0>)
 80005b8:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  Semaphore = xSemaphoreCreateMutex();
 80005ba:	2001      	movs	r0, #1
 80005bc:	f004 fcee 	bl	8004f9c <xQueueCreateMutex>
 80005c0:	4602      	mov	r2, r0
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <main+0xc4>)
 80005c4:	601a      	str	r2, [r3, #0]

  SemaphoreLectureRapide = xSemaphoreCreateMutex();
 80005c6:	2001      	movs	r0, #1
 80005c8:	f004 fce8 	bl	8004f9c <xQueueCreateMutex>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b22      	ldr	r3, [pc, #136]	; (8000658 <main+0xc8>)
 80005d0:	601a      	str	r2, [r3, #0]

  SemaphoreReLecture = xSemaphoreCreateMutex();
 80005d2:	2001      	movs	r0, #1
 80005d4:	f004 fce2 	bl	8004f9c <xQueueCreateMutex>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <main+0xcc>)
 80005dc:	601a      	str	r2, [r3, #0]

  SemaphoreInternational = xSemaphoreCreateMutex();
 80005de:	2001      	movs	r0, #1
 80005e0:	f004 fcdc 	bl	8004f9c <xQueueCreateMutex>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <main+0xd0>)
 80005e8:	601a      	str	r2, [r3, #0]

  SemaphoreNational = xSemaphoreCreateMutex();
 80005ea:	2001      	movs	r0, #1
 80005ec:	f004 fcd6 	bl	8004f9c <xQueueCreateMutex>
 80005f0:	4602      	mov	r2, r0
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <main+0xd4>)
 80005f4:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of File_tapis_arrivee */
  File_tapis_arriveeHandle = osMessageQueueNew (x, sizeof(unsigned int), &File_tapis_arrivee_attributes);
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <main+0xd8>)
 80005f8:	2104      	movs	r1, #4
 80005fa:	200a      	movs	r0, #10
 80005fc:	f004 f95e 	bl	80048bc <osMessageQueueNew>
 8000600:	4602      	mov	r2, r0
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <main+0xdc>)
 8000604:	601a      	str	r2, [r3, #0]

  /* creation of File_tapis_relecture */
  File_tapis_relectureHandle = osMessageQueueNew (y, sizeof(unsigned int), &File_tapis_relecture_attributes);
 8000606:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <main+0xe0>)
 8000608:	2104      	movs	r1, #4
 800060a:	200a      	movs	r0, #10
 800060c:	f004 f956 	bl	80048bc <osMessageQueueNew>
 8000610:	4602      	mov	r2, r0
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <main+0xe4>)
 8000614:	601a      	str	r2, [r3, #0]

  /* creation of File_depart_national */
  File_depart_nationalHandle = osMessageQueueNew (z, sizeof(unsigned int), &File_depart_national_attributes);
 8000616:	4a18      	ldr	r2, [pc, #96]	; (8000678 <main+0xe8>)
 8000618:	2104      	movs	r1, #4
 800061a:	200a      	movs	r0, #10
 800061c:	f004 f94e 	bl	80048bc <osMessageQueueNew>
 8000620:	4602      	mov	r2, r0
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <main+0xec>)
 8000624:	601a      	str	r2, [r3, #0]

  /* creation of File_depart_international */
  File_depart_internationalHandle = osMessageQueueNew (z, sizeof(unsigned int), &File_depart_international_attributes);
 8000626:	4a16      	ldr	r2, [pc, #88]	; (8000680 <main+0xf0>)
 8000628:	2104      	movs	r1, #4
 800062a:	200a      	movs	r0, #10
 800062c:	f004 f946 	bl	80048bc <osMessageQueueNew>
 8000630:	4602      	mov	r2, r0
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <main+0xf4>)
 8000634:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_Tache_arri */
  Task_Tache_arriHandle = osThreadNew(Tache_arrivee, NULL, &Task_Tache_arri_attributes);
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <main+0xf8>)
 8000638:	2100      	movs	r1, #0
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <main+0xfc>)
 800063c:	f003 ffd0 	bl	80045e0 <osThreadNew>
 8000640:	4602      	mov	r2, r0
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <main+0x100>)
 8000644:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000646:	f003 ff95 	bl	8004574 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	e7fe      	b.n	800064a <main+0xba>
 800064c:	0800aac8 	.word	0x0800aac8
 8000650:	200049f8 	.word	0x200049f8
 8000654:	20004a0c 	.word	0x20004a0c
 8000658:	20004a14 	.word	0x20004a14
 800065c:	200049fc 	.word	0x200049fc
 8000660:	200049f4 	.word	0x200049f4
 8000664:	200049f0 	.word	0x200049f0
 8000668:	0800aa68 	.word	0x0800aa68
 800066c:	20004a10 	.word	0x20004a10
 8000670:	0800aa80 	.word	0x0800aa80
 8000674:	20004a00 	.word	0x20004a00
 8000678:	0800aa98 	.word	0x0800aa98
 800067c:	20004a5c 	.word	0x20004a5c
 8000680:	0800aab0 	.word	0x0800aab0
 8000684:	200049ec 	.word	0x200049ec
 8000688:	0800a9b4 	.word	0x0800a9b4
 800068c:	080008f9 	.word	0x080008f9
 8000690:	20004a64 	.word	0x20004a64

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f008 f997 	bl	80089d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a28      	ldr	r2, [pc, #160]	; (8000764 <SystemClock_Config+0xd0>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xd0>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd4>)
 80006e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000716:	2307      	movs	r3, #7
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fb7e 	bl	8002e20 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072a:	f000 faf8 	bl	8000d1e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fdd8 	bl	8003300 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000756:	f000 fae2 	bl	8000d1e <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_USART2_UART_Init+0x50>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f003 f9ee 	bl	8003b84 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ae:	f000 fab6 	bl	8000d1e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20004a18 	.word	0x20004a18
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a2c      	ldr	r2, [pc, #176]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a25      	ldr	r2, [pc, #148]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a1e      	ldr	r2, [pc, #120]	; (8000890 <MX_GPIO_Init+0xd0>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a17      	ldr	r2, [pc, #92]	; (8000890 <MX_GPIO_Init+0xd0>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <MX_GPIO_Init+0xd4>)
 800084c:	f002 face 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_GPIO_Init+0xd8>)
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_GPIO_Init+0xdc>)
 8000866:	f002 f93f 	bl	8002ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086a:	2320      	movs	r3, #32
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_GPIO_Init+0xd4>)
 8000882:	f002 f931 	bl	8002ae8 <HAL_GPIO_Init>

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000
 8000898:	10210000 	.word	0x10210000
 800089c:	40020800 	.word	0x40020800

080008a0 <affiche_message>:

/* USER CODE BEGIN 4 */
void affiche_message(char *txt){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	//semaphore take
	if (xSemaphoreTake(Semaphore,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <affiche_message+0x48>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008b0:	4618      	mov	r0, r3
 80008b2:	f005 f8b7 	bl	8005a24 <xQueueSemaphoreTake>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00a      	beq.n	80008d2 <affiche_message+0x32>
	{
		HAL_UART_Transmit(&huart2, txt, strlen(txt), HAL_MAX_DELAY);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff fc8f 	bl	80001e0 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <affiche_message+0x4c>)
 80008ce:	f003 f9a6 	bl	8003c1e <HAL_UART_Transmit>
	}
	xSemaphoreGive(Semaphore); //On rend le jeton
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <affiche_message+0x48>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	2300      	movs	r3, #0
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	f004 fb92 	bl	8005004 <xQueueGenericSend>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20004a0c 	.word	0x20004a0c
 80008ec:	20004a18 	.word	0x20004a18

080008f0 <vApplicationIdleHook>:
/* USER CODE END 4 */

void vApplicationIdleHook(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	for(;;){
 80008f4:	e7fe      	b.n	80008f4 <vApplicationIdleHook+0x4>
	...

080008f8 <Tache_arrivee>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_arrivee */
void Tache_arrivee(void *argument)
{
 80008f8:	b5b0      	push	{r4, r5, r7, lr}
 80008fa:	b0a4      	sub	sp, #144	; 0x90
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	unsigned int liste_colis[]={ 1,  3,  1,  2,  3,  0}; // Etat des bits B2, B1 et B0 -> 0 à 3 en décimal car B2=0
 8000900:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <Tache_arrivee+0xf8>)
 8000902:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000906:	461d      	mov	r5, r3
 8000908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000910:	e884 0003 	stmia.w	r4, {r0, r1}
	unsigned int liste_delai[]={ 5,100,200, 300,40, 500}; // Temps d'attente en ms pour le colis suivant
 8000914:	4b37      	ldr	r3, [pc, #220]	; (80009f4 <Tache_arrivee+0xfc>)
 8000916:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800091a:	461d      	mov	r5, r3
 800091c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800091e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000920:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000924:	e884 0003 	stmia.w	r4, {r0, r1}
	unsigned int num_colis = 0; // Initilisation du numéro de colis
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	unsigned int colis; // Colis (étiquette)
	char etiquette;
	char buff[] = "Le colis No 1 est depose sur le tapis roulant et il porte l'etiquette 5\r\n";
 800092e:	4a32      	ldr	r2, [pc, #200]	; (80009f8 <Tache_arrivee+0x100>)
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4611      	mov	r1, r2
 8000936:	224a      	movs	r2, #74	; 0x4a
 8000938:	4618      	mov	r0, r3
 800093a:	f008 f841 	bl	80089c0 <memcpy>
	/* creation of Task_Tache_lect */
	Task_Tache_lectHandle = osThreadNew(Tache_lecture_rapide, NULL, &Task_Tache_lect_attributes);
 800093e:	4a2f      	ldr	r2, [pc, #188]	; (80009fc <Tache_arrivee+0x104>)
 8000940:	2100      	movs	r1, #0
 8000942:	482f      	ldr	r0, [pc, #188]	; (8000a00 <Tache_arrivee+0x108>)
 8000944:	f003 fe4c 	bl	80045e0 <osThreadNew>
 8000948:	4602      	mov	r2, r0
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <Tache_arrivee+0x10c>)
 800094c:	601a      	str	r2, [r3, #0]

	for(;;){
		etiquette = liste_colis[num_colis % (sizeof(liste_colis)/sizeof(unsigned int))];
 800094e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000952:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <Tache_arrivee+0x110>)
 8000954:	fba3 2301 	umull	r2, r3, r3, r1
 8000958:	089a      	lsrs	r2, r3, #2
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	1aca      	subs	r2, r1, r3
 8000964:	0093      	lsls	r3, r2, #2
 8000966:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800096a:	4413      	add	r3, r2
 800096c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000970:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		colis = (num_colis<<3) + etiquette;
 8000974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000978:	00da      	lsls	r2, r3, #3
 800097a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800097e:	4413      	add	r3, r2
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
		if(!xQueueSendToBack(File_tapis_arriveeHandle, &colis, TIMEOUT_FILE_TAPIS_ARRIVEE)) // Il faudra gérer le débordement et afficher un message d'erreur
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <Tache_arrivee+0x114>)
 8000984:	6818      	ldr	r0, [r3, #0]
 8000986:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800098a:	2300      	movs	r3, #0
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	f004 fb39 	bl	8005004 <xQueueGenericSend>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <Tache_arrivee+0xa6>
		{
			affiche_message("Debordement : Echec de l'envoi du colis\r\n");
 8000998:	481d      	ldr	r0, [pc, #116]	; (8000a10 <Tache_arrivee+0x118>)
 800099a:	f7ff ff81 	bl	80008a0 <affiche_message>
		}
		sprintf(buff,"Le colis No %d est depose sur le tapis roulant et il porte l'etiquette %d\r\n",num_colis, etiquette);	// Il faudra gérer l'affichage comme une ressource partagée
 800099e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80009a2:	f107 0008 	add.w	r0, r7, #8
 80009a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80009aa:	491a      	ldr	r1, [pc, #104]	; (8000a14 <Tache_arrivee+0x11c>)
 80009ac:	f008 f81c 	bl	80089e8 <siprintf>
		num_colis++;
 80009b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009b4:	3301      	adds	r3, #1
 80009b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		affiche_message(buff);
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff6e 	bl	80008a0 <affiche_message>
		vTaskDelay(liste_delai[num_colis % (sizeof(liste_colis)/sizeof(unsigned int))]/portTICK_RATE_MS); // Attente entre deux colis en ms
 80009c4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <Tache_arrivee+0x110>)
 80009ca:	fba3 2301 	umull	r2, r3, r3, r1
 80009ce:	089a      	lsrs	r2, r3, #2
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	1aca      	subs	r2, r1, r3
 80009da:	0093      	lsls	r3, r2, #2
 80009dc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80009e0:	4413      	add	r3, r2
 80009e2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f005 ffdc 	bl	80069a4 <vTaskDelay>
		etiquette = liste_colis[num_colis % (sizeof(liste_colis)/sizeof(unsigned int))];
 80009ec:	e7af      	b.n	800094e <Tache_arrivee+0x56>
 80009ee:	bf00      	nop
 80009f0:	08009328 	.word	0x08009328
 80009f4:	08009340 	.word	0x08009340
 80009f8:	08009358 	.word	0x08009358
 80009fc:	0800a9d8 	.word	0x0800a9d8
 8000a00:	08000a19 	.word	0x08000a19
 8000a04:	20004a58 	.word	0x20004a58
 8000a08:	aaaaaaab 	.word	0xaaaaaaab
 8000a0c:	20004a10 	.word	0x20004a10
 8000a10:	080092b0 	.word	0x080092b0
 8000a14:	080092dc 	.word	0x080092dc

08000a18 <Tache_lecture_rapide>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_lecture_rapide */
void Tache_lecture_rapide(void *argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b090      	sub	sp, #64	; 0x40
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tache_lecture_rapide */
  unsigned int colis; // buffer de la file
  char buff[50];
  /* Infinite loop */
  Task_Tache_inteHandle = osThreadNew(Tache_depart_international, NULL, &Task_Tache_inte_attributes);
 8000a20:	4a3e      	ldr	r2, [pc, #248]	; (8000b1c <Tache_lecture_rapide+0x104>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	483e      	ldr	r0, [pc, #248]	; (8000b20 <Tache_lecture_rapide+0x108>)
 8000a26:	f003 fddb 	bl	80045e0 <osThreadNew>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	4b3d      	ldr	r3, [pc, #244]	; (8000b24 <Tache_lecture_rapide+0x10c>)
 8000a2e:	601a      	str	r2, [r3, #0]
  Task_Tache_depaHandle = osThreadNew(Tache_depart_national, NULL, &Task_Tache_depa_attributes);
 8000a30:	4a3d      	ldr	r2, [pc, #244]	; (8000b28 <Tache_lecture_rapide+0x110>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	483d      	ldr	r0, [pc, #244]	; (8000b2c <Tache_lecture_rapide+0x114>)
 8000a36:	f003 fdd3 	bl	80045e0 <osThreadNew>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <Tache_lecture_rapide+0x118>)
 8000a3e:	601a      	str	r2, [r3, #0]
  Task_Tache_lectHandle = osThreadNew(Tache_relecture, NULL, &Task_Tache_rele_attributes);
 8000a40:	4a3c      	ldr	r2, [pc, #240]	; (8000b34 <Tache_lecture_rapide+0x11c>)
 8000a42:	2100      	movs	r1, #0
 8000a44:	483c      	ldr	r0, [pc, #240]	; (8000b38 <Tache_lecture_rapide+0x120>)
 8000a46:	f003 fdcb 	bl	80045e0 <osThreadNew>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <Tache_lecture_rapide+0x124>)
 8000a4e:	601a      	str	r2, [r3, #0]
  for(;;)
  {
	  if (xQueuePeek(File_tapis_arriveeHandle,&colis,TIMEOUT_FILE_TAPIS_ARRIVEE)) //Si on reçoit quelque chose dans la file.
 8000a50:	4b3b      	ldr	r3, [pc, #236]	; (8000b40 <Tache_lecture_rapide+0x128>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a58:	2264      	movs	r2, #100	; 0x64
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f005 fa0e 	bl	8005e7c <xQueuePeek>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d056      	beq.n	8000b14 <Tache_lecture_rapide+0xfc>
		{
		  if (xQueueReceive(File_tapis_arriveeHandle,&colis,TIMEOUT_FILE_TAPIS_ARRIVEE)) //Alors on l'efface de la file
 8000a66:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <Tache_lecture_rapide+0x128>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a6e:	2264      	movs	r2, #100	; 0x64
 8000a70:	4618      	mov	r0, r3
 8000a72:	f004 fdd5 	bl	8005620 <xQueueReceive>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d04b      	beq.n	8000b14 <Tache_lecture_rapide+0xfc>
			{

			  colis = colis & 0xFFFFFFFB;//Set du bit B2 à 0;
 8000a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a7e:	f023 0304 	bic.w	r3, r3, #4
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c

			  if (colis & 2) //Si B1 = 1 : Etiquette invisible
 8000a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d00e      	beq.n	8000aac <Tache_lecture_rapide+0x94>
			  {
				  if(!xQueueSendToBack(File_tapis_relectureHandle, &colis, TIMEOUT_FILE_TAPIS_RELECTURE)) // Il faudra gérer le débordement et afficher un message d'erreur
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <Tache_lecture_rapide+0x12c>)
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a96:	2300      	movs	r3, #0
 8000a98:	2264      	movs	r2, #100	; 0x64
 8000a9a:	f004 fab3 	bl	8005004 <xQueueGenericSend>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d12b      	bne.n	8000afc <Tache_lecture_rapide+0xe4>
				{
					affiche_message("Debordement : Echec de le la file relecture\r\n");
 8000aa4:	4828      	ldr	r0, [pc, #160]	; (8000b48 <Tache_lecture_rapide+0x130>)
 8000aa6:	f7ff fefb 	bl	80008a0 <affiche_message>
 8000aaa:	e027      	b.n	8000afc <Tache_lecture_rapide+0xe4>
				}
			  }
			  else{ //B1=0 : Etiquette visible
				  if (colis & 1){//Traitement colis tâche national si B0 ==0
 8000aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d011      	beq.n	8000ada <Tache_lecture_rapide+0xc2>
					  affiche_message("Mise sur tapis pour le national !\r\n");
 8000ab6:	4825      	ldr	r0, [pc, #148]	; (8000b4c <Tache_lecture_rapide+0x134>)
 8000ab8:	f7ff fef2 	bl	80008a0 <affiche_message>
					  if(!xQueueSendToBack(File_depart_nationalHandle, &colis, TIMEOUT_FILE_TAPIS_DEPART)) // Il faudra gérer le débordement et afficher un message d'erreur
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <Tache_lecture_rapide+0x138>)
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2264      	movs	r2, #100	; 0x64
 8000ac8:	f004 fa9c 	bl	8005004 <xQueueGenericSend>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d114      	bne.n	8000afc <Tache_lecture_rapide+0xe4>
						{
							affiche_message("Debordement : Echec de l'envoi du colis au national\r\n");
 8000ad2:	4820      	ldr	r0, [pc, #128]	; (8000b54 <Tache_lecture_rapide+0x13c>)
 8000ad4:	f7ff fee4 	bl	80008a0 <affiche_message>
 8000ad8:	e010      	b.n	8000afc <Tache_lecture_rapide+0xe4>
						}
				  }
				  else{//Traitement colis tâche international si B0==1
					  affiche_message("Mise sur tapis pour l'international !\r\n");
 8000ada:	481f      	ldr	r0, [pc, #124]	; (8000b58 <Tache_lecture_rapide+0x140>)
 8000adc:	f7ff fee0 	bl	80008a0 <affiche_message>
					  if(!xQueueSendToBack(File_depart_internationalHandle, &colis, TIMEOUT_FILE_TAPIS_DEPART)) // Il faudra gérer le débordement et afficher un message d'erreur
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <Tache_lecture_rapide+0x144>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2264      	movs	r2, #100	; 0x64
 8000aec:	f004 fa8a 	bl	8005004 <xQueueGenericSend>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <Tache_lecture_rapide+0xe4>
						{
							affiche_message("Debordement : Echec de l'envoi du colis au international\r\n");
 8000af6:	481a      	ldr	r0, [pc, #104]	; (8000b60 <Tache_lecture_rapide+0x148>)
 8000af8:	f7ff fed2 	bl	80008a0 <affiche_message>
						}
				  }
			  }


			  sprintf(buff,"Tache lecture rapide : %d\r\n",colis);
 8000afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4918      	ldr	r1, [pc, #96]	; (8000b64 <Tache_lecture_rapide+0x14c>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 ff6f 	bl	80089e8 <siprintf>
			  affiche_message(buff);
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fec6 	bl	80008a0 <affiche_message>
			}
		}


	  osDelay(1);
 8000b14:	2001      	movs	r0, #1
 8000b16:	f003 fe09 	bl	800472c <osDelay>
	  if (xQueuePeek(File_tapis_arriveeHandle,&colis,TIMEOUT_FILE_TAPIS_ARRIVEE)) //Si on reçoit quelque chose dans la file.
 8000b1a:	e799      	b.n	8000a50 <Tache_lecture_rapide+0x38>
 8000b1c:	0800aa44 	.word	0x0800aa44
 8000b20:	08000c91 	.word	0x08000c91
 8000b24:	20004a60 	.word	0x20004a60
 8000b28:	0800aa20 	.word	0x0800aa20
 8000b2c:	08000c21 	.word	0x08000c21
 8000b30:	20004a04 	.word	0x20004a04
 8000b34:	0800a9fc 	.word	0x0800a9fc
 8000b38:	08000b69 	.word	0x08000b69
 8000b3c:	20004a58 	.word	0x20004a58
 8000b40:	20004a10 	.word	0x20004a10
 8000b44:	20004a00 	.word	0x20004a00
 8000b48:	080093a4 	.word	0x080093a4
 8000b4c:	080093d4 	.word	0x080093d4
 8000b50:	20004a5c 	.word	0x20004a5c
 8000b54:	080093f8 	.word	0x080093f8
 8000b58:	08009430 	.word	0x08009430
 8000b5c:	200049ec 	.word	0x200049ec
 8000b60:	08009458 	.word	0x08009458
 8000b64:	08009494 	.word	0x08009494

08000b68 <Tache_relecture>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_relecture */
void Tache_relecture(void *argument)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b090      	sub	sp, #64	; 0x40
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	unsigned int colis; // buffer de la file
	char buff[50];
  /* Infinite loop */
  for(;;)
  {
	  if (xSemaphoreTake(SemaphoreReLecture,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <Tache_relecture+0xa4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 ff53 	bl	8005a24 <xQueueSemaphoreTake>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d037      	beq.n	8000bf4 <Tache_relecture+0x8c>
	  {
		  if (xQueuePeek(File_tapis_relectureHandle,&colis,TIMEOUT_FILE_TAPIS_RELECTURE)) //Si on reçoit quelque chose dans la file.
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <Tache_relecture+0xa8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000b8c:	2264      	movs	r2, #100	; 0x64
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f005 f974 	bl	8005e7c <xQueuePeek>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d02c      	beq.n	8000bf4 <Tache_relecture+0x8c>
				{
				  if (xQueueReceive(File_tapis_relectureHandle,&colis,TIMEOUT_FILE_TAPIS_RELECTURE)) //Alors on l'efface de la file
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <Tache_relecture+0xa8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000ba2:	2264      	movs	r2, #100	; 0x64
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 fd3b 	bl	8005620 <xQueueReceive>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d021      	beq.n	8000bf4 <Tache_relecture+0x8c>
					{
					  //Traitement colis tâche national si B0 ==0

					  //Traitement colis tâche international si B0==1

					  colis = colis | 0x0000004;//Set du bit B2 à 1;
 8000bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c

					  colis = colis & 0xFFFFFFFD;//Set du bit B1 à 0;
 8000bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bba:	f023 0302 	bic.w	r3, r3, #2
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c

					  sprintf(buff,"Tache relecture : %d\r\n",colis);
 8000bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4913      	ldr	r1, [pc, #76]	; (8000c14 <Tache_relecture+0xac>)
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 ff0d 	bl	80089e8 <siprintf>

					  if(!xQueueSendToFront(File_tapis_arriveeHandle, &colis, TIMEOUT_FILE_TAPIS_ARRIVEE)) // Il faudra gérer le débordement et afficher un message d'erreur
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <Tache_relecture+0xb0>)
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2264      	movs	r2, #100	; 0x64
 8000bda:	f004 fa13 	bl	8005004 <xQueueGenericSend>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <Tache_relecture+0x82>
						{
							affiche_message("Debordement : Echec de l'envoi du colis dans le retour arrivée\r\n");
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <Tache_relecture+0xb4>)
 8000be6:	f7ff fe5b 	bl	80008a0 <affiche_message>
						}

					  affiche_message(buff);
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fe56 	bl	80008a0 <affiche_message>
					}
				}
	  }
	  xSemaphoreGive(SemaphoreReLecture); //On rend le jeton
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <Tache_relecture+0xa4>)
 8000bf6:	6818      	ldr	r0, [r3, #0]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f004 fa01 	bl	8005004 <xQueueGenericSend>
	  osDelay(1);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f003 fd92 	bl	800472c <osDelay>
	  if (xSemaphoreTake(SemaphoreReLecture,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000c08:	e7b2      	b.n	8000b70 <Tache_relecture+0x8>
 8000c0a:	bf00      	nop
 8000c0c:	200049fc 	.word	0x200049fc
 8000c10:	20004a00 	.word	0x20004a00
 8000c14:	080094b0 	.word	0x080094b0
 8000c18:	20004a10 	.word	0x20004a10
 8000c1c:	080094c8 	.word	0x080094c8

08000c20 <Tache_depart_national>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_depart_national */
void Tache_depart_national(void *argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tache_depart_national */
	unsigned int pvBuffer; // buffer de la file
  /* Infinite loop */
  for(;;)
  {
	  if (xSemaphoreTake(SemaphoreNational,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <Tache_depart_national+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c30:	4618      	mov	r0, r3
 8000c32:	f004 fef7 	bl	8005a24 <xQueueSemaphoreTake>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d018      	beq.n	8000c6e <Tache_depart_national+0x4e>
		{
		  if (xQueuePeek(File_depart_nationalHandle,&pvBuffer,TIMEOUT_FILE_TAPIS_RELECTURE)) //Si on reçoit quelque chose dans la file.
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <Tache_depart_national+0x68>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f107 010c 	add.w	r1, r7, #12
 8000c44:	2264      	movs	r2, #100	; 0x64
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 f918 	bl	8005e7c <xQueuePeek>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00d      	beq.n	8000c6e <Tache_depart_national+0x4e>
			{
			  if (xQueueReceive(File_depart_nationalHandle,&pvBuffer,TIMEOUT_FILE_TAPIS_RELECTURE)) //Alors on l'efface de la file
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <Tache_depart_national+0x68>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f107 010c 	add.w	r1, r7, #12
 8000c5a:	2264      	movs	r2, #100	; 0x64
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 fcdf 	bl	8005620 <xQueueReceive>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <Tache_depart_national+0x4e>
				{

				  affiche_message("Colis envoyé au national !\r\n");
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <Tache_depart_national+0x6c>)
 8000c6a:	f7ff fe19 	bl	80008a0 <affiche_message>
				}
			}
		}
	  xSemaphoreGive(SemaphoreNational); //On rend le jeton
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <Tache_depart_national+0x64>)
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	2300      	movs	r3, #0
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	f004 f9c4 	bl	8005004 <xQueueGenericSend>
	  osDelay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f003 fd55 	bl	800472c <osDelay>
	  if (xSemaphoreTake(SemaphoreNational,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000c82:	e7d1      	b.n	8000c28 <Tache_depart_national+0x8>
 8000c84:	200049f0 	.word	0x200049f0
 8000c88:	20004a5c 	.word	0x20004a5c
 8000c8c:	0800950c 	.word	0x0800950c

08000c90 <Tache_depart_international>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_depart_international */
void Tache_depart_international(void *argument)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tache_depart_international */
	unsigned int pvBuffer; // buffer de la file
  /* Infinite loop */
  for(;;)
  {
	  if (xSemaphoreTake(SemaphoreInternational,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <Tache_depart_international+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f004 febf 	bl	8005a24 <xQueueSemaphoreTake>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d018      	beq.n	8000cde <Tache_depart_international+0x4e>
	  	{
		  if (xQueuePeek(File_depart_internationalHandle,&pvBuffer,TIMEOUT_FILE_TAPIS_RELECTURE)) //Si on reçoit quelque chose dans la file.
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <Tache_depart_international+0x68>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f107 010c 	add.w	r1, r7, #12
 8000cb4:	2264      	movs	r2, #100	; 0x64
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f005 f8e0 	bl	8005e7c <xQueuePeek>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00d      	beq.n	8000cde <Tache_depart_international+0x4e>
			{
			  if (xQueueReceive(File_depart_internationalHandle,&pvBuffer,TIMEOUT_FILE_TAPIS_RELECTURE)) //Alors on l'efface de la file
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <Tache_depart_international+0x68>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f107 010c 	add.w	r1, r7, #12
 8000cca:	2264      	movs	r2, #100	; 0x64
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 fca7 	bl	8005620 <xQueueReceive>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <Tache_depart_international+0x4e>
				{

				affiche_message("Colis envoyé à l'international !\r\n");
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <Tache_depart_international+0x6c>)
 8000cda:	f7ff fde1 	bl	80008a0 <affiche_message>
				}
			}

	  	}
	  xSemaphoreGive(SemaphoreInternational); //On rend le jeton
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <Tache_depart_international+0x64>)
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	f004 f98c 	bl	8005004 <xQueueGenericSend>
	  osDelay(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f003 fd1d 	bl	800472c <osDelay>
	  if (xSemaphoreTake(SemaphoreInternational,(portTickType)1000/portTICK_RATE_MS)) //On prend la ressource partagée
 8000cf2:	e7d1      	b.n	8000c98 <Tache_depart_international+0x8>
 8000cf4:	200049f4 	.word	0x200049f4
 8000cf8:	200049ec 	.word	0x200049ec
 8000cfc:	0800952c 	.word	0x0800952c

08000d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d10:	d101      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d12:	f001 fde7 	bl	80028e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d22:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x6>
	...

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_MspInit+0x54>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_MspInit+0x54>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_MspInit+0x54>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_MspInit+0x54>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_MspInit+0x54>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_MspInit+0x54>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	210f      	movs	r1, #15
 8000d6a:	f06f 0001 	mvn.w	r0, #1
 8000d6e:	f001 fe91 	bl	8002a94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_UART_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12b      	bne.n	8000dfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dda:	230c      	movs	r3, #12
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dea:	2307      	movs	r3, #7
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_UART_MspInit+0x8c>)
 8000df6:	f001 fe77 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40004400 	.word	0x40004400
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	; 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	201c      	movs	r0, #28
 8000e26:	f001 fe35 	bl	8002a94 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e2a:	201c      	movs	r0, #28
 8000e2c:	f001 fe4e 	bl	8002acc <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e4c:	f107 0210 	add.w	r2, r7, #16
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 fc44 	bl	80036e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e5c:	f002 fc1a 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8000e60:	4603      	mov	r3, r0
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <HAL_InitTick+0xac>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	3b01      	subs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0xb0>)
 8000e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_InitTick+0xb0>)
 8000e7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e82:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000e84:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_InitTick+0xb0>)
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_InitTick+0xb0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_InitTick+0xb0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <HAL_InitTick+0xb0>)
 8000e98:	f002 fc56 	bl	8003748 <HAL_TIM_Base_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d104      	bne.n	8000eac <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000ea2:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <HAL_InitTick+0xb0>)
 8000ea4:	f002 fc85 	bl	80037b2 <HAL_TIM_Base_Start_IT>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	e000      	b.n	8000eae <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3730      	adds	r7, #48	; 0x30
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	431bde83 	.word	0x431bde83
 8000ec0:	20004a68 	.word	0x20004a68

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <TIM2_IRQHandler+0x10>)
 8000ef6:	f002 fc80 	bl	80037fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20004a68 	.word	0x20004a68

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f007 fd1a 	bl	800896c <__errno>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	230c      	movs	r3, #12
 8000f3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20018000 	.word	0x20018000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	2000009c 	.word	0x2000009c
 8000f6c:	20006498 	.word	0x20006498

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <SystemInit+0x28>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <SystemInit+0x28>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SystemInit+0x28>)
 8000f86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa2:	e003      	b.n	8000fac <LoopCopyDataInit>

08000fa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000faa:	3104      	adds	r1, #4

08000fac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb4:	d3f6      	bcc.n	8000fa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fb8:	e002      	b.n	8000fc0 <LoopFillZerobss>

08000fba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fbc:	f842 3b04 	str.w	r3, [r2], #4

08000fc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc4:	d3f9      	bcc.n	8000fba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fc6:	f7ff ffd3 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f007 fcd5 	bl	8008978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff fadf 	bl	8000590 <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000fd8:	0800ab34 	.word	0x0800ab34
  ldr  r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000fe4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000fe8:	20006498 	.word	0x20006498

08000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC_IRQHandler>

08000fee <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f005 f916 	bl	8006228 <uxQueueGetQueueNumber>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f005 f924 	bl	800625c <ucQueueGetQueueType>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f006 f96c 	bl	8007304 <uxTaskGetTaskNumber>
 800102c:	4603      	mov	r3, r0
 800102e:	b29b      	uxth	r3, r3
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f006 f95f 	bl	8007304 <uxTaskGetTaskNumber>
 8001046:	4603      	mov	r3, r0
 8001048:	0c1b      	lsrs	r3, r3, #16
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f006 f94f 	bl	8007304 <uxTaskGetTaskNumber>
 8001066:	4603      	mov	r3, r0
 8001068:	0c1b      	lsrs	r3, r3, #16
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	887a      	ldrh	r2, [r7, #2]
 800106e:	4313      	orrs	r3, r2
 8001070:	4619      	mov	r1, r3
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f006 f95c 	bl	8007330 <vTaskSetTaskNumber>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f006 f939 	bl	8007304 <uxTaskGetTaskNumber>
 8001092:	4603      	mov	r3, r0
 8001094:	b29a      	uxth	r2, r3
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	041b      	lsls	r3, r3, #16
 800109a:	4313      	orrs	r3, r2
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f006 f946 	bl	8007330 <vTaskSetTaskNumber>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff9a 	bl	8000fee <prvTraceGetQueueNumber>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29b      	uxth	r3, r3
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff8d 	bl	8000fee <prvTraceGetQueueNumber>
 80010d4:	4603      	mov	r3, r0
 80010d6:	0c1b      	lsrs	r3, r3, #16
 80010d8:	b29b      	uxth	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff7d 	bl	8000fee <prvTraceGetQueueNumber>
 80010f4:	4603      	mov	r3, r0
 80010f6:	0c1b      	lsrs	r3, r3, #16
 80010f8:	041b      	lsls	r3, r3, #16
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f005 f89d 	bl	8006240 <vQueueSetQueueNumber>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff67 	bl	8000fee <prvTraceGetQueueNumber>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	041b      	lsls	r3, r3, #16
 8001128:	4313      	orrs	r3, r2
 800112a:	4619      	mov	r1, r3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f005 f887 	bl	8006240 <vQueueSetQueueNumber>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 800113e:	f006 f9df 	bl	8007500 <xTaskGetCurrentTaskHandle>
 8001142:	4603      	mov	r3, r0
}
 8001144:	4618      	mov	r0, r3
 8001146:	bd80      	pop	{r7, pc}

08001148 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	vTraceInitialize();
 8001150:	f000 fa5a 	bl	8001608 <vTraceInitialize>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (startOption == TRC_START)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d104      	bne.n	8001164 <vTraceEnable+0x1c>
	{
		prvTraceInitTimestamps();
 800115a:	f000 fa45 	bl	80015e8 <prvTraceInitTimestamps>
		
		vTraceStart();
 800115e:	f000 fa25 	bl	80015ac <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}
}
 8001162:	e00c      	b.n	800117e <vTraceEnable+0x36>
	else if (startOption == TRC_START_AWAIT_HOST)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d103      	bne.n	8001172 <vTraceEnable+0x2a>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <vTraceEnable+0x40>)
 800116c:	f001 f95e 	bl	800242c <prvTraceError>
}
 8001170:	e005      	b.n	800117e <vTraceEnable+0x36>
	else if (startOption != TRC_INIT)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <vTraceEnable+0x36>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <vTraceEnable+0x44>)
 800117a:	f001 f957 	bl	800242c <prvTraceError>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08009554 	.word	0x08009554
 800118c:	08009594 	.word	0x08009594

08001190 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8001194:	4b64      	ldr	r3, [pc, #400]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2209      	movs	r2, #9
 800119a:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 800119c:	4b62      	ldr	r3, [pc, #392]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	220a      	movs	r2, #10
 80011a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 80011a6:	4b60      	ldr	r3, [pc, #384]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	220a      	movs	r2, #10
 80011ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 80011b0:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	220a      	movs	r2, #10
 80011b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	220f      	movs	r2, #15
 80011c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80011c4:	4b58      	ldr	r3, [pc, #352]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2205      	movs	r2, #5
 80011ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 80011ce:	4b56      	ldr	r3, [pc, #344]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2205      	movs	r2, #5
 80011d4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80011d8:	4b53      	ldr	r3, [pc, #332]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2205      	movs	r2, #5
 80011de:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 80011e2:	4b51      	ldr	r3, [pc, #324]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2205      	movs	r2, #5
 80011e8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 80011ec:	4b4e      	ldr	r3, [pc, #312]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2205      	movs	r2, #5
 80011f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 80011f6:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	220f      	movs	r2, #15
 80011fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8001200:	4b49      	ldr	r3, [pc, #292]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	220f      	movs	r2, #15
 8001206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800120a:	4b47      	ldr	r3, [pc, #284]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	220f      	movs	r2, #15
 8001210:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8001214:	4b44      	ldr	r3, [pc, #272]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	220f      	movs	r2, #15
 800121a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 800121e:	4b42      	ldr	r3, [pc, #264]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	220f      	movs	r2, #15
 8001224:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8001228:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	220f      	movs	r2, #15
 800122e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	220f      	movs	r2, #15
 8001238:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 800123c:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	220f      	movs	r2, #15
 8001242:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	220f      	movs	r2, #15
 800124c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8001250:	4b35      	ldr	r3, [pc, #212]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2210      	movs	r2, #16
 8001256:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800125a:	4b33      	ldr	r3, [pc, #204]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2210      	movs	r2, #16
 8001260:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2210      	movs	r2, #16
 800126a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2213      	movs	r2, #19
 8001274:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2211      	movs	r2, #17
 800127e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8001282:	4b29      	ldr	r3, [pc, #164]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2210      	movs	r2, #16
 8001288:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 800128c:	4b26      	ldr	r3, [pc, #152]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2213      	movs	r2, #19
 8001292:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2213      	movs	r2, #19
 800129c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2213      	movs	r2, #19
 80012a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	22a0      	movs	r2, #160	; 0xa0
 80012ba:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012c6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012d2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f240 22fd 	movw	r2, #765	; 0x2fd
 80012de:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f240 3252 	movw	r2, #850	; 0x352
 80012ea:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f240 32a2 	movw	r2, #930	; 0x3a2
 80012f6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f240 4201 	movw	r2, #1025	; 0x401
 8001302:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800130e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <vTraceInitObjectPropertyTable+0x198>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800131a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20004aac 	.word	0x20004aac

0800132c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8001336:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001338:	2200      	movs	r2, #0
 800133a:	825a      	strh	r2, [r3, #18]
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 800133e:	8a5a      	ldrh	r2, [r3, #18]
 8001340:	4b3c      	ldr	r3, [pc, #240]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001342:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8001344:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001346:	220a      	movs	r2, #10
 8001348:	829a      	strh	r2, [r3, #20]
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 800134c:	8a9a      	ldrh	r2, [r3, #20]
 800134e:	4b39      	ldr	r3, [pc, #228]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001350:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8001352:	4b38      	ldr	r3, [pc, #224]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001354:	2214      	movs	r2, #20
 8001356:	82da      	strh	r2, [r3, #22]
 8001358:	4b36      	ldr	r3, [pc, #216]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 800135a:	8ada      	ldrh	r2, [r3, #22]
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 800135e:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8001360:	4b34      	ldr	r3, [pc, #208]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001362:	221e      	movs	r2, #30
 8001364:	831a      	strh	r2, [r3, #24]
 8001366:	4b33      	ldr	r3, [pc, #204]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001368:	8b1a      	ldrh	r2, [r3, #24]
 800136a:	4b32      	ldr	r3, [pc, #200]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 800136c:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001370:	222d      	movs	r2, #45	; 0x2d
 8001372:	835a      	strh	r2, [r3, #26]
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001376:	8b5a      	ldrh	r2, [r3, #26]
 8001378:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 800137a:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 800137c:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 800137e:	2232      	movs	r2, #50	; 0x32
 8001380:	839a      	strh	r2, [r3, #28]
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001384:	8b9a      	ldrh	r2, [r3, #28]
 8001386:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001388:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 800138c:	2237      	movs	r2, #55	; 0x37
 800138e:	83da      	strh	r2, [r3, #30]
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001392:	8bda      	ldrh	r2, [r3, #30]
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001396:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 800139a:	223c      	movs	r2, #60	; 0x3c
 800139c:	841a      	strh	r2, [r3, #32]
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013a0:	8c1a      	ldrh	r2, [r3, #32]
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013a4:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 80013a6:	4b23      	ldr	r3, [pc, #140]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013a8:	2241      	movs	r2, #65	; 0x41
 80013aa:	845a      	strh	r2, [r3, #34]	; 0x22
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013ae:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80013b0:	4b20      	ldr	r3, [pc, #128]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013b2:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013b6:	2209      	movs	r2, #9
 80013b8:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013bc:	2213      	movs	r2, #19
 80013be:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013c2:	221d      	movs	r2, #29
 80013c4:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013c8:	222c      	movs	r2, #44	; 0x2c
 80013ca:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013ce:	2231      	movs	r2, #49	; 0x31
 80013d0:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013d4:	2236      	movs	r2, #54	; 0x36
 80013d6:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013da:	223b      	movs	r2, #59	; 0x3b
 80013dc:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013e0:	2240      	movs	r2, #64	; 0x40
 80013e2:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013e6:	2245      	movs	r2, #69	; 0x45
 80013e8:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	e009      	b.n	8001404 <vTraceInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 80013f0:	4a10      	ldr	r2, [pc, #64]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3318      	adds	r3, #24
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	2200      	movs	r2, #0
 80013fc:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3301      	adds	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b08      	cmp	r3, #8
 8001408:	d9f2      	bls.n	80013f0 <vTraceInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	e008      	b.n	8001422 <vTraceInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <vTraceInitObjectHandleStack+0x108>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	3348      	adds	r3, #72	; 0x48
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3301      	adds	r3, #1
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b45      	cmp	r3, #69	; 0x45
 8001426:	d9f3      	bls.n	8001410 <vTraceInitObjectHandleStack+0xe4>
	}
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	200063c0 	.word	0x200063c0

08001438 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b08      	cmp	r3, #8
 8001446:	d827      	bhi.n	8001498 <pszTraceGetErrorNotEnoughHandles+0x60>
 8001448:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <pszTraceGetErrorNotEnoughHandles+0x18>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	08001485 	.word	0x08001485
 8001454:	0800147d 	.word	0x0800147d
 8001458:	08001481 	.word	0x08001481
 800145c:	08001475 	.word	0x08001475
 8001460:	08001479 	.word	0x08001479
 8001464:	08001489 	.word	0x08001489
 8001468:	0800148d 	.word	0x0800148d
 800146c:	08001491 	.word	0x08001491
 8001470:	08001495 	.word	0x08001495
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8001476:	e010      	b.n	800149a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <pszTraceGetErrorNotEnoughHandles+0x74>)
 800147a:	e00e      	b.n	800149a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <pszTraceGetErrorNotEnoughHandles+0x78>)
 800147e:	e00c      	b.n	800149a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8001482:	e00a      	b.n	800149a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <pszTraceGetErrorNotEnoughHandles+0x80>)
 8001486:	e008      	b.n	800149a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <pszTraceGetErrorNotEnoughHandles+0x84>)
 800148a:	e006      	b.n	800149a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <pszTraceGetErrorNotEnoughHandles+0x88>)
 800148e:	e004      	b.n	800149a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8001492:	e002      	b.n	800149a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <pszTraceGetErrorNotEnoughHandles+0x90>)
 8001496:	e000      	b.n	800149a <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	080095c8 	.word	0x080095c8
 80014ac:	08009610 	.word	0x08009610
 80014b0:	08009658 	.word	0x08009658
 80014b4:	080096ac 	.word	0x080096ac
 80014b8:	080096f8 	.word	0x080096f8
 80014bc:	08009744 	.word	0x08009744
 80014c0:	08009790 	.word	0x08009790
 80014c4:	080097e4 	.word	0x080097e4
 80014c8:	0800983c 	.word	0x0800983c
 80014cc:	08009898 	.word	0x08009898

080014d0 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <uiTraceStart+0xc8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10a      	bne.n	80014f8 <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <uiTraceStart+0xc8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d104      	bne.n	80014f4 <uiTraceStart+0x24>
 80014ea:	482c      	ldr	r0, [pc, #176]	; (800159c <uiTraceStart+0xcc>)
 80014ec:	f000 ff9e 	bl	800242c <prvTraceError>
 80014f0:	2300      	movs	r3, #0
 80014f2:	e04c      	b.n	800158e <uiTraceStart+0xbe>
		return 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e04a      	b.n	800158e <uiTraceStart+0xbe>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <uiTraceStart+0xc8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <uiTraceStart+0x36>
		return 1; /* Already running */
 8001502:	2301      	movs	r3, #1
 8001504:	e043      	b.n	800158e <uiTraceStart+0xbe>

	if (traceErrorMessage == NULL)
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <uiTraceStart+0xd0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d13c      	bne.n	8001588 <uiTraceStart+0xb8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800150e:	f3ef 8310 	mrs	r3, PRIMASK
 8001512:	60bb      	str	r3, [r7, #8]
  return(result);
 8001514:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	2301      	movs	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f383 8810 	msr	PRIMASK, r3
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <uiTraceStart+0xd4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <uiTraceStart+0xd4>)
 800152a:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <uiTraceStart+0xc8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2201      	movs	r2, #1
 8001532:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8001534:	f7ff fe01 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8001538:	4603      	mov	r3, r0
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fd6f 	bl	800101e <prvTraceGetTaskNumberLow16>
 8001540:	4603      	mov	r3, r0
 8001542:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d110      	bne.n	800156c <uiTraceStart+0x9c>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 800154a:	2003      	movs	r0, #3
 800154c:	f000 fe22 	bl	8002194 <prvTraceGetObjectHandle>
 8001550:	4603      	mov	r3, r0
 8001552:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <uiTraceStart+0xd8>)
 8001558:	4619      	mov	r1, r3
 800155a:	2003      	movs	r0, #3
 800155c:	f000 ff0a 	bl	8002374 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2200      	movs	r2, #0
 8001564:	4619      	mov	r1, r3
 8001566:	2003      	movs	r0, #3
 8001568:	f000 fc7c 	bl	8001e64 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fc08 	bl	8001d84 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <uiTraceStart+0xd4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <uiTraceStart+0xd4>)
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <uiTraceStart+0xc8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20004aac 	.word	0x20004aac
 800159c:	080098c8 	.word	0x080098c8
 80015a0:	200063b8 	.word	0x200063b8
 80015a4:	200000b4 	.word	0x200000b4
 80015a8:	0800990c 	.word	0x0800990c

080015ac <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 80015b0:	f7ff ff8e 	bl	80014d0 <uiTraceStart>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <vTraceStop+0x28>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <vTraceStop+0x28>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <vTraceStop+0x2c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <vTraceStop+0x2c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4798      	blx	r3
	}
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20004aac 	.word	0x20004aac
 80015e4:	200000c0 	.word	0x200000c0

080015e8 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
void prvTraceInitTimestamps(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <prvTraceInitTimestamps+0x18>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <prvTraceInitTimestamps+0x1c>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e0001004 	.word	0xe0001004
 8001604:	200063bc 	.word	0x200063bc

08001608 <vTraceInitialize>:
* Only needs to be called manually if traced objects are created before the
* trace recorder can be enabled
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h for more information.
******************************************************************************/
void vTraceInitialize()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 800160c:	4b85      	ldr	r3, [pc, #532]	; (8001824 <vTraceInitialize+0x21c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f040 8105 	bne.w	8001820 <vTraceInitialize+0x218>
	{
		return;
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 8001616:	4b84      	ldr	r3, [pc, #528]	; (8001828 <vTraceInitialize+0x220>)
 8001618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161c:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 800161e:	4b83      	ldr	r3, [pc, #524]	; (800182c <vTraceInitialize+0x224>)
 8001620:	2201      	movs	r2, #1
 8001622:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 8001624:	4b82      	ldr	r3, [pc, #520]	; (8001830 <vTraceInitialize+0x228>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 800162a:	4b82      	ldr	r3, [pc, #520]	; (8001834 <vTraceInitialize+0x22c>)
 800162c:	4a82      	ldr	r2, [pc, #520]	; (8001838 <vTraceInitialize+0x230>)
 800162e:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8001630:	4b82      	ldr	r3, [pc, #520]	; (800183c <vTraceInitialize+0x234>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a82      	ldr	r2, [pc, #520]	; (8001840 <vTraceInitialize+0x238>)
 8001636:	6013      	str	r3, [r2, #0]

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8001638:	4b7e      	ldr	r3, [pc, #504]	; (8001834 <vTraceInitialize+0x22c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f641 1204 	movw	r2, #6404	; 0x1904
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f007 f9c7 	bl	80089d6 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8001648:	4b7a      	ldr	r3, [pc, #488]	; (8001834 <vTraceInitialize+0x22c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8001650:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8001652:	4b78      	ldr	r3, [pc, #480]	; (8001834 <vTraceInitialize+0x22c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2207      	movs	r2, #7
 8001658:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 800165a:	4b76      	ldr	r3, [pc, #472]	; (8001834 <vTraceInitialize+0x22c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2200      	movs	r2, #0
 8001660:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8001662:	4b74      	ldr	r3, [pc, #464]	; (8001834 <vTraceInitialize+0x22c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f641 1204 	movw	r2, #6404	; 0x1904
 800166a:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800166c:	4b71      	ldr	r3, [pc, #452]	; (8001834 <vTraceInitialize+0x22c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001674:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8001676:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <vTraceInitialize+0x22c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800167e:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8001680:	4b6c      	ldr	r3, [pc, #432]	; (8001834 <vTraceInitialize+0x22c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8001688:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <vTraceInitialize+0x22c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 8001690:	f7ff fd7e 	bl	8001190 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8001694:	4b67      	ldr	r3, [pc, #412]	; (8001834 <vTraceInitialize+0x22c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 800169c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80016a0:	4b64      	ldr	r3, [pc, #400]	; (8001834 <vTraceInitialize+0x22c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80016a8:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80016ac:	4b61      	ldr	r3, [pc, #388]	; (8001834 <vTraceInitialize+0x22c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80016b6:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <vTraceInitialize+0x22c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 80016be:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <vTraceInitialize+0x22c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ca:	2250      	movs	r2, #80	; 0x50
 80016cc:	495d      	ldr	r1, [pc, #372]	; (8001844 <vTraceInitialize+0x23c>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fe2a 	bl	8002328 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 80016d4:	4b57      	ldr	r3, [pc, #348]	; (8001834 <vTraceInitialize+0x22c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 80016dc:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 80016e0:	4b54      	ldr	r3, [pc, #336]	; (8001834 <vTraceInitialize+0x22c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80016e8:	3318      	adds	r3, #24
 80016ea:	220a      	movs	r2, #10
 80016ec:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker1 = 0x0B;
 80016ee:	4b51      	ldr	r3, [pc, #324]	; (8001834 <vTraceInitialize+0x22c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80016f6:	3319      	adds	r3, #25
 80016f8:	220b      	movs	r2, #11
 80016fa:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker2 = 0x0C;
 80016fc:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <vTraceInitialize+0x22c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8001704:	331a      	adds	r3, #26
 8001706:	220c      	movs	r2, #12
 8001708:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker3 = 0x0D;
 800170a:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <vTraceInitialize+0x22c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8001712:	331b      	adds	r3, #27
 8001714:	220d      	movs	r2, #13
 8001716:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker4 = 0x71;
 8001718:	4b46      	ldr	r3, [pc, #280]	; (8001834 <vTraceInitialize+0x22c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8001720:	331c      	adds	r3, #28
 8001722:	2271      	movs	r2, #113	; 0x71
 8001724:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker5 = 0x72;
 8001726:	4b43      	ldr	r3, [pc, #268]	; (8001834 <vTraceInitialize+0x22c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 800172e:	331d      	adds	r3, #29
 8001730:	2272      	movs	r2, #114	; 0x72
 8001732:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker6 = 0x73;
 8001734:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <vTraceInitialize+0x22c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 800173c:	331e      	adds	r3, #30
 800173e:	2273      	movs	r2, #115	; 0x73
 8001740:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker7 = 0x74;
 8001742:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <vTraceInitialize+0x22c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 800174a:	331f      	adds	r3, #31
 800174c:	2274      	movs	r2, #116	; 0x74
 800174e:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker8 = 0xF1;
 8001750:	4b38      	ldr	r3, [pc, #224]	; (8001834 <vTraceInitialize+0x22c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001758:	22f1      	movs	r2, #241	; 0xf1
 800175a:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker9 = 0xF2;
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <vTraceInitialize+0x22c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001764:	3301      	adds	r3, #1
 8001766:	22f2      	movs	r2, #242	; 0xf2
 8001768:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker10 = 0xF3;
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <vTraceInitialize+0x22c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001772:	3302      	adds	r3, #2
 8001774:	22f3      	movs	r2, #243	; 0xf3
 8001776:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker11 = 0xF4;
 8001778:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <vTraceInitialize+0x22c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001780:	3303      	adds	r3, #3
 8001782:	22f4      	movs	r2, #244	; 0xf4
 8001784:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 8001786:	f7ff fdd1 	bl	800132c <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 800178a:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <vTraceInitialize+0x22c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	22f4      	movs	r2, #244	; 0xf4
 8001790:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <vTraceInitialize+0x22c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	22f3      	movs	r2, #243	; 0xf3
 8001798:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <vTraceInitialize+0x22c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	22f2      	movs	r2, #242	; 0xf2
 80017a0:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <vTraceInitialize+0x22c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	22f1      	movs	r2, #241	; 0xf1
 80017a8:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <vTraceInitialize+0x22c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2274      	movs	r2, #116	; 0x74
 80017b0:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <vTraceInitialize+0x22c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2273      	movs	r2, #115	; 0x73
 80017b8:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <vTraceInitialize+0x22c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2272      	movs	r2, #114	; 0x72
 80017c0:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <vTraceInitialize+0x22c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2271      	movs	r2, #113	; 0x71
 80017c8:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <vTraceInitialize+0x22c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2204      	movs	r2, #4
 80017d0:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <vTraceInitialize+0x22c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2203      	movs	r2, #3
 80017d8:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <vTraceInitialize+0x22c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2202      	movs	r2, #2
 80017e0:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <vTraceInitialize+0x22c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <vTraceInitialize+0x228>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d010      	beq.n	8001814 <vTraceInitialize+0x20c>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <vTraceInitialize+0x22c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 6010 	add.w	r0, r3, #2304	; 0x900
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <vTraceInitialize+0x228>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2250      	movs	r2, #80	; 0x50
 8001800:	4619      	mov	r1, r3
 8001802:	f000 fd91 	bl	8002328 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <vTraceInitialize+0x22c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		vTraceStop();
 8001810:	f7ff fed2 	bl	80015b8 <vTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 8001814:	f000 ffc4 	bl	80027a0 <prvTraceInitCortexM>
#endif

	RecorderInitialized = 1;
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <vTraceInitialize+0x21c>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e000      	b.n	8001822 <vTraceInitialize+0x21a>
		return;
 8001820:	bf00      	nop
}
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200000c4 	.word	0x200000c4
 8001828:	20004aa8 	.word	0x20004aa8
 800182c:	200063b4 	.word	0x200063b4
 8001830:	200063b8 	.word	0x200063b8
 8001834:	20004aac 	.word	0x20004aac
 8001838:	20004ab0 	.word	0x20004ab0
 800183c:	e0001004 	.word	0xe0001004
 8001840:	200063bc 	.word	0x200063bc
 8001844:	08009c74 	.word	0x08009c74

08001848 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d04a      	beq.n	80018ee <prvTraceStoreTaskReady+0xa6>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <prvTraceStoreTaskReady+0xb4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d048      	beq.n	80018f2 <prvTraceStoreTaskReady+0xaa>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	d903      	bls.n	800186e <prvTraceStoreTaskReady+0x26>
 8001866:	4826      	ldr	r0, [pc, #152]	; (8001900 <prvTraceStoreTaskReady+0xb8>)
 8001868:	f000 fde0 	bl	800242c <prvTraceError>
 800186c:	e042      	b.n	80018f4 <prvTraceStoreTaskReady+0xac>

	if (recorder_busy)
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <prvTraceStoreTaskReady+0xbc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8001876:	4824      	ldr	r0, [pc, #144]	; (8001908 <prvTraceStoreTaskReady+0xc0>)
 8001878:	f000 fdd8 	bl	800242c <prvTraceError>
		return;
 800187c:	e03a      	b.n	80018f4 <prvTraceStoreTaskReady+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800187e:	f3ef 8310 	mrs	r3, PRIMASK
 8001882:	60fb      	str	r3, [r7, #12]
  return(result);
 8001884:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	2301      	movs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	f383 8810 	msr	PRIMASK, r3
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <prvTraceStoreTaskReady+0xbc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	4a1a      	ldr	r2, [pc, #104]	; (8001904 <prvTraceStoreTaskReady+0xbc>)
 800189a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <prvTraceStoreTaskReady+0xc4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d018      	beq.n	80018d8 <prvTraceStoreTaskReady+0x90>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80018a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018aa:	f000 fea1 	bl	80025f0 <prvTraceGetDTS>
 80018ae:	4603      	mov	r3, r0
 80018b0:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 80018b6:	f000 fbf1 	bl	800209c <prvTraceNextFreeEventBufferSlot>
 80018ba:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00a      	beq.n	80018d8 <prvTraceStoreTaskReady+0x90>
		{
			tr->type = DIV_TASK_READY;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2202      	movs	r2, #2
 80018c6:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	8b7a      	ldrh	r2, [r7, #26]
 80018cc:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	7e7a      	ldrb	r2, [r7, #25]
 80018d2:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80018d4:	f000 fe64 	bl	80025a0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <prvTraceStoreTaskReady+0xbc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <prvTraceStoreTaskReady+0xbc>)
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f383 8810 	msr	PRIMASK, r3
 80018ec:	e002      	b.n	80018f4 <prvTraceStoreTaskReady+0xac>
		return;
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <prvTraceStoreTaskReady+0xac>
		return;
 80018f2:	bf00      	nop
}
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000000c 	.word	0x2000000c
 8001900:	08009c88 	.word	0x08009c88
 8001904:	200000b4 	.word	0x200000b4
 8001908:	08009cc8 	.word	0x08009cc8
 800190c:	20004aac 	.word	0x20004aac

08001910 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	; 0x38
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 800191c:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <vTraceStoreMemMangEvent+0x124>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 8083 	beq.w	8001a2c <vTraceStoreMemMangEvent+0x11c>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	da03      	bge.n	8001934 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	425b      	negs	r3, r3
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
 8001932:	e001      	b.n	8001938 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001938:	f3ef 8310 	mrs	r3, PRIMASK
 800193c:	61bb      	str	r3, [r7, #24]
  return(result);
 800193e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
 8001942:	2301      	movs	r3, #1
 8001944:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f383 8810 	msr	PRIMASK, r3
 800194c:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <vTraceStoreMemMangEvent+0x128>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a39      	ldr	r2, [pc, #228]	; (8001a38 <vTraceStoreMemMangEvent+0x128>)
 8001954:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d015      	beq.n	8001988 <vTraceStoreMemMangEvent+0x78>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 800195c:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <vTraceStoreMemMangEvent+0x124>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <vTraceStoreMemMangEvent+0x124>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	440a      	add	r2, r1
 800196a:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 800196c:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <vTraceStoreMemMangEvent+0x124>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <vTraceStoreMemMangEvent+0x124>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001978:	429a      	cmp	r2, r3
 800197a:	d905      	bls.n	8001988 <vTraceStoreMemMangEvent+0x78>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 800197c:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <vTraceStoreMemMangEvent+0x124>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <vTraceStoreMemMangEvent+0x124>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001986:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8001988:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <vTraceStoreMemMangEvent+0x124>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	2b00      	cmp	r3, #0
 8001990:	d041      	beq.n	8001a16 <vTraceStoreMemMangEvent+0x106>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8001992:	20ff      	movs	r0, #255	; 0xff
 8001994:	f000 fe2c 	bl	80025f0 <prvTraceGetDTS>
 8001998:	4603      	mov	r3, r0
 800199a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 800199e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019a4:	f000 f94e 	bl	8001c44 <prvTraceGetParam>
 80019a8:	4603      	mov	r3, r0
 80019aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 80019ac:	f000 fb76 	bl	800209c <prvTraceNextFreeEventBufferSlot>
 80019b0:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d02e      	beq.n	8001a16 <vTraceStoreMemMangEvent+0x106>
		{
			ms->dts = dts1;
 80019b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80019be:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80019ca:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80019cc:	f000 fde8 	bl	80025a0 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019d6:	f000 f935 	bl	8001c44 <prvTraceGetParam>
 80019da:	4603      	mov	r3, r0
 80019dc:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 80019e4:	f000 fb5a 	bl	800209c <prvTraceNextFreeEventBufferSlot>
 80019e8:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d012      	beq.n	8001a16 <vTraceStoreMemMangEvent+0x106>
			{
				ma->addr_low = addr_low;
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80019f4:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80019fc:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8001a12:	f000 fdc5 	bl	80025a0 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <vTraceStoreMemMangEvent+0x128>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <vTraceStoreMemMangEvent+0x128>)
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f383 8810 	msr	PRIMASK, r3
 8001a2a:	e000      	b.n	8001a2e <vTraceStoreMemMangEvent+0x11e>
		return;
 8001a2c:	bf00      	nop
}
 8001a2e:	3738      	adds	r7, #56	; 0x38
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20004aac 	.word	0x20004aac
 8001a38:	200000b4 	.word	0x200000b4

08001a3c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	460b      	mov	r3, r1
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2bfe      	cmp	r3, #254	; 0xfe
 8001a4e:	d903      	bls.n	8001a58 <prvTraceStoreKernelCall+0x1c>
 8001a50:	4831      	ldr	r0, [pc, #196]	; (8001b18 <prvTraceStoreKernelCall+0xdc>)
 8001a52:	f000 fceb 	bl	800242c <prvTraceError>
 8001a56:	e05c      	b.n	8001b12 <prvTraceStoreKernelCall+0xd6>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d903      	bls.n	8001a66 <prvTraceStoreKernelCall+0x2a>
 8001a5e:	482f      	ldr	r0, [pc, #188]	; (8001b1c <prvTraceStoreKernelCall+0xe0>)
 8001a60:	f000 fce4 	bl	800242c <prvTraceError>
 8001a64:	e055      	b.n	8001b12 <prvTraceStoreKernelCall+0xd6>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <prvTraceStoreKernelCall+0xe4>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	7afb      	ldrb	r3, [r7, #11]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a72:	461a      	mov	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d903      	bls.n	8001a82 <prvTraceStoreKernelCall+0x46>
 8001a7a:	482a      	ldr	r0, [pc, #168]	; (8001b24 <prvTraceStoreKernelCall+0xe8>)
 8001a7c:	f000 fcd6 	bl	800242c <prvTraceError>
 8001a80:	e047      	b.n	8001b12 <prvTraceStoreKernelCall+0xd6>

	if (recorder_busy)
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <prvTraceStoreKernelCall+0xec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8001a8a:	4828      	ldr	r0, [pc, #160]	; (8001b2c <prvTraceStoreKernelCall+0xf0>)
 8001a8c:	f000 fcce 	bl	800242c <prvTraceError>
		return;
 8001a90:	e03f      	b.n	8001b12 <prvTraceStoreKernelCall+0xd6>
	}

	if (handle_of_last_logged_task == 0)
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <prvTraceStoreKernelCall+0xf4>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d03a      	beq.n	8001b10 <prvTraceStoreKernelCall+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a9e:	617b      	str	r3, [r7, #20]
  return(result);
 8001aa0:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f383 8810 	msr	PRIMASK, r3
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <prvTraceStoreKernelCall+0xec>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <prvTraceStoreKernelCall+0xec>)
 8001ab6:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <prvTraceStoreKernelCall+0xe4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d01b      	beq.n	8001afa <prvTraceStoreKernelCall+0xbe>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001ac2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ac6:	f000 fd93 	bl	80025f0 <prvTraceGetDTS>
 8001aca:	4603      	mov	r3, r0
 8001acc:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8001ad4:	f000 fae2 	bl	800209c <prvTraceNextFreeEventBufferSlot>
 8001ad8:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00c      	beq.n	8001afa <prvTraceStoreKernelCall+0xbe>
		{
			kse->dts = dts1;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001ae4:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001af4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8001af6:	f000 fd53 	bl	80025a0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <prvTraceStoreKernelCall+0xec>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <prvTraceStoreKernelCall+0xec>)
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	f383 8810 	msr	PRIMASK, r3
 8001b0e:	e000      	b.n	8001b12 <prvTraceStoreKernelCall+0xd6>
		return;
 8001b10:	bf00      	nop
}
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	08009d38 	.word	0x08009d38
 8001b1c:	08009d70 	.word	0x08009d70
 8001b20:	20004aac 	.word	0x20004aac
 8001b24:	08009db8 	.word	0x08009db8
 8001b28:	200000b4 	.word	0x200000b4
 8001b2c:	08009e00 	.word	0x08009e00
 8001b30:	200000bc 	.word	0x200000bc

08001b34 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	460b      	mov	r3, r1
 8001b42:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2bfe      	cmp	r3, #254	; 0xfe
 8001b48:	d903      	bls.n	8001b52 <prvTraceStoreKernelCallWithParam+0x1e>
 8001b4a:	4837      	ldr	r0, [pc, #220]	; (8001c28 <prvTraceStoreKernelCallWithParam+0xf4>)
 8001b4c:	f000 fc6e 	bl	800242c <prvTraceError>
 8001b50:	e066      	b.n	8001c20 <prvTraceStoreKernelCallWithParam+0xec>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8001b52:	7afb      	ldrb	r3, [r7, #11]
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d903      	bls.n	8001b60 <prvTraceStoreKernelCallWithParam+0x2c>
 8001b58:	4834      	ldr	r0, [pc, #208]	; (8001c2c <prvTraceStoreKernelCallWithParam+0xf8>)
 8001b5a:	f000 fc67 	bl	800242c <prvTraceError>
 8001b5e:	e05f      	b.n	8001c20 <prvTraceStoreKernelCallWithParam+0xec>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 8001b60:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <prvTraceStoreKernelCallWithParam+0xfc>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	7afb      	ldrb	r3, [r7, #11]
 8001b66:	4413      	add	r3, r2
 8001b68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d903      	bls.n	8001b7c <prvTraceStoreKernelCallWithParam+0x48>
 8001b74:	482f      	ldr	r0, [pc, #188]	; (8001c34 <prvTraceStoreKernelCallWithParam+0x100>)
 8001b76:	f000 fc59 	bl	800242c <prvTraceError>
 8001b7a:	e051      	b.n	8001c20 <prvTraceStoreKernelCallWithParam+0xec>

	if (recorder_busy)
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <prvTraceStoreKernelCallWithParam+0x104>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8001b84:	482d      	ldr	r0, [pc, #180]	; (8001c3c <prvTraceStoreKernelCallWithParam+0x108>)
 8001b86:	f000 fc51 	bl	800242c <prvTraceError>
		return;
 8001b8a:	e049      	b.n	8001c20 <prvTraceStoreKernelCallWithParam+0xec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001b90:	617b      	str	r3, [r7, #20]
  return(result);
 8001b92:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
 8001b96:	2301      	movs	r3, #1
 8001b98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f383 8810 	msr	PRIMASK, r3
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <prvTraceStoreKernelCallWithParam+0x104>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <prvTraceStoreKernelCallWithParam+0x104>)
 8001ba8:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <prvTraceStoreKernelCallWithParam+0xfc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d02b      	beq.n	8001c0c <prvTraceStoreKernelCallWithParam+0xd8>
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <prvTraceStoreKernelCallWithParam+0x10c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d027      	beq.n	8001c0c <prvTraceStoreKernelCallWithParam+0xd8>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8001bbc:	20ff      	movs	r0, #255	; 0xff
 8001bbe:	f000 fd17 	bl	80025f0 <prvTraceGetDTS>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8001bc8:	6839      	ldr	r1, [r7, #0]
 8001bca:	20ff      	movs	r0, #255	; 0xff
 8001bcc:	f000 f83a 	bl	8001c44 <prvTraceGetParam>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8001bdc:	f000 fa5e 	bl	800209c <prvTraceNextFreeEventBufferSlot>
 8001be0:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d011      	beq.n	8001c0c <prvTraceStoreKernelCallWithParam+0xd8>
		{
			kse->dts = dts2;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bee:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001bfe:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001c06:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001c08:	f000 fcca 	bl	80025a0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <prvTraceStoreKernelCallWithParam+0x104>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <prvTraceStoreKernelCallWithParam+0x104>)
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	f383 8810 	msr	PRIMASK, r3
}
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	08009e38 	.word	0x08009e38
 8001c2c:	08009e78 	.word	0x08009e78
 8001c30:	20004aac 	.word	0x20004aac
 8001c34:	08009ec8 	.word	0x08009ec8
 8001c38:	200000b4 	.word	0x200000b4
 8001c3c:	08009f18 	.word	0x08009f18
 8001c40:	200000bc 	.word	0x200000bc

08001c44 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2bff      	cmp	r3, #255	; 0xff
 8001c52:	d009      	beq.n	8001c68 <prvTraceGetParam+0x24>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <prvTraceGetParam+0x24>
 8001c5e:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <prvTraceGetParam+0x74>)
 8001c60:	f000 fbe4 	bl	800242c <prvTraceError>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	e023      	b.n	8001cb0 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d801      	bhi.n	8001c74 <prvTraceGetParam+0x30>
	{
		return param;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	e01d      	b.n	8001cb0 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8001c74:	f000 fa12 	bl	800209c <prvTraceNextFreeEventBufferSlot>
 8001c78:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d014      	beq.n	8001caa <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	0c1b      	lsrs	r3, r3, #16
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001ca6:	f000 fc7b 	bl	80025a0 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4013      	ands	r3, r2
	}
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	08009f50 	.word	0x08009f50

08001cbc <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2bfe      	cmp	r3, #254	; 0xfe
 8001cce:	d903      	bls.n	8001cd8 <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8001cd0:	4827      	ldr	r0, [pc, #156]	; (8001d70 <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>)
 8001cd2:	f000 fbab 	bl	800242c <prvTraceError>
 8001cd6:	e047      	b.n	8001d68 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>

	if (recorder_busy)
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8001ce0:	4825      	ldr	r0, [pc, #148]	; (8001d78 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8001ce2:	f000 fba3 	bl	800242c <prvTraceError>
		return;
 8001ce6:	e03f      	b.n	8001d68 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8001cec:	613b      	str	r3, [r7, #16]
  return(result);
 8001cee:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f383 8810 	msr	PRIMASK, r3
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	4a1c      	ldr	r2, [pc, #112]	; (8001d74 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8001d04:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d021      	beq.n	8001d54 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01d      	beq.n	8001d54 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8001d18:	20ff      	movs	r0, #255	; 0xff
 8001d1a:	f000 fc69 	bl	80025f0 <prvTraceGetDTS>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d28:	f7ff ff8c 	bl	8001c44 <prvTraceGetParam>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8001d30:	f000 f9b4 	bl	800209c <prvTraceNextFreeEventBufferSlot>
 8001d34:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>
		{
			kse->dts = dts6;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	7ffa      	ldrb	r2, [r7, #31]
 8001d40:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d4e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001d50:	f000 fc26 	bl	80025a0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f383 8810 	msr	PRIMASK, r3
}
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	08009f8c 	.word	0x08009f8c
 8001d74:	200000b4 	.word	0x200000b4
 8001d78:	08009fe4 	.word	0x08009fe4
 8001d7c:	20004aac 	.word	0x20004aac
 8001d80:	200000bc 	.word	0x200000bc

08001d84 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d903      	bls.n	8001d9c <prvTraceStoreTaskswitch+0x18>
 8001d94:	482e      	ldr	r0, [pc, #184]	; (8001e50 <prvTraceStoreTaskswitch+0xcc>)
 8001d96:	f000 fb49 	bl	800242c <prvTraceError>
 8001d9a:	e056      	b.n	8001e4a <prvTraceStoreTaskswitch+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001da0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001da2:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	2301      	movs	r3, #1
 8001da8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f383 8810 	msr	PRIMASK, r3
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <prvTraceStoreTaskswitch+0xd0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <prvTraceStoreTaskswitch+0xd0>)
 8001db8:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <prvTraceStoreTaskswitch+0xd4>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d038      	beq.n	8001e36 <prvTraceStoreTaskswitch+0xb2>
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <prvTraceStoreTaskswitch+0xd8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d033      	beq.n	8001e36 <prvTraceStoreTaskswitch+0xb2>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <prvTraceStoreTaskswitch+0xdc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001dd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dd8:	f000 fc0a 	bl	80025f0 <prvTraceGetDTS>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8001de0:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <prvTraceStoreTaskswitch+0xd4>)
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <prvTraceStoreTaskswitch+0xd4>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8001dec:	f000 f956 	bl	800209c <prvTraceNextFreeEventBufferSlot>
 8001df0:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01e      	beq.n	8001e36 <prvTraceStoreTaskswitch+0xb2>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <prvTraceStoreTaskswitch+0xd4>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	2003      	movs	r0, #3
 8001e00:	f000 f8e6 	bl	8001fd0 <prvTraceGetObjectState>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d103      	bne.n	8001e12 <prvTraceStoreTaskswitch+0x8e>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e002      	b.n	8001e18 <prvTraceStoreTaskswitch+0x94>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2206      	movs	r2, #6
 8001e16:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	8b7a      	ldrh	r2, [r7, #26]
 8001e1c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	7e7a      	ldrb	r2, [r7, #25]
 8001e22:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <prvTraceStoreTaskswitch+0xd4>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f893 	bl	8001f58 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8001e32:	f000 fbb5 	bl	80025a0 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <prvTraceStoreTaskswitch+0xd0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <prvTraceStoreTaskswitch+0xd0>)
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f383 8810 	msr	PRIMASK, r3
}
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	0800a01c 	.word	0x0800a01c
 8001e54:	200000b4 	.word	0x200000b4
 8001e58:	200000bc 	.word	0x200000bc
 8001e5c:	20004aac 	.word	0x20004aac
 8001e60:	200000a0 	.word	0x200000a0

08001e64 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	71bb      	strb	r3, [r7, #6]
 8001e72:	4613      	mov	r3, r2
 8001e74:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d903      	bls.n	8001e84 <prvTraceSetPriorityProperty+0x20>
 8001e7c:	4814      	ldr	r0, [pc, #80]	; (8001ed0 <prvTraceSetPriorityProperty+0x6c>)
 8001e7e:	f000 fad5 	bl	800242c <prvTraceError>
 8001e82:	e022      	b.n	8001eca <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <prvTraceSetPriorityProperty+0x70>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e90:	79ba      	ldrb	r2, [r7, #6]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d903      	bls.n	8001e9e <prvTraceSetPriorityProperty+0x3a>
 8001e96:	4810      	ldr	r0, [pc, #64]	; (8001ed8 <prvTraceSetPriorityProperty+0x74>)
 8001e98:	f000 fac8 	bl	800242c <prvTraceError>
 8001e9c:	e015      	b.n	8001eca <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <prvTraceSetPriorityProperty+0x70>)
 8001ea0:	681c      	ldr	r4, [r3, #0]
 8001ea2:	79fa      	ldrb	r2, [r7, #7]
 8001ea4:	79bb      	ldrb	r3, [r7, #6]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f91b 	bl	80020e4 <uiIndexOfObject>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <prvTraceSetPriorityProperty+0x70>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4423      	add	r3, r4
 8001ec4:	797a      	ldrb	r2, [r7, #5]
 8001ec6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	0800a1b0 	.word	0x0800a1b0
 8001ed4:	20004aac 	.word	0x20004aac
 8001ed8:	0800a1fc 	.word	0x0800a1fc

08001edc <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d904      	bls.n	8001efc <prvTraceGetPriorityProperty+0x20>
 8001ef2:	4816      	ldr	r0, [pc, #88]	; (8001f4c <prvTraceGetPriorityProperty+0x70>)
 8001ef4:	f000 fa9a 	bl	800242c <prvTraceError>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e022      	b.n	8001f42 <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <prvTraceGetPriorityProperty+0x74>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4413      	add	r3, r2
 8001f04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f08:	79ba      	ldrb	r2, [r7, #6]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d904      	bls.n	8001f18 <prvTraceGetPriorityProperty+0x3c>
 8001f0e:	4811      	ldr	r0, [pc, #68]	; (8001f54 <prvTraceGetPriorityProperty+0x78>)
 8001f10:	f000 fa8c 	bl	800242c <prvTraceError>
 8001f14:	2300      	movs	r3, #0
 8001f16:	e014      	b.n	8001f42 <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <prvTraceGetPriorityProperty+0x74>)
 8001f1a:	681c      	ldr	r4, [r3, #0]
 8001f1c:	79fa      	ldrb	r2, [r7, #7]
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f8de 	bl	80020e4 <uiIndexOfObject>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <prvTraceGetPriorityProperty+0x74>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	4413      	add	r3, r2
 8001f34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f38:	440b      	add	r3, r1
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	4423      	add	r3, r4
 8001f3e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	0800a23c 	.word	0x0800a23c
 8001f50:	20004aac 	.word	0x20004aac
 8001f54:	0800a288 	.word	0x0800a288

08001f58 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
 8001f62:	460b      	mov	r3, r1
 8001f64:	71bb      	strb	r3, [r7, #6]
 8001f66:	4613      	mov	r3, r2
 8001f68:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d903      	bls.n	8001f78 <prvTraceSetObjectState+0x20>
 8001f70:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <prvTraceSetObjectState+0x6c>)
 8001f72:	f000 fa5b 	bl	800242c <prvTraceError>
 8001f76:	e021      	b.n	8001fbc <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <prvTraceSetObjectState+0x70>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f84:	79ba      	ldrb	r2, [r7, #6]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d903      	bls.n	8001f92 <prvTraceSetObjectState+0x3a>
 8001f8a:	4810      	ldr	r0, [pc, #64]	; (8001fcc <prvTraceSetObjectState+0x74>)
 8001f8c:	f000 fa4e 	bl	800242c <prvTraceError>
 8001f90:	e014      	b.n	8001fbc <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <prvTraceSetObjectState+0x70>)
 8001f94:	681c      	ldr	r4, [r3, #0]
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	79bb      	ldrb	r3, [r7, #6]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f8a1 	bl	80020e4 <uiIndexOfObject>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <prvTraceSetObjectState+0x70>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4413      	add	r3, r2
 8001fae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001fb2:	440b      	add	r3, r1
 8001fb4:	4423      	add	r3, r4
 8001fb6:	797a      	ldrb	r2, [r7, #5]
 8001fb8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	0800a2c8 	.word	0x0800a2c8
 8001fc8:	20004aac 	.word	0x20004aac
 8001fcc:	0800a30c 	.word	0x0800a30c

08001fd0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	460a      	mov	r2, r1
 8001fda:	71fb      	strb	r3, [r7, #7]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d904      	bls.n	8001ff0 <prvTraceGetObjectState+0x20>
 8001fe6:	4815      	ldr	r0, [pc, #84]	; (800203c <prvTraceGetObjectState+0x6c>)
 8001fe8:	f000 fa20 	bl	800242c <prvTraceError>
 8001fec:	2300      	movs	r3, #0
 8001fee:	e021      	b.n	8002034 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <prvTraceGetObjectState+0x70>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ffc:	79ba      	ldrb	r2, [r7, #6]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d904      	bls.n	800200c <prvTraceGetObjectState+0x3c>
 8002002:	4810      	ldr	r0, [pc, #64]	; (8002044 <prvTraceGetObjectState+0x74>)
 8002004:	f000 fa12 	bl	800242c <prvTraceError>
 8002008:	2300      	movs	r3, #0
 800200a:	e013      	b.n	8002034 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <prvTraceGetObjectState+0x70>)
 800200e:	681c      	ldr	r4, [r3, #0]
 8002010:	79fa      	ldrb	r2, [r7, #7]
 8002012:	79bb      	ldrb	r3, [r7, #6]
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f864 	bl	80020e4 <uiIndexOfObject>
 800201c:	4603      	mov	r3, r0
 800201e:	4619      	mov	r1, r3
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <prvTraceGetObjectState+0x70>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	4413      	add	r3, r2
 8002028:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800202c:	440b      	add	r3, r1
 800202e:	4423      	add	r3, r4
 8002030:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	0800a348 	.word	0x0800a348
 8002040:	20004aac 	.word	0x20004aac
 8002044:	0800a38c 	.word	0x0800a38c

08002048 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <prvTraceSetTaskInstanceFinished+0x4c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800205a:	79fa      	ldrb	r2, [r7, #7]
 800205c:	429a      	cmp	r2, r3
 800205e:	d903      	bls.n	8002068 <prvTraceSetTaskInstanceFinished+0x20>
 8002060:	480d      	ldr	r0, [pc, #52]	; (8002098 <prvTraceSetTaskInstanceFinished+0x50>)
 8002062:	f000 f9e3 	bl	800242c <prvTraceError>
 8002066:	e011      	b.n	800208c <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <prvTraceSetTaskInstanceFinished+0x4c>)
 800206a:	681c      	ldr	r4, [r3, #0]
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2103      	movs	r1, #3
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f837 	bl	80020e4 <uiIndexOfObject>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <prvTraceSetTaskInstanceFinished+0x4c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8002082:	4413      	add	r3, r2
 8002084:	4423      	add	r3, r4
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}
 8002092:	bf00      	nop
 8002094:	20004aac 	.word	0x20004aac
 8002098:	0800a3c8 	.word	0x0800a3c8

0800209c <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <prvTraceNextFreeEventBufferSlot+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e014      	b.n	80020d8 <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <prvTraceNextFreeEventBufferSlot+0x40>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020b8:	d304      	bcc.n	80020c4 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 80020ba:	4809      	ldr	r0, [pc, #36]	; (80020e0 <prvTraceNextFreeEventBufferSlot+0x44>)
 80020bc:	f000 f9b6 	bl	800242c <prvTraceError>
		return NULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e009      	b.n	80020d8 <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <prvTraceNextFreeEventBufferSlot+0x40>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <prvTraceNextFreeEventBufferSlot+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80020d4:	4413      	add	r3, r2
 80020d6:	3304      	adds	r3, #4
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20004aac 	.word	0x20004aac
 80020e0:	0800a410 	.word	0x0800a410

080020e4 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	460a      	mov	r2, r1
 80020ee:	71fb      	strb	r3, [r7, #7]
 80020f0:	4613      	mov	r3, r2
 80020f2:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d904      	bls.n	8002104 <uiIndexOfObject+0x20>
 80020fa:	4822      	ldr	r0, [pc, #136]	; (8002184 <uiIndexOfObject+0xa0>)
 80020fc:	f000 f996 	bl	800242c <prvTraceError>
 8002100:	2300      	movs	r3, #0
 8002102:	e03a      	b.n	800217a <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <uiIndexOfObject+0x38>
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <uiIndexOfObject+0xa4>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	4413      	add	r3, r2
 8002112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002116:	79fa      	ldrb	r2, [r7, #7]
 8002118:	429a      	cmp	r2, r3
 800211a:	d904      	bls.n	8002126 <uiIndexOfObject+0x42>
 800211c:	481b      	ldr	r0, [pc, #108]	; (800218c <uiIndexOfObject+0xa8>)
 800211e:	f000 f985 	bl	800242c <prvTraceError>
 8002122:	2300      	movs	r3, #0
 8002124:	e029      	b.n	800217a <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8002126:	79bb      	ldrb	r3, [r7, #6]
 8002128:	2b08      	cmp	r3, #8
 800212a:	d822      	bhi.n	8002172 <uiIndexOfObject+0x8e>
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01f      	beq.n	8002172 <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <uiIndexOfObject+0xa4>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	4413      	add	r3, r2
 800213a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 800213e:	79fa      	ldrb	r2, [r7, #7]
 8002140:	429a      	cmp	r2, r3
 8002142:	d816      	bhi.n	8002172 <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <uiIndexOfObject+0xa4>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	79bb      	ldrb	r3, [r7, #6]
 800214a:	3338      	adds	r3, #56	; 0x38
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <uiIndexOfObject+0xa4>)
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	79bb      	ldrb	r3, [r7, #6]
 8002158:	440b      	add	r3, r1
 800215a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800215e:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	3b01      	subs	r3, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8002164:	b29b      	uxth	r3, r3
 8002166:	fb11 f303 	smulbb	r3, r1, r3
 800216a:	b29b      	uxth	r3, r3
 800216c:	4413      	add	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	e003      	b.n	800217a <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8002172:	4807      	ldr	r0, [pc, #28]	; (8002190 <uiIndexOfObject+0xac>)
 8002174:	f000 f95a 	bl	800242c <prvTraceError>
	return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	0800a438 	.word	0x0800a438
 8002188:	20004aac 	.word	0x20004aac
 800218c:	0800a478 	.word	0x0800a478
 8002190:	0800a4b8 	.word	0x0800a4b8

08002194 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 800219e:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <prvTraceGetObjectHandle+0x140>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d104      	bne.n	80021b0 <prvTraceGetObjectHandle+0x1c>
 80021a6:	484c      	ldr	r0, [pc, #304]	; (80022d8 <prvTraceGetObjectHandle+0x144>)
 80021a8:	f000 f940 	bl	800242c <prvTraceError>
 80021ac:	2300      	movs	r3, #0
 80021ae:	e08d      	b.n	80022cc <prvTraceGetObjectHandle+0x138>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d904      	bls.n	80021c0 <prvTraceGetObjectHandle+0x2c>
 80021b6:	4849      	ldr	r0, [pc, #292]	; (80022dc <prvTraceGetObjectHandle+0x148>)
 80021b8:	f000 f938 	bl	800242c <prvTraceError>
 80021bc:	2300      	movs	r3, #0
 80021be:	e085      	b.n	80022cc <prvTraceGetObjectHandle+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021c0:	f3ef 8310 	mrs	r3, PRIMASK
 80021c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80021c6:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	2301      	movs	r3, #1
 80021cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f383 8810 	msr	PRIMASK, r3
 80021d4:	4b42      	ldr	r3, [pc, #264]	; (80022e0 <prvTraceGetObjectHandle+0x14c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	3301      	adds	r3, #1
 80021da:	4a41      	ldr	r2, [pc, #260]	; (80022e0 <prvTraceGetObjectHandle+0x14c>)
 80021dc:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	4a40      	ldr	r2, [pc, #256]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 80021e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <prvTraceGetObjectHandle+0x154>)
 80021ea:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 80021ec:	4b3e      	ldr	r3, [pc, #248]	; (80022e8 <prvTraceGetObjectHandle+0x154>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a3c      	ldr	r2, [pc, #240]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 80021f2:	4413      	add	r3, r2
 80021f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d114      	bne.n	8002226 <prvTraceGetObjectHandle+0x92>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 80021fc:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <prvTraceGetObjectHandle+0x154>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	4937      	ldr	r1, [pc, #220]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 8002206:	3308      	adds	r3, #8
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	440b      	add	r3, r1
 800220c:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 800220e:	b2db      	uxtb	r3, r3
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <prvTraceGetObjectHandle+0x154>)
 8002216:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8002218:	3201      	adds	r2, #1
 800221a:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 800221c:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 800221e:	4413      	add	r3, r2
 8002220:	460a      	mov	r2, r1
 8002222:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <prvTraceGetObjectHandle+0x154>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2e      	ldr	r2, [pc, #184]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 800222c:	4413      	add	r3, r2
 800222e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002232:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	4a2b      	ldr	r2, [pc, #172]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 8002238:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4929      	ldr	r1, [pc, #164]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 8002240:	3310      	adds	r3, #16
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	440b      	add	r3, r1
 8002246:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8002248:	429a      	cmp	r2, r3
 800224a:	d90a      	bls.n	8002262 <prvTraceGetObjectHandle+0xce>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f8f2 	bl	8001438 <pszTraceGetErrorNotEnoughHandles>
 8002254:	4603      	mov	r3, r0
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f8e8 	bl	800242c <prvTraceError>
		handle = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	77fb      	strb	r3, [r7, #31]
 8002260:	e029      	b.n	80022b6 <prvTraceGetObjectHandle+0x122>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 8002266:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800226a:	3201      	adds	r2, #1
 800226c:	b291      	uxth	r1, r2
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 8002270:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 8002278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800227c:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 8002282:	3308      	adds	r3, #8
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 800228a:	1acb      	subs	r3, r1, r3
 800228c:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 8002292:	3318      	adds	r3, #24
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	88db      	ldrh	r3, [r3, #6]
 800229a:	461a      	mov	r2, r3
		if (hndCount >
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4293      	cmp	r3, r2
 80022a0:	dd09      	ble.n	80022b6 <prvTraceGetObjectHandle+0x122>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 80022a6:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 80022a8:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <prvTraceGetObjectHandle+0x150>)
 80022ac:	3318      	adds	r3, #24
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	460a      	mov	r2, r1
 80022b4:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <prvTraceGetObjectHandle+0x14c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <prvTraceGetObjectHandle+0x14c>)
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f383 8810 	msr	PRIMASK, r3

	return handle;
 80022ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20004aac 	.word	0x20004aac
 80022d8:	08009918 	.word	0x08009918
 80022dc:	0800a4f8 	.word	0x0800a4f8
 80022e0:	200000b4 	.word	0x200000b4
 80022e4:	200063c0 	.word	0x200063c0
 80022e8:	200000c8 	.word	0x200000c8

080022ec <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	460a      	mov	r2, r1
 80022f6:	71fb      	strb	r3, [r7, #7]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 80022fc:	79fa      	ldrb	r2, [r7, #7]
 80022fe:	79bb      	ldrb	r3, [r7, #6]
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff feee 	bl	80020e4 <uiIndexOfObject>
 8002308:	4603      	mov	r3, r0
 800230a:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <prvMarkObjectAsUsed+0x38>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	4413      	add	r3, r2
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20004aac 	.word	0x20004aac

08002328 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e010      	b.n	800235c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	441a      	add	r2, r3
 8002340:	68f9      	ldr	r1, [r7, #12]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	440b      	add	r3, r1
 8002346:	7812      	ldrb	r2, [r2, #0]
 8002348:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	4413      	add	r3, r2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d3ea      	bcc.n	800233a <prvStrncpy+0x12>
			break;
	}
}
 8002364:	e000      	b.n	8002368 <prvStrncpy+0x40>
			break;
 8002366:	bf00      	nop
}
 8002368:	bf00      	nop
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	603a      	str	r2, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
 8002380:	460b      	mov	r3, r1
 8002382:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <prvTraceSetObjectName+0x1e>
 800238a:	4822      	ldr	r0, [pc, #136]	; (8002414 <prvTraceSetObjectName+0xa0>)
 800238c:	f000 f84e 	bl	800242c <prvTraceError>
 8002390:	e03d      	b.n	800240e <prvTraceSetObjectName+0x9a>

	if (objectclass >= TRACE_NCLASSES)
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d903      	bls.n	80023a0 <prvTraceSetObjectName+0x2c>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8002398:	481f      	ldr	r0, [pc, #124]	; (8002418 <prvTraceSetObjectName+0xa4>)
 800239a:	f000 f847 	bl	800242c <prvTraceError>
		return;
 800239e:	e036      	b.n	800240e <prvTraceSetObjectName+0x9a>
	}

	if (handle == 0)
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <prvTraceSetObjectName+0x3a>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 80023a6:	481d      	ldr	r0, [pc, #116]	; (800241c <prvTraceSetObjectName+0xa8>)
 80023a8:	f000 f840 	bl	800242c <prvTraceError>
		return;
 80023ac:	e02f      	b.n	800240e <prvTraceSetObjectName+0x9a>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <prvTraceSetObjectName+0xac>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	4413      	add	r3, r2
 80023b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ba:	79ba      	ldrb	r2, [r7, #6]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d908      	bls.n	80023d2 <prvTraceSetObjectName+0x5e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f838 	bl	8001438 <pszTraceGetErrorNotEnoughHandles>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f82e 	bl	800242c <prvTraceError>
 80023d0:	e01d      	b.n	800240e <prvTraceSetObjectName+0x9a>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 80023d2:	79fa      	ldrb	r2, [r7, #7]
 80023d4:	79bb      	ldrb	r3, [r7, #6]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fe83 	bl	80020e4 <uiIndexOfObject>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <prvTraceSetObjectName+0xb0>)
 80023e4:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <prvTraceSetObjectName+0xb4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <prvTraceSetObjectName+0x9a>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <prvTraceSetObjectName+0xac>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <prvTraceSetObjectName+0xb0>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	3388      	adds	r3, #136	; 0x88
 80023f8:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <prvTraceSetObjectName+0xac>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4413      	add	r3, r2
 8002402:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8002406:	461a      	mov	r2, r3
 8002408:	6839      	ldr	r1, [r7, #0]
 800240a:	f7ff ff8d 	bl	8002328 <prvStrncpy>
		}
	}
}
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	0800a5fc 	.word	0x0800a5fc
 8002418:	0800a630 	.word	0x0800a630
 800241c:	0800a660 	.word	0x0800a660
 8002420:	20004aac 	.word	0x20004aac
 8002424:	200000cc 	.word	0x200000cc
 8002428:	200063b8 	.word	0x200063b8

0800242c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <prvTraceError+0x50>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <prvTraceError+0x14>
	{
		vTraceStop();
 800243c:	f7ff f8bc 	bl	80015b8 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <prvTraceError+0x54>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d115      	bne.n	8002474 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <prvTraceError+0x54>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <prvTraceError+0x50>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00e      	beq.n	8002474 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <prvTraceError+0x50>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 6010 	add.w	r0, r3, #2304	; 0x900
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <prvTraceError+0x54>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2250      	movs	r2, #80	; 0x50
 8002464:	4619      	mov	r1, r3
 8002466:	f7ff ff5f 	bl	8002328 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <prvTraceError+0x50>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20004aac 	.word	0x20004aac
 8002480:	200063b8 	.word	0x200063b8

08002484 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d175      	bne.n	8002588 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x104>
 800249c:	483e      	ldr	r0, [pc, #248]	; (8002598 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x114>)
 800249e:	f7ff ffc5 	bl	800242c <prvTraceError>
 80024a2:	e075      	b.n	8002590 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80024a4:	4b3d      	ldr	r3, [pc, #244]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4413      	add	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80024b0:	4b3a      	ldr	r3, [pc, #232]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 80024be:	2b98      	cmp	r3, #152	; 0x98
 80024c0:	d929      	bls.n	8002516 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 80024c2:	4b36      	ldr	r3, [pc, #216]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80024d0:	2ba7      	cmp	r3, #167	; 0xa7
 80024d2:	d820      	bhi.n	8002516 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 80024e2:	3368      	adds	r3, #104	; 0x68
 80024e4:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	441a      	add	r2, r3
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d244      	bcs.n	8002580 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002502:	4413      	add	r3, r2
 8002504:	1d18      	adds	r0, r3, #4
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	3301      	adds	r3, #1
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	461a      	mov	r2, r3
 800250e:	2100      	movs	r1, #0
 8002510:	f006 fa61 	bl	80089d6 <memset>
		{
 8002514:	e034      	b.n	8002580 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8002524:	2b01      	cmp	r3, #1
 8002526:	d12c      	bne.n	8002582 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	429a      	cmp	r2, r3
 8002534:	d20d      	bcs.n	8002552 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xce>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002542:	4413      	add	r3, r2
 8002544:	3304      	adds	r3, #4
 8002546:	2208      	movs	r2, #8
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f006 fa43 	bl	80089d6 <memset>
 8002550:	e017      	b.n	8002582 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f603 1354 	addw	r3, r3, #2388	; 0x954
 800255a:	2204      	movs	r2, #4
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f006 fa39 	bl	80089d6 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002570:	4413      	add	r3, r2
 8002572:	3304      	adds	r3, #4
 8002574:	2204      	movs	r2, #4
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f006 fa2c 	bl	80089d6 <memset>
 800257e:	e000      	b.n	8002582 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
 8002580:	bf00      	nop
			}
		}
		i++;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3301      	adds	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	429a      	cmp	r2, r3
 800258e:	d389      	bcc.n	80024a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	0800a6c0 	.word	0x0800a6c0
 800259c:	20004aac 	.word	0x20004aac

080025a0 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <prvTraceUpdateCounters+0x4c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01b      	beq.n	80025e6 <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <prvTraceUpdateCounters+0x4c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	3201      	adds	r2, #1
 80025b6:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <prvTraceUpdateCounters+0x4c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69da      	ldr	r2, [r3, #28]
 80025be:	3201      	adds	r2, #1
 80025c0:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <prvTraceUpdateCounters+0x4c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025cc:	d307      	bcc.n	80025de <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <prvTraceUpdateCounters+0x4c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2201      	movs	r2, #1
 80025d4:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <prvTraceUpdateCounters+0x4c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 80025de:	2001      	movs	r0, #1
 80025e0:	f7ff ff50 	bl	8002484 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 80025e4:	e000      	b.n	80025e8 <prvTraceUpdateCounters+0x48>
		return;
 80025e6:	bf00      	nop
#endif
}
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20004aac 	.word	0x20004aac

080025f0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	2bff      	cmp	r3, #255	; 0xff
 800260a:	d009      	beq.n	8002620 <prvTraceGetDTS+0x30>
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <prvTraceGetDTS+0x30>
 8002616:	485a      	ldr	r0, [pc, #360]	; (8002780 <prvTraceGetDTS+0x190>)
 8002618:	f7ff ff08 	bl	800242c <prvTraceError>
 800261c:	2300      	movs	r3, #0
 800261e:	e0ab      	b.n	8002778 <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 8002620:	4b58      	ldr	r3, [pc, #352]	; (8002784 <prvTraceGetDTS+0x194>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	2b00      	cmp	r3, #0
 8002628:	d116      	bne.n	8002658 <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 800262a:	4b57      	ldr	r3, [pc, #348]	; (8002788 <prvTraceGetDTS+0x198>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8002632:	4b55      	ldr	r3, [pc, #340]	; (8002788 <prvTraceGetDTS+0x198>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <prvTraceGetDTS+0x194>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0892      	lsrs	r2, r2, #2
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
 800263e:	e00b      	b.n	8002658 <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8002640:	4b52      	ldr	r3, [pc, #328]	; (800278c <prvTraceGetDTS+0x19c>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b52      	ldr	r3, [pc, #328]	; (8002790 <prvTraceGetDTS+0x1a0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d005      	beq.n	8002658 <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 800264c:	4b51      	ldr	r3, [pc, #324]	; (8002794 <prvTraceGetDTS+0x1a4>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <prvTraceGetDTS+0x194>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0892      	lsrs	r2, r2, #2
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	4618      	mov	r0, r3
 800265e:	f000 f8d5 	bl	800280c <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <prvTraceGetDTS+0x1a8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a4a      	ldr	r2, [pc, #296]	; (8002798 <prvTraceGetDTS+0x1a8>)
 8002670:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8002672:	4b44      	ldr	r3, [pc, #272]	; (8002784 <prvTraceGetDTS+0x194>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2b00      	cmp	r3, #0
 800267a:	d043      	beq.n	8002704 <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <prvTraceGetDTS+0x194>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	429a      	cmp	r2, r3
 8002686:	d91d      	bls.n	80026c4 <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8002688:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <prvTraceGetDTS+0x194>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <prvTraceGetDTS+0x194>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	fbb2 f2f3 	udiv	r2, r2, r3
 800269a:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <prvTraceGetDTS+0x194>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	440a      	add	r2, r1
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <prvTraceGetDTS+0x194>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026a8:	4b36      	ldr	r3, [pc, #216]	; (8002784 <prvTraceGetDTS+0x194>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80026b4:	fb02 f200 	mul.w	r2, r2, r0
 80026b8:	1a9a      	subs	r2, r3, r2
 80026ba:	4b32      	ldr	r3, [pc, #200]	; (8002784 <prvTraceGetDTS+0x194>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	440a      	add	r2, r1
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28
 80026c2:	e007      	b.n	80026d4 <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 80026c4:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <prvTraceGetDTS+0x194>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026ca:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <prvTraceGetDTS+0x194>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	440a      	add	r2, r1
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 80026d4:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <prvTraceGetDTS+0x194>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <prvTraceGetDTS+0x194>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d313      	bcc.n	800270c <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <prvTraceGetDTS+0x194>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ea:	3201      	adds	r2, #1
 80026ec:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <prvTraceGetDTS+0x194>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026f4:	4b23      	ldr	r3, [pc, #140]	; (8002784 <prvTraceGetDTS+0x194>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <prvTraceGetDTS+0x194>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1a8a      	subs	r2, r1, r2
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
 8002702:	e003      	b.n	800270c <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8002704:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <prvTraceGetDTS+0x194>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	429a      	cmp	r2, r3
 8002712:	d92c      	bls.n	800276e <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8002714:	f7ff fcc2 	bl	800209c <prvTraceNextFreeEventBufferSlot>
 8002718:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d026      	beq.n	800276e <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002726:	4293      	cmp	r3, r2
 8002728:	d10b      	bne.n	8002742 <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	22a9      	movs	r2, #169	; 0xa9
 800272e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	0c1b      	lsrs	r3, r3, #16
 8002734:	b29a      	uxth	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2200      	movs	r2, #0
 800273e:	705a      	strb	r2, [r3, #1]
 8002740:	e013      	b.n	800276a <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	2bff      	cmp	r3, #255	; 0xff
 8002746:	d10d      	bne.n	8002764 <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	22a8      	movs	r2, #168	; 0xa8
 800274c:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	b29a      	uxth	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	0e1b      	lsrs	r3, r3, #24
 800275c:	b2da      	uxtb	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	705a      	strb	r2, [r3, #1]
 8002762:	e002      	b.n	800276a <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8002764:	480d      	ldr	r0, [pc, #52]	; (800279c <prvTraceGetDTS+0x1ac>)
 8002766:	f7ff fe61 	bl	800242c <prvTraceError>
			}
			prvTraceUpdateCounters();
 800276a:	f7ff ff19 	bl	80025a0 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	b29a      	uxth	r2, r3
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	4013      	ands	r3, r2
 8002776:	b29b      	uxth	r3, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	0800a718 	.word	0x0800a718
 8002784:	20004aac 	.word	0x20004aac
 8002788:	200000b8 	.word	0x200000b8
 800278c:	e0001004 	.word	0xe0001004
 8002790:	200063bc 	.word	0x200063bc
 8002794:	20000000 	.word	0x20000000
 8002798:	200000d0 	.word	0x200000d0
 800279c:	0800a758 	.word	0x0800a758

080027a0 <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <prvTraceInitCortexM+0x50>)
 80027a6:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <prvTraceInitCortexM+0x54>)
 80027a8:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <prvTraceInitCortexM+0x58>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <prvTraceInitCortexM+0x58>)
 80027b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b4:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <prvTraceInitCortexM+0x58>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 80027be:	480f      	ldr	r0, [pc, #60]	; (80027fc <prvTraceInitCortexM+0x5c>)
 80027c0:	f7ff fe34 	bl	800242c <prvTraceError>
			break;
 80027c4:	e012      	b.n	80027ec <prvTraceInitCortexM+0x4c>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <prvTraceInitCortexM+0x60>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 80027d2:	480c      	ldr	r0, [pc, #48]	; (8002804 <prvTraceInitCortexM+0x64>)
 80027d4:	f7ff fe2a 	bl	800242c <prvTraceError>
			break;
 80027d8:	e008      	b.n	80027ec <prvTraceInitCortexM+0x4c>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <prvTraceInitCortexM+0x68>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <prvTraceInitCortexM+0x60>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a06      	ldr	r2, [pc, #24]	; (8002800 <prvTraceInitCortexM+0x60>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	e0001fb0 	.word	0xe0001fb0
 80027f4:	c5acce55 	.word	0xc5acce55
 80027f8:	e000edfc 	.word	0xe000edfc
 80027fc:	0800a944 	.word	0x0800a944
 8002800:	e0001000 	.word	0xe0001000
 8002804:	0800a970 	.word	0x0800a970
 8002808:	e0001004 	.word	0xe0001004

0800280c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <prvTracePortGetTimeStamp+0x80>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d028      	beq.n	8002880 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <prvTracePortGetTimeStamp+0x84>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	601a      	str	r2, [r3, #0]
		return;
 8002836:	e023      	b.n	8002880 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <prvTracePortGetTimeStamp+0x88>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <prvTracePortGetTimeStamp+0x8c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	1ad2      	subs	r2, r2, r3
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <prvTracePortGetTimeStamp+0x90>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4413      	add	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	4a10      	ldr	r2, [pc, #64]	; (800289c <prvTracePortGetTimeStamp+0x90>)
 800285c:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <prvTracePortGetTimeStamp+0x84>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4413      	add	r3, r2
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <prvTracePortGetTimeStamp+0x84>)
 8002868:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <prvTracePortGetTimeStamp+0x84>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <prvTracePortGetTimeStamp+0x8c>)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e000      	b.n	8002882 <prvTracePortGetTimeStamp+0x76>
		return;
 8002880:	bf00      	nop
}
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	200000a8 	.word	0x200000a8
 8002890:	200000ac 	.word	0x200000ac
 8002894:	e0001004 	.word	0xe0001004
 8002898:	200000d4 	.word	0x200000d4
 800289c:	200000d8 	.word	0x200000d8

080028a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <HAL_Init+0x40>)
 80028aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_Init+0x40>)
 80028b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_Init+0x40>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_Init+0x40>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c8:	2003      	movs	r0, #3
 80028ca:	f000 f8d8 	bl	8002a7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe fa9e 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d4:	f7fe fa28 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_IncTick+0x20>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_IncTick+0x24>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_IncTick+0x24>)
 80028f6:	6013      	str	r3, [r2, #0]
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000014 	.word	0x20000014
 8002908:	20006450 	.word	0x20006450

0800290c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return uwTick;
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_GetTick+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20006450 	.word	0x20006450

08002924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002940:	4013      	ands	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800294c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002956:	4a04      	ldr	r2, [pc, #16]	; (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	60d3      	str	r3, [r2, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <__NVIC_GetPriorityGrouping+0x18>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	f003 0307 	and.w	r3, r3, #7
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	2b00      	cmp	r3, #0
 8002998:	db0b      	blt.n	80029b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	f003 021f 	and.w	r2, r3, #31
 80029a0:	4907      	ldr	r1, [pc, #28]	; (80029c0 <__NVIC_EnableIRQ+0x38>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2001      	movs	r0, #1
 80029aa:	fa00 f202 	lsl.w	r2, r0, r2
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000e100 	.word	0xe000e100

080029c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	db0a      	blt.n	80029ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	490c      	ldr	r1, [pc, #48]	; (8002a10 <__NVIC_SetPriority+0x4c>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	440b      	add	r3, r1
 80029e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ec:	e00a      	b.n	8002a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4908      	ldr	r1, [pc, #32]	; (8002a14 <__NVIC_SetPriority+0x50>)
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	3b04      	subs	r3, #4
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	440b      	add	r3, r1
 8002a02:	761a      	strb	r2, [r3, #24]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000e100 	.word	0xe000e100
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f1c3 0307 	rsb	r3, r3, #7
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	bf28      	it	cs
 8002a36:	2304      	movcs	r3, #4
 8002a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d902      	bls.n	8002a48 <NVIC_EncodePriority+0x30>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3b03      	subs	r3, #3
 8002a46:	e000      	b.n	8002a4a <NVIC_EncodePriority+0x32>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	43d9      	mvns	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	4313      	orrs	r3, r2
         );
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3724      	adds	r7, #36	; 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ff4c 	bl	8002924 <__NVIC_SetPriorityGrouping>
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa6:	f7ff ff61 	bl	800296c <__NVIC_GetPriorityGrouping>
 8002aaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	6978      	ldr	r0, [r7, #20]
 8002ab2:	f7ff ffb1 	bl	8002a18 <NVIC_EncodePriority>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff80 	bl	80029c4 <__NVIC_SetPriority>
}
 8002ac4:	bf00      	nop
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff54 	bl	8002988 <__NVIC_EnableIRQ>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e159      	b.n	8002db8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 8148 	bne.w	8002db2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d00b      	beq.n	8002b42 <HAL_GPIO_Init+0x5a>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d007      	beq.n	8002b42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b36:	2b11      	cmp	r3, #17
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b12      	cmp	r3, #18
 8002b40:	d130      	bne.n	8002ba4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 0201 	and.w	r2, r3, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0xfc>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b12      	cmp	r3, #18
 8002be2:	d123      	bne.n	8002c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0203 	and.w	r2, r3, #3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a2 	beq.w	8002db2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b56      	ldr	r3, [pc, #344]	; (8002dcc <HAL_GPIO_Init+0x2e4>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a55      	ldr	r2, [pc, #340]	; (8002dcc <HAL_GPIO_Init+0x2e4>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_GPIO_Init+0x2e4>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8a:	4a51      	ldr	r2, [pc, #324]	; (8002dd0 <HAL_GPIO_Init+0x2e8>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a48      	ldr	r2, [pc, #288]	; (8002dd4 <HAL_GPIO_Init+0x2ec>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x202>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a47      	ldr	r2, [pc, #284]	; (8002dd8 <HAL_GPIO_Init+0x2f0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x1fe>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a46      	ldr	r2, [pc, #280]	; (8002ddc <HAL_GPIO_Init+0x2f4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x1fa>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a45      	ldr	r2, [pc, #276]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x1f6>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a44      	ldr	r2, [pc, #272]	; (8002de4 <HAL_GPIO_Init+0x2fc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x1f2>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e008      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e006      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e004      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002cea:	2300      	movs	r3, #0
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f002 0203 	and.w	r2, r2, #3
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	4093      	lsls	r3, r2
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cfc:	4934      	ldr	r1, [pc, #208]	; (8002dd0 <HAL_GPIO_Init+0x2e8>)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3302      	adds	r3, #2
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d0a:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d2e:	4a2e      	ldr	r2, [pc, #184]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d34:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d58:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d82:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d88:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dac:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	f67f aea2 	bls.w	8002b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3724      	adds	r7, #36	; 0x24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40013c00 	.word	0x40013c00

08002dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dfc:	787b      	ldrb	r3, [r7, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e08:	e003      	b.n	8002e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	041a      	lsls	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	619a      	str	r2, [r3, #24]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e25b      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d075      	beq.n	8002f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3e:	4ba3      	ldr	r3, [pc, #652]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d00c      	beq.n	8002e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4a:	4ba0      	ldr	r3, [pc, #640]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d112      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e56:	4b9d      	ldr	r3, [pc, #628]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e62:	d10b      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	4b99      	ldr	r3, [pc, #612]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05b      	beq.n	8002f28 <HAL_RCC_OscConfig+0x108>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d157      	bne.n	8002f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e236      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x74>
 8002e86:	4b91      	ldr	r3, [pc, #580]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a90      	ldr	r2, [pc, #576]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e01d      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x98>
 8002e9e:	4b8b      	ldr	r3, [pc, #556]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a8a      	ldr	r2, [pc, #552]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b88      	ldr	r3, [pc, #544]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a87      	ldr	r2, [pc, #540]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002eb8:	4b84      	ldr	r3, [pc, #528]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a83      	ldr	r2, [pc, #524]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b81      	ldr	r3, [pc, #516]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a80      	ldr	r2, [pc, #512]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff fd18 	bl	800290c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7ff fd14 	bl	800290c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1fb      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b76      	ldr	r3, [pc, #472]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xc0>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7ff fd04 	bl	800290c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7ff fd00 	bl	800290c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1e7      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	4b6c      	ldr	r3, [pc, #432]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0xe8>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f36:	4b65      	ldr	r3, [pc, #404]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f42:	4b62      	ldr	r3, [pc, #392]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d11c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4e:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d116      	bne.n	8002f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x152>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e1bb      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	4b56      	ldr	r3, [pc, #344]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4952      	ldr	r1, [pc, #328]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	e03a      	b.n	8002ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f90:	4b4f      	ldr	r3, [pc, #316]	; (80030d0 <HAL_RCC_OscConfig+0x2b0>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7ff fcb9 	bl	800290c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9e:	f7ff fcb5 	bl	800290c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e19c      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	4b46      	ldr	r3, [pc, #280]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbc:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4940      	ldr	r1, [pc, #256]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
 8002fd0:	e015      	b.n	8002ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd2:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <HAL_RCC_OscConfig+0x2b0>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7ff fc98 	bl	800290c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7ff fc94 	bl	800290c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e17b      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d030      	beq.n	800306c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003012:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <HAL_RCC_OscConfig+0x2b4>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7ff fc78 	bl	800290c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003020:	f7ff fc74 	bl	800290c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e15b      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	4b26      	ldr	r3, [pc, #152]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8003034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x200>
 800303e:	e015      	b.n	800306c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_RCC_OscConfig+0x2b4>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7ff fc61 	bl	800290c <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304e:	f7ff fc5d 	bl	800290c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e144      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8003062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80a0 	beq.w	80031ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4b13      	ldr	r3, [pc, #76]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_OscConfig+0x2b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d121      	bne.n	80030fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCC_OscConfig+0x2b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <HAL_RCC_OscConfig+0x2b8>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7ff fc23 	bl	800290c <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c8:	e011      	b.n	80030ee <HAL_RCC_OscConfig+0x2ce>
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	42470000 	.word	0x42470000
 80030d4:	42470e80 	.word	0x42470e80
 80030d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030dc:	f7ff fc16 	bl	800290c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0fd      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	4b81      	ldr	r3, [pc, #516]	; (80032f4 <HAL_RCC_OscConfig+0x4d4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d106      	bne.n	8003110 <HAL_RCC_OscConfig+0x2f0>
 8003102:	4b7d      	ldr	r3, [pc, #500]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a7c      	ldr	r2, [pc, #496]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6713      	str	r3, [r2, #112]	; 0x70
 800310e:	e01c      	b.n	800314a <HAL_RCC_OscConfig+0x32a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b05      	cmp	r3, #5
 8003116:	d10c      	bne.n	8003132 <HAL_RCC_OscConfig+0x312>
 8003118:	4b77      	ldr	r3, [pc, #476]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	4a76      	ldr	r2, [pc, #472]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 800311e:	f043 0304 	orr.w	r3, r3, #4
 8003122:	6713      	str	r3, [r2, #112]	; 0x70
 8003124:	4b74      	ldr	r3, [pc, #464]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	4a73      	ldr	r2, [pc, #460]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6713      	str	r3, [r2, #112]	; 0x70
 8003130:	e00b      	b.n	800314a <HAL_RCC_OscConfig+0x32a>
 8003132:	4b71      	ldr	r3, [pc, #452]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a70      	ldr	r2, [pc, #448]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	4b6e      	ldr	r3, [pc, #440]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a6d      	ldr	r2, [pc, #436]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d015      	beq.n	800317e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003152:	f7ff fbdb 	bl	800290c <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	e00a      	b.n	8003170 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f7ff fbd7 	bl	800290c <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f241 3288 	movw	r2, #5000	; 0x1388
 8003168:	4293      	cmp	r3, r2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e0bc      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003170:	4b61      	ldr	r3, [pc, #388]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ee      	beq.n	800315a <HAL_RCC_OscConfig+0x33a>
 800317c:	e014      	b.n	80031a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7ff fbc5 	bl	800290c <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7ff fbc1 	bl	800290c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0a6      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319c:	4b56      	ldr	r3, [pc, #344]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ee      	bne.n	8003186 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ae:	4b52      	ldr	r3, [pc, #328]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a51      	ldr	r2, [pc, #324]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 80031b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8092 	beq.w	80032e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c4:	4b4c      	ldr	r3, [pc, #304]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d05c      	beq.n	800328a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d141      	bne.n	800325c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d8:	4b48      	ldr	r3, [pc, #288]	; (80032fc <HAL_RCC_OscConfig+0x4dc>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7ff fb95 	bl	800290c <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e6:	f7ff fb91 	bl	800290c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e078      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f8:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	019b      	lsls	r3, r3, #6
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	3b01      	subs	r3, #1
 800321e:	041b      	lsls	r3, r3, #16
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	061b      	lsls	r3, r3, #24
 8003228:	4933      	ldr	r1, [pc, #204]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322e:	4b33      	ldr	r3, [pc, #204]	; (80032fc <HAL_RCC_OscConfig+0x4dc>)
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7ff fb6a 	bl	800290c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323c:	f7ff fb66 	bl	800290c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e04d      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x41c>
 800325a:	e045      	b.n	80032e8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <HAL_RCC_OscConfig+0x4dc>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7ff fb53 	bl	800290c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326a:	f7ff fb4f 	bl	800290c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e036      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x44a>
 8003288:	e02e      	b.n	80032e8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e029      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <HAL_RCC_OscConfig+0x4d8>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d11c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d115      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032be:	4013      	ands	r3, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d10d      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40007000 	.word	0x40007000
 80032f8:	40023800 	.word	0x40023800
 80032fc:	42470060 	.word	0x42470060

08003300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0cc      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003314:	4b68      	ldr	r3, [pc, #416]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d90c      	bls.n	800333c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b65      	ldr	r3, [pc, #404]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b63      	ldr	r3, [pc, #396]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0b8      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d020      	beq.n	800338a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003354:	4b59      	ldr	r3, [pc, #356]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a58      	ldr	r2, [pc, #352]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800335e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800336c:	4b53      	ldr	r3, [pc, #332]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a52      	ldr	r2, [pc, #328]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003378:	4b50      	ldr	r3, [pc, #320]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	494d      	ldr	r1, [pc, #308]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d044      	beq.n	8003420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d107      	bne.n	80033ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	4b47      	ldr	r3, [pc, #284]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d119      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e07f      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d003      	beq.n	80033be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e06f      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ce:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e067      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4934      	ldr	r1, [pc, #208]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f0:	f7ff fa8c 	bl	800290c <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	e00a      	b.n	800340e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7ff fa88 	bl	800290c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e04f      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 020c 	and.w	r2, r3, #12
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	429a      	cmp	r2, r3
 800341e:	d1eb      	bne.n	80033f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d20c      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e032      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4916      	ldr	r1, [pc, #88]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	490e      	ldr	r1, [pc, #56]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003486:	f000 f821 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 800348a:	4601      	mov	r1, r0
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	fa21 f303 	lsr.w	r3, r1, r3
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_ClockConfig+0x1c8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd fcb2 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023c00 	.word	0x40023c00
 80034bc:	40023800 	.word	0x40023800
 80034c0:	0800aad8 	.word	0x0800aad8
 80034c4:	20000000 	.word	0x20000000
 80034c8:	20000010 	.word	0x20000010

080034cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	2300      	movs	r3, #0
 80034dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d007      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0x32>
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d008      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x38>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 80b4 	bne.w	8003660 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034fa:	60bb      	str	r3, [r7, #8]
       break;
 80034fc:	e0b3      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fe:	4b5e      	ldr	r3, [pc, #376]	; (8003678 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003500:	60bb      	str	r3, [r7, #8]
      break;
 8003502:	e0b0      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003504:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800350c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800350e:	4b58      	ldr	r3, [pc, #352]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04a      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351a:	4b55      	ldr	r3, [pc, #340]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	099b      	lsrs	r3, r3, #6
 8003520:	f04f 0400 	mov.w	r4, #0
 8003524:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	ea03 0501 	and.w	r5, r3, r1
 8003530:	ea04 0602 	and.w	r6, r4, r2
 8003534:	4629      	mov	r1, r5
 8003536:	4632      	mov	r2, r6
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	f04f 0400 	mov.w	r4, #0
 8003540:	0154      	lsls	r4, r2, #5
 8003542:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003546:	014b      	lsls	r3, r1, #5
 8003548:	4619      	mov	r1, r3
 800354a:	4622      	mov	r2, r4
 800354c:	1b49      	subs	r1, r1, r5
 800354e:	eb62 0206 	sbc.w	r2, r2, r6
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	f04f 0400 	mov.w	r4, #0
 800355a:	0194      	lsls	r4, r2, #6
 800355c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003560:	018b      	lsls	r3, r1, #6
 8003562:	1a5b      	subs	r3, r3, r1
 8003564:	eb64 0402 	sbc.w	r4, r4, r2
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	00e2      	lsls	r2, r4, #3
 8003572:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003576:	00d9      	lsls	r1, r3, #3
 8003578:	460b      	mov	r3, r1
 800357a:	4614      	mov	r4, r2
 800357c:	195b      	adds	r3, r3, r5
 800357e:	eb44 0406 	adc.w	r4, r4, r6
 8003582:	f04f 0100 	mov.w	r1, #0
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	0262      	lsls	r2, r4, #9
 800358c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003590:	0259      	lsls	r1, r3, #9
 8003592:	460b      	mov	r3, r1
 8003594:	4614      	mov	r4, r2
 8003596:	4618      	mov	r0, r3
 8003598:	4621      	mov	r1, r4
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f04f 0400 	mov.w	r4, #0
 80035a0:	461a      	mov	r2, r3
 80035a2:	4623      	mov	r3, r4
 80035a4:	f7fc fe74 	bl	8000290 <__aeabi_uldivmod>
 80035a8:	4603      	mov	r3, r0
 80035aa:	460c      	mov	r4, r1
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e049      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b0:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	f04f 0400 	mov.w	r4, #0
 80035ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	ea03 0501 	and.w	r5, r3, r1
 80035c6:	ea04 0602 	and.w	r6, r4, r2
 80035ca:	4629      	mov	r1, r5
 80035cc:	4632      	mov	r2, r6
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	f04f 0400 	mov.w	r4, #0
 80035d6:	0154      	lsls	r4, r2, #5
 80035d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035dc:	014b      	lsls	r3, r1, #5
 80035de:	4619      	mov	r1, r3
 80035e0:	4622      	mov	r2, r4
 80035e2:	1b49      	subs	r1, r1, r5
 80035e4:	eb62 0206 	sbc.w	r2, r2, r6
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	f04f 0400 	mov.w	r4, #0
 80035f0:	0194      	lsls	r4, r2, #6
 80035f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035f6:	018b      	lsls	r3, r1, #6
 80035f8:	1a5b      	subs	r3, r3, r1
 80035fa:	eb64 0402 	sbc.w	r4, r4, r2
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	00e2      	lsls	r2, r4, #3
 8003608:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800360c:	00d9      	lsls	r1, r3, #3
 800360e:	460b      	mov	r3, r1
 8003610:	4614      	mov	r4, r2
 8003612:	195b      	adds	r3, r3, r5
 8003614:	eb44 0406 	adc.w	r4, r4, r6
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	02a2      	lsls	r2, r4, #10
 8003622:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003626:	0299      	lsls	r1, r3, #10
 8003628:	460b      	mov	r3, r1
 800362a:	4614      	mov	r4, r2
 800362c:	4618      	mov	r0, r3
 800362e:	4621      	mov	r1, r4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f04f 0400 	mov.w	r4, #0
 8003636:	461a      	mov	r2, r3
 8003638:	4623      	mov	r3, r4
 800363a:	f7fc fe29 	bl	8000290 <__aeabi_uldivmod>
 800363e:	4603      	mov	r3, r0
 8003640:	460c      	mov	r4, r1
 8003642:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	60bb      	str	r3, [r7, #8]
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003662:	60bb      	str	r3, [r7, #8]
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	68bb      	ldr	r3, [r7, #8]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	00f42400 	.word	0x00f42400
 8003678:	007a1200 	.word	0x007a1200

0800367c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_RCC_GetHCLKFreq+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000000 	.word	0x20000000

08003694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003698:	f7ff fff0 	bl	800367c <HAL_RCC_GetHCLKFreq>
 800369c:	4601      	mov	r1, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0a9b      	lsrs	r3, r3, #10
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4a03      	ldr	r2, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	0800aae8 	.word	0x0800aae8

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c0:	f7ff ffdc 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036c4:	4601      	mov	r1, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0b5b      	lsrs	r3, r3, #13
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4a03      	ldr	r2, [pc, #12]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d2:	5cd3      	ldrb	r3, [r2, r3]
 80036d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	0800aae8 	.word	0x0800aae8

080036e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	220f      	movs	r2, #15
 80036f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0203 	and.w	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <HAL_RCC_GetClockConfig+0x60>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	601a      	str	r2, [r3, #0]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	40023c00 	.word	0x40023c00

08003748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e01d      	b.n	8003796 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f815 	bl	800379e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f000 f968 	bl	8003a5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b06      	cmp	r3, #6
 80037da:	d007      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d122      	bne.n	8003856 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d11b      	bne.n	8003856 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f06f 0202 	mvn.w	r2, #2
 8003826:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f8ee 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 8003842:	e005      	b.n	8003850 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f8e0 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8f1 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d122      	bne.n	80038aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b04      	cmp	r3, #4
 8003870:	d11b      	bne.n	80038aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f06f 0204 	mvn.w	r2, #4
 800387a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f8c4 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 8003896:	e005      	b.n	80038a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f8b6 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8c7 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d122      	bne.n	80038fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d11b      	bne.n	80038fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f06f 0208 	mvn.w	r2, #8
 80038ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2204      	movs	r2, #4
 80038d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f89a 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 80038ea:	e005      	b.n	80038f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f88c 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f89d 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b10      	cmp	r3, #16
 800390a:	d122      	bne.n	8003952 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b10      	cmp	r3, #16
 8003918:	d11b      	bne.n	8003952 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f06f 0210 	mvn.w	r2, #16
 8003922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2208      	movs	r2, #8
 8003928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f870 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 800393e:	e005      	b.n	800394c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f862 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f873 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10e      	bne.n	800397e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d107      	bne.n	800397e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f06f 0201 	mvn.w	r2, #1
 8003976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd f9c1 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d10e      	bne.n	80039aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b80      	cmp	r3, #128	; 0x80
 8003998:	d107      	bne.n	80039aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8e3 	bl	8003b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d10e      	bne.n	80039d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d107      	bne.n	80039d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f838 	bl	8003a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d10e      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d107      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f06f 0220 	mvn.w	r2, #32
 80039fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f8ad 	bl	8003b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a34      	ldr	r2, [pc, #208]	; (8003b40 <TIM_Base_SetConfig+0xe4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00f      	beq.n	8003a94 <TIM_Base_SetConfig+0x38>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7a:	d00b      	beq.n	8003a94 <TIM_Base_SetConfig+0x38>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a31      	ldr	r2, [pc, #196]	; (8003b44 <TIM_Base_SetConfig+0xe8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_Base_SetConfig+0x38>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a30      	ldr	r2, [pc, #192]	; (8003b48 <TIM_Base_SetConfig+0xec>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_Base_SetConfig+0x38>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a2f      	ldr	r2, [pc, #188]	; (8003b4c <TIM_Base_SetConfig+0xf0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d108      	bne.n	8003aa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a25      	ldr	r2, [pc, #148]	; (8003b40 <TIM_Base_SetConfig+0xe4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01b      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d017      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <TIM_Base_SetConfig+0xe8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <TIM_Base_SetConfig+0xec>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a20      	ldr	r2, [pc, #128]	; (8003b4c <TIM_Base_SetConfig+0xf0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <TIM_Base_SetConfig+0xf4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <TIM_Base_SetConfig+0xf8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <TIM_Base_SetConfig+0xfc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <TIM_Base_SetConfig+0xe4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d103      	bne.n	8003b2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	615a      	str	r2, [r3, #20]
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800

08003b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e03f      	b.n	8003c16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd f8e8 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	; 0x24
 8003bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f90b 	bl	8003de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b088      	sub	sp, #32
 8003c22:	af02      	add	r7, sp, #8
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	f040 8083 	bne.w	8003d46 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_UART_Transmit+0x2e>
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e07b      	b.n	8003d48 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Transmit+0x40>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e074      	b.n	8003d48 <HAL_UART_Transmit+0x12a>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2221      	movs	r2, #33	; 0x21
 8003c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c74:	f7fe fe4a 	bl	800290c <HAL_GetTick>
 8003c78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003c8e:	e042      	b.n	8003d16 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca6:	d122      	bne.n	8003cee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f84c 	bl	8003d50 <UART_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e042      	b.n	8003d48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	e017      	b.n	8003d16 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	e013      	b.n	8003d16 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2180      	movs	r1, #128	; 0x80
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f829 	bl	8003d50 <UART_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e01f      	b.n	8003d48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	60ba      	str	r2, [r7, #8]
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1b7      	bne.n	8003c90 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2140      	movs	r1, #64	; 0x40
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f810 	bl	8003d50 <UART_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e006      	b.n	8003d48 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d60:	e02c      	b.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d028      	beq.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d70:	f7fe fdcc 	bl	800290c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d21d      	bcs.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e00f      	b.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d0c3      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e26:	f023 030c 	bic.w	r3, r3, #12
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e52:	f040 818b 	bne.w	800416c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4ac1      	ldr	r2, [pc, #772]	; (8004160 <UART_SetConfig+0x37c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d005      	beq.n	8003e6c <UART_SetConfig+0x88>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4abf      	ldr	r2, [pc, #764]	; (8004164 <UART_SetConfig+0x380>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	f040 80bd 	bne.w	8003fe6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e6c:	f7ff fc26 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8003e70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	461d      	mov	r5, r3
 8003e76:	f04f 0600 	mov.w	r6, #0
 8003e7a:	46a8      	mov	r8, r5
 8003e7c:	46b1      	mov	r9, r6
 8003e7e:	eb18 0308 	adds.w	r3, r8, r8
 8003e82:	eb49 0409 	adc.w	r4, r9, r9
 8003e86:	4698      	mov	r8, r3
 8003e88:	46a1      	mov	r9, r4
 8003e8a:	eb18 0805 	adds.w	r8, r8, r5
 8003e8e:	eb49 0906 	adc.w	r9, r9, r6
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ea2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ea6:	4688      	mov	r8, r1
 8003ea8:	4691      	mov	r9, r2
 8003eaa:	eb18 0005 	adds.w	r0, r8, r5
 8003eae:	eb49 0106 	adc.w	r1, r9, r6
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	f04f 0600 	mov.w	r6, #0
 8003ebc:	196b      	adds	r3, r5, r5
 8003ebe:	eb46 0406 	adc.w	r4, r6, r6
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	f7fc f9e3 	bl	8000290 <__aeabi_uldivmod>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	460c      	mov	r4, r1
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4ba5      	ldr	r3, [pc, #660]	; (8004168 <UART_SetConfig+0x384>)
 8003ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	461d      	mov	r5, r3
 8003ee0:	f04f 0600 	mov.w	r6, #0
 8003ee4:	46a9      	mov	r9, r5
 8003ee6:	46b2      	mov	sl, r6
 8003ee8:	eb19 0309 	adds.w	r3, r9, r9
 8003eec:	eb4a 040a 	adc.w	r4, sl, sl
 8003ef0:	4699      	mov	r9, r3
 8003ef2:	46a2      	mov	sl, r4
 8003ef4:	eb19 0905 	adds.w	r9, r9, r5
 8003ef8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f10:	4689      	mov	r9, r1
 8003f12:	4692      	mov	sl, r2
 8003f14:	eb19 0005 	adds.w	r0, r9, r5
 8003f18:	eb4a 0106 	adc.w	r1, sl, r6
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	461d      	mov	r5, r3
 8003f22:	f04f 0600 	mov.w	r6, #0
 8003f26:	196b      	adds	r3, r5, r5
 8003f28:	eb46 0406 	adc.w	r4, r6, r6
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4623      	mov	r3, r4
 8003f30:	f7fc f9ae 	bl	8000290 <__aeabi_uldivmod>
 8003f34:	4603      	mov	r3, r0
 8003f36:	460c      	mov	r4, r1
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b8b      	ldr	r3, [pc, #556]	; (8004168 <UART_SetConfig+0x384>)
 8003f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	2164      	movs	r1, #100	; 0x64
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	3332      	adds	r3, #50	; 0x32
 8003f4e:	4a86      	ldr	r2, [pc, #536]	; (8004168 <UART_SetConfig+0x384>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f5c:	4498      	add	r8, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	461d      	mov	r5, r3
 8003f62:	f04f 0600 	mov.w	r6, #0
 8003f66:	46a9      	mov	r9, r5
 8003f68:	46b2      	mov	sl, r6
 8003f6a:	eb19 0309 	adds.w	r3, r9, r9
 8003f6e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f72:	4699      	mov	r9, r3
 8003f74:	46a2      	mov	sl, r4
 8003f76:	eb19 0905 	adds.w	r9, r9, r5
 8003f7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f92:	4689      	mov	r9, r1
 8003f94:	4692      	mov	sl, r2
 8003f96:	eb19 0005 	adds.w	r0, r9, r5
 8003f9a:	eb4a 0106 	adc.w	r1, sl, r6
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	461d      	mov	r5, r3
 8003fa4:	f04f 0600 	mov.w	r6, #0
 8003fa8:	196b      	adds	r3, r5, r5
 8003faa:	eb46 0406 	adc.w	r4, r6, r6
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4623      	mov	r3, r4
 8003fb2:	f7fc f96d 	bl	8000290 <__aeabi_uldivmod>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	460c      	mov	r4, r1
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <UART_SetConfig+0x384>)
 8003fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2164      	movs	r1, #100	; 0x64
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	3332      	adds	r3, #50	; 0x32
 8003fd0:	4a65      	ldr	r2, [pc, #404]	; (8004168 <UART_SetConfig+0x384>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	f003 0207 	and.w	r2, r3, #7
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4442      	add	r2, r8
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	e26f      	b.n	80044c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fe6:	f7ff fb55 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8003fea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	461d      	mov	r5, r3
 8003ff0:	f04f 0600 	mov.w	r6, #0
 8003ff4:	46a8      	mov	r8, r5
 8003ff6:	46b1      	mov	r9, r6
 8003ff8:	eb18 0308 	adds.w	r3, r8, r8
 8003ffc:	eb49 0409 	adc.w	r4, r9, r9
 8004000:	4698      	mov	r8, r3
 8004002:	46a1      	mov	r9, r4
 8004004:	eb18 0805 	adds.w	r8, r8, r5
 8004008:	eb49 0906 	adc.w	r9, r9, r6
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004018:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800401c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004020:	4688      	mov	r8, r1
 8004022:	4691      	mov	r9, r2
 8004024:	eb18 0005 	adds.w	r0, r8, r5
 8004028:	eb49 0106 	adc.w	r1, r9, r6
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	461d      	mov	r5, r3
 8004032:	f04f 0600 	mov.w	r6, #0
 8004036:	196b      	adds	r3, r5, r5
 8004038:	eb46 0406 	adc.w	r4, r6, r6
 800403c:	461a      	mov	r2, r3
 800403e:	4623      	mov	r3, r4
 8004040:	f7fc f926 	bl	8000290 <__aeabi_uldivmod>
 8004044:	4603      	mov	r3, r0
 8004046:	460c      	mov	r4, r1
 8004048:	461a      	mov	r2, r3
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <UART_SetConfig+0x384>)
 800404c:	fba3 2302 	umull	r2, r3, r3, r2
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	461d      	mov	r5, r3
 800405a:	f04f 0600 	mov.w	r6, #0
 800405e:	46a9      	mov	r9, r5
 8004060:	46b2      	mov	sl, r6
 8004062:	eb19 0309 	adds.w	r3, r9, r9
 8004066:	eb4a 040a 	adc.w	r4, sl, sl
 800406a:	4699      	mov	r9, r3
 800406c:	46a2      	mov	sl, r4
 800406e:	eb19 0905 	adds.w	r9, r9, r5
 8004072:	eb4a 0a06 	adc.w	sl, sl, r6
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800408a:	4689      	mov	r9, r1
 800408c:	4692      	mov	sl, r2
 800408e:	eb19 0005 	adds.w	r0, r9, r5
 8004092:	eb4a 0106 	adc.w	r1, sl, r6
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	461d      	mov	r5, r3
 800409c:	f04f 0600 	mov.w	r6, #0
 80040a0:	196b      	adds	r3, r5, r5
 80040a2:	eb46 0406 	adc.w	r4, r6, r6
 80040a6:	461a      	mov	r2, r3
 80040a8:	4623      	mov	r3, r4
 80040aa:	f7fc f8f1 	bl	8000290 <__aeabi_uldivmod>
 80040ae:	4603      	mov	r3, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <UART_SetConfig+0x384>)
 80040b6:	fba3 1302 	umull	r1, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2164      	movs	r1, #100	; 0x64
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	3332      	adds	r3, #50	; 0x32
 80040c8:	4a27      	ldr	r2, [pc, #156]	; (8004168 <UART_SetConfig+0x384>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040d6:	4498      	add	r8, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	461d      	mov	r5, r3
 80040dc:	f04f 0600 	mov.w	r6, #0
 80040e0:	46a9      	mov	r9, r5
 80040e2:	46b2      	mov	sl, r6
 80040e4:	eb19 0309 	adds.w	r3, r9, r9
 80040e8:	eb4a 040a 	adc.w	r4, sl, sl
 80040ec:	4699      	mov	r9, r3
 80040ee:	46a2      	mov	sl, r4
 80040f0:	eb19 0905 	adds.w	r9, r9, r5
 80040f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800410c:	4689      	mov	r9, r1
 800410e:	4692      	mov	sl, r2
 8004110:	eb19 0005 	adds.w	r0, r9, r5
 8004114:	eb4a 0106 	adc.w	r1, sl, r6
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	461d      	mov	r5, r3
 800411e:	f04f 0600 	mov.w	r6, #0
 8004122:	196b      	adds	r3, r5, r5
 8004124:	eb46 0406 	adc.w	r4, r6, r6
 8004128:	461a      	mov	r2, r3
 800412a:	4623      	mov	r3, r4
 800412c:	f7fc f8b0 	bl	8000290 <__aeabi_uldivmod>
 8004130:	4603      	mov	r3, r0
 8004132:	460c      	mov	r4, r1
 8004134:	461a      	mov	r2, r3
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <UART_SetConfig+0x384>)
 8004138:	fba3 1302 	umull	r1, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2164      	movs	r1, #100	; 0x64
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	3332      	adds	r3, #50	; 0x32
 800414a:	4a07      	ldr	r2, [pc, #28]	; (8004168 <UART_SetConfig+0x384>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f003 0207 	and.w	r2, r3, #7
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4442      	add	r2, r8
 800415c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800415e:	e1b2      	b.n	80044c6 <UART_SetConfig+0x6e2>
 8004160:	40011000 	.word	0x40011000
 8004164:	40011400 	.word	0x40011400
 8004168:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4ad7      	ldr	r2, [pc, #860]	; (80044d0 <UART_SetConfig+0x6ec>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d005      	beq.n	8004182 <UART_SetConfig+0x39e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4ad6      	ldr	r2, [pc, #856]	; (80044d4 <UART_SetConfig+0x6f0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	f040 80d1 	bne.w	8004324 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004182:	f7ff fa9b 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8004186:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	469a      	mov	sl, r3
 800418c:	f04f 0b00 	mov.w	fp, #0
 8004190:	46d0      	mov	r8, sl
 8004192:	46d9      	mov	r9, fp
 8004194:	eb18 0308 	adds.w	r3, r8, r8
 8004198:	eb49 0409 	adc.w	r4, r9, r9
 800419c:	4698      	mov	r8, r3
 800419e:	46a1      	mov	r9, r4
 80041a0:	eb18 080a 	adds.w	r8, r8, sl
 80041a4:	eb49 090b 	adc.w	r9, r9, fp
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041bc:	4688      	mov	r8, r1
 80041be:	4691      	mov	r9, r2
 80041c0:	eb1a 0508 	adds.w	r5, sl, r8
 80041c4:	eb4b 0609 	adc.w	r6, fp, r9
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	f04f 0400 	mov.w	r4, #0
 80041da:	0094      	lsls	r4, r2, #2
 80041dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041e0:	008b      	lsls	r3, r1, #2
 80041e2:	461a      	mov	r2, r3
 80041e4:	4623      	mov	r3, r4
 80041e6:	4628      	mov	r0, r5
 80041e8:	4631      	mov	r1, r6
 80041ea:	f7fc f851 	bl	8000290 <__aeabi_uldivmod>
 80041ee:	4603      	mov	r3, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	461a      	mov	r2, r3
 80041f4:	4bb8      	ldr	r3, [pc, #736]	; (80044d8 <UART_SetConfig+0x6f4>)
 80041f6:	fba3 2302 	umull	r2, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	469b      	mov	fp, r3
 8004204:	f04f 0c00 	mov.w	ip, #0
 8004208:	46d9      	mov	r9, fp
 800420a:	46e2      	mov	sl, ip
 800420c:	eb19 0309 	adds.w	r3, r9, r9
 8004210:	eb4a 040a 	adc.w	r4, sl, sl
 8004214:	4699      	mov	r9, r3
 8004216:	46a2      	mov	sl, r4
 8004218:	eb19 090b 	adds.w	r9, r9, fp
 800421c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004220:	f04f 0100 	mov.w	r1, #0
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800422c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004230:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004234:	4689      	mov	r9, r1
 8004236:	4692      	mov	sl, r2
 8004238:	eb1b 0509 	adds.w	r5, fp, r9
 800423c:	eb4c 060a 	adc.w	r6, ip, sl
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4619      	mov	r1, r3
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	f04f 0400 	mov.w	r4, #0
 8004252:	0094      	lsls	r4, r2, #2
 8004254:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004258:	008b      	lsls	r3, r1, #2
 800425a:	461a      	mov	r2, r3
 800425c:	4623      	mov	r3, r4
 800425e:	4628      	mov	r0, r5
 8004260:	4631      	mov	r1, r6
 8004262:	f7fc f815 	bl	8000290 <__aeabi_uldivmod>
 8004266:	4603      	mov	r3, r0
 8004268:	460c      	mov	r4, r1
 800426a:	461a      	mov	r2, r3
 800426c:	4b9a      	ldr	r3, [pc, #616]	; (80044d8 <UART_SetConfig+0x6f4>)
 800426e:	fba3 1302 	umull	r1, r3, r3, r2
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	2164      	movs	r1, #100	; 0x64
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	3332      	adds	r3, #50	; 0x32
 8004280:	4a95      	ldr	r2, [pc, #596]	; (80044d8 <UART_SetConfig+0x6f4>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428c:	4498      	add	r8, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	469b      	mov	fp, r3
 8004292:	f04f 0c00 	mov.w	ip, #0
 8004296:	46d9      	mov	r9, fp
 8004298:	46e2      	mov	sl, ip
 800429a:	eb19 0309 	adds.w	r3, r9, r9
 800429e:	eb4a 040a 	adc.w	r4, sl, sl
 80042a2:	4699      	mov	r9, r3
 80042a4:	46a2      	mov	sl, r4
 80042a6:	eb19 090b 	adds.w	r9, r9, fp
 80042aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042ae:	f04f 0100 	mov.w	r1, #0
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042c2:	4689      	mov	r9, r1
 80042c4:	4692      	mov	sl, r2
 80042c6:	eb1b 0509 	adds.w	r5, fp, r9
 80042ca:	eb4c 060a 	adc.w	r6, ip, sl
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	4619      	mov	r1, r3
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	f04f 0400 	mov.w	r4, #0
 80042e0:	0094      	lsls	r4, r2, #2
 80042e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042e6:	008b      	lsls	r3, r1, #2
 80042e8:	461a      	mov	r2, r3
 80042ea:	4623      	mov	r3, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	4631      	mov	r1, r6
 80042f0:	f7fb ffce 	bl	8000290 <__aeabi_uldivmod>
 80042f4:	4603      	mov	r3, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b77      	ldr	r3, [pc, #476]	; (80044d8 <UART_SetConfig+0x6f4>)
 80042fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	2164      	movs	r1, #100	; 0x64
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	3332      	adds	r3, #50	; 0x32
 800430e:	4a72      	ldr	r2, [pc, #456]	; (80044d8 <UART_SetConfig+0x6f4>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	f003 020f 	and.w	r2, r3, #15
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4442      	add	r2, r8
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	e0d0      	b.n	80044c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004324:	f7ff f9b6 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004328:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	469a      	mov	sl, r3
 800432e:	f04f 0b00 	mov.w	fp, #0
 8004332:	46d0      	mov	r8, sl
 8004334:	46d9      	mov	r9, fp
 8004336:	eb18 0308 	adds.w	r3, r8, r8
 800433a:	eb49 0409 	adc.w	r4, r9, r9
 800433e:	4698      	mov	r8, r3
 8004340:	46a1      	mov	r9, r4
 8004342:	eb18 080a 	adds.w	r8, r8, sl
 8004346:	eb49 090b 	adc.w	r9, r9, fp
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004356:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800435a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800435e:	4688      	mov	r8, r1
 8004360:	4691      	mov	r9, r2
 8004362:	eb1a 0508 	adds.w	r5, sl, r8
 8004366:	eb4b 0609 	adc.w	r6, fp, r9
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4619      	mov	r1, r3
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	f04f 0400 	mov.w	r4, #0
 800437c:	0094      	lsls	r4, r2, #2
 800437e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004382:	008b      	lsls	r3, r1, #2
 8004384:	461a      	mov	r2, r3
 8004386:	4623      	mov	r3, r4
 8004388:	4628      	mov	r0, r5
 800438a:	4631      	mov	r1, r6
 800438c:	f7fb ff80 	bl	8000290 <__aeabi_uldivmod>
 8004390:	4603      	mov	r3, r0
 8004392:	460c      	mov	r4, r1
 8004394:	461a      	mov	r2, r3
 8004396:	4b50      	ldr	r3, [pc, #320]	; (80044d8 <UART_SetConfig+0x6f4>)
 8004398:	fba3 2302 	umull	r2, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	469b      	mov	fp, r3
 80043a6:	f04f 0c00 	mov.w	ip, #0
 80043aa:	46d9      	mov	r9, fp
 80043ac:	46e2      	mov	sl, ip
 80043ae:	eb19 0309 	adds.w	r3, r9, r9
 80043b2:	eb4a 040a 	adc.w	r4, sl, sl
 80043b6:	4699      	mov	r9, r3
 80043b8:	46a2      	mov	sl, r4
 80043ba:	eb19 090b 	adds.w	r9, r9, fp
 80043be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043d6:	4689      	mov	r9, r1
 80043d8:	4692      	mov	sl, r2
 80043da:	eb1b 0509 	adds.w	r5, fp, r9
 80043de:	eb4c 060a 	adc.w	r6, ip, sl
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4619      	mov	r1, r3
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	f04f 0400 	mov.w	r4, #0
 80043f4:	0094      	lsls	r4, r2, #2
 80043f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043fa:	008b      	lsls	r3, r1, #2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4623      	mov	r3, r4
 8004400:	4628      	mov	r0, r5
 8004402:	4631      	mov	r1, r6
 8004404:	f7fb ff44 	bl	8000290 <__aeabi_uldivmod>
 8004408:	4603      	mov	r3, r0
 800440a:	460c      	mov	r4, r1
 800440c:	461a      	mov	r2, r3
 800440e:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <UART_SetConfig+0x6f4>)
 8004410:	fba3 1302 	umull	r1, r3, r3, r2
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	2164      	movs	r1, #100	; 0x64
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	3332      	adds	r3, #50	; 0x32
 8004422:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <UART_SetConfig+0x6f4>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442e:	4498      	add	r8, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	469b      	mov	fp, r3
 8004434:	f04f 0c00 	mov.w	ip, #0
 8004438:	46d9      	mov	r9, fp
 800443a:	46e2      	mov	sl, ip
 800443c:	eb19 0309 	adds.w	r3, r9, r9
 8004440:	eb4a 040a 	adc.w	r4, sl, sl
 8004444:	4699      	mov	r9, r3
 8004446:	46a2      	mov	sl, r4
 8004448:	eb19 090b 	adds.w	r9, r9, fp
 800444c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004450:	f04f 0100 	mov.w	r1, #0
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004464:	4689      	mov	r9, r1
 8004466:	4692      	mov	sl, r2
 8004468:	eb1b 0509 	adds.w	r5, fp, r9
 800446c:	eb4c 060a 	adc.w	r6, ip, sl
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4619      	mov	r1, r3
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	f04f 0400 	mov.w	r4, #0
 8004482:	0094      	lsls	r4, r2, #2
 8004484:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004488:	008b      	lsls	r3, r1, #2
 800448a:	461a      	mov	r2, r3
 800448c:	4623      	mov	r3, r4
 800448e:	4628      	mov	r0, r5
 8004490:	4631      	mov	r1, r6
 8004492:	f7fb fefd 	bl	8000290 <__aeabi_uldivmod>
 8004496:	4603      	mov	r3, r0
 8004498:	460c      	mov	r4, r1
 800449a:	461a      	mov	r2, r3
 800449c:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <UART_SetConfig+0x6f4>)
 800449e:	fba3 1302 	umull	r1, r3, r3, r2
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	2164      	movs	r1, #100	; 0x64
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	3332      	adds	r3, #50	; 0x32
 80044b0:	4a09      	ldr	r2, [pc, #36]	; (80044d8 <UART_SetConfig+0x6f4>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	f003 020f 	and.w	r2, r3, #15
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4442      	add	r2, r8
 80044c2:	609a      	str	r2, [r3, #8]
}
 80044c4:	e7ff      	b.n	80044c6 <UART_SetConfig+0x6e2>
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d0:	40011000 	.word	0x40011000
 80044d4:	40011400 	.word	0x40011400
 80044d8:	51eb851f 	.word	0x51eb851f

080044dc <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <SysTick_Handler+0x1c>)
 80044e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80044e4:	f003 f81c 	bl	8007520 <xTaskGetSchedulerState>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d001      	beq.n	80044f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80044ee:	f003 ffc3 	bl	8008478 <xPortSysTickHandler>
  }
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	e000e010 	.word	0xe000e010

080044fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004512:	f3ef 8305 	mrs	r3, IPSR
 8004516:	60bb      	str	r3, [r7, #8]
  return(result);
 8004518:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10f      	bne.n	800453e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800451e:	f3ef 8310 	mrs	r3, PRIMASK
 8004522:	607b      	str	r3, [r7, #4]
  return(result);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d105      	bne.n	8004536 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800452a:	f3ef 8311 	mrs	r3, BASEPRI
 800452e:	603b      	str	r3, [r7, #0]
  return(result);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <osKernelInitialize+0x3a>
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <osKernelInitialize+0x64>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d103      	bne.n	8004546 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800453e:	f06f 0305 	mvn.w	r3, #5
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e00c      	b.n	8004560 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <osKernelInitialize+0x64>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d105      	bne.n	800455a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <osKernelInitialize+0x64>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e002      	b.n	8004560 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
 800455e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004560:	68fb      	ldr	r3, [r7, #12]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	200000dc 	.word	0x200000dc

08004574 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800457a:	f3ef 8305 	mrs	r3, IPSR
 800457e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004580:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10f      	bne.n	80045a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004586:	f3ef 8310 	mrs	r3, PRIMASK
 800458a:	607b      	str	r3, [r7, #4]
  return(result);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d105      	bne.n	800459e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004592:	f3ef 8311 	mrs	r3, BASEPRI
 8004596:	603b      	str	r3, [r7, #0]
  return(result);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <osKernelStart+0x3a>
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <osKernelStart+0x68>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d103      	bne.n	80045ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80045a6:	f06f 0305 	mvn.w	r3, #5
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e010      	b.n	80045d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <osKernelStart+0x68>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d109      	bne.n	80045ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045b6:	f7ff ffa1 	bl	80044fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045ba:	4b08      	ldr	r3, [pc, #32]	; (80045dc <osKernelStart+0x68>)
 80045bc:	2202      	movs	r2, #2
 80045be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045c0:	f002 fa5c 	bl	8006a7c <vTaskStartScheduler>
      stat = osOK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e002      	b.n	80045d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80045ca:	f04f 33ff 	mov.w	r3, #4294967295
 80045ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045d0:	68fb      	ldr	r3, [r7, #12]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200000dc 	.word	0x200000dc

080045e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b090      	sub	sp, #64	; 0x40
 80045e4:	af04      	add	r7, sp, #16
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f0:	f3ef 8305 	mrs	r3, IPSR
 80045f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80045f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f040 808f 	bne.w	800471c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004602:	61bb      	str	r3, [r7, #24]
  return(result);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800460a:	f3ef 8311 	mrs	r3, BASEPRI
 800460e:	617b      	str	r3, [r7, #20]
  return(result);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <osThreadNew+0x3e>
 8004616:	4b44      	ldr	r3, [pc, #272]	; (8004728 <osThreadNew+0x148>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d07e      	beq.n	800471c <osThreadNew+0x13c>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d07b      	beq.n	800471c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004628:	2318      	movs	r3, #24
 800462a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d045      	beq.n	80046c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <osThreadNew+0x6a>
        name = attr->name;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <osThreadNew+0x90>
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	2b38      	cmp	r3, #56	; 0x38
 8004662:	d805      	bhi.n	8004670 <osThreadNew+0x90>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <osThreadNew+0x94>
        return (NULL);
 8004670:	2300      	movs	r3, #0
 8004672:	e054      	b.n	800471e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <osThreadNew+0xca>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b5b      	cmp	r3, #91	; 0x5b
 8004692:	d90a      	bls.n	80046aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <osThreadNew+0xca>
        mem = 1;
 80046a4:	2301      	movs	r3, #1
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	e010      	b.n	80046cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10c      	bne.n	80046cc <osThreadNew+0xec>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <osThreadNew+0xec>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <osThreadNew+0xec>
          mem = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	623b      	str	r3, [r7, #32]
 80046c6:	e001      	b.n	80046cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d110      	bne.n	80046f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046da:	9202      	str	r2, [sp, #8]
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f001 ff5b 	bl	80065a4 <xTaskCreateStatic>
 80046ee:	4603      	mov	r3, r0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	e013      	b.n	800471c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d110      	bne.n	800471c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	f107 0310 	add.w	r3, r7, #16
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f001 ffa3 	bl	8006658 <xTaskCreate>
 8004712:	4603      	mov	r3, r0
 8004714:	2b01      	cmp	r3, #1
 8004716:	d001      	beq.n	800471c <osThreadNew+0x13c>
          hTask = NULL;
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800471c:	693b      	ldr	r3, [r7, #16]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3730      	adds	r7, #48	; 0x30
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	200000dc 	.word	0x200000dc

0800472c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004734:	f3ef 8305 	mrs	r3, IPSR
 8004738:	613b      	str	r3, [r7, #16]
  return(result);
 800473a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10f      	bne.n	8004760 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004740:	f3ef 8310 	mrs	r3, PRIMASK
 8004744:	60fb      	str	r3, [r7, #12]
  return(result);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800474c:	f3ef 8311 	mrs	r3, BASEPRI
 8004750:	60bb      	str	r3, [r7, #8]
  return(result);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <osDelay+0x3c>
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <osDelay+0x58>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d103      	bne.n	8004768 <osDelay+0x3c>
    stat = osErrorISR;
 8004760:	f06f 0305 	mvn.w	r3, #5
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e007      	b.n	8004778 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f002 f916 	bl	80069a4 <vTaskDelay>
    }
  }

  return (stat);
 8004778:	697b      	ldr	r3, [r7, #20]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	200000dc 	.word	0x200000dc

08004788 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004794:	f3ef 8305 	mrs	r3, IPSR
 8004798:	613b      	str	r3, [r7, #16]
  return(result);
 800479a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 8085 	bne.w	80048ac <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a2:	f3ef 8310 	mrs	r3, PRIMASK
 80047a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d105      	bne.n	80047ba <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047ae:	f3ef 8311 	mrs	r3, BASEPRI
 80047b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <osMutexNew+0x3a>
 80047ba:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <osMutexNew+0x130>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d074      	beq.n	80048ac <osMutexNew+0x124>
    if (attr != NULL) {
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	e001      	b.n	80047d4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <osMutexNew+0x5c>
      rmtx = 1U;
 80047de:	2301      	movs	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	e001      	b.n	80047e8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d15c      	bne.n	80048ac <osMutexNew+0x124>
      mem = -1;
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295
 80047f6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d015      	beq.n	800482a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d006      	beq.n	8004814 <osMutexNew+0x8c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b4f      	cmp	r3, #79	; 0x4f
 800480c:	d902      	bls.n	8004814 <osMutexNew+0x8c>
          mem = 1;
 800480e:	2301      	movs	r3, #1
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	e00c      	b.n	800482e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d108      	bne.n	800482e <osMutexNew+0xa6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <osMutexNew+0xa6>
            mem = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	e001      	b.n	800482e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d112      	bne.n	800485a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4619      	mov	r1, r3
 8004840:	2004      	movs	r0, #4
 8004842:	f000 fbc3 	bl	8004fcc <xQueueCreateMutexStatic>
 8004846:	6278      	str	r0, [r7, #36]	; 0x24
 8004848:	e016      	b.n	8004878 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4619      	mov	r1, r3
 8004850:	2001      	movs	r0, #1
 8004852:	f000 fbbb 	bl	8004fcc <xQueueCreateMutexStatic>
 8004856:	6278      	str	r0, [r7, #36]	; 0x24
 8004858:	e00e      	b.n	8004878 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004866:	2004      	movs	r0, #4
 8004868:	f000 fb98 	bl	8004f9c <xQueueCreateMutex>
 800486c:	6278      	str	r0, [r7, #36]	; 0x24
 800486e:	e003      	b.n	8004878 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004870:	2001      	movs	r0, #1
 8004872:	f000 fb93 	bl	8004f9c <xQueueCreateMutex>
 8004876:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00c      	beq.n	8004898 <osMutexNew+0x110>
        if (attr != NULL) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <osMutexNew+0x104>
          name = attr->name;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e001      	b.n	8004890 <osMutexNew+0x108>
        } else {
          name = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004890:	6979      	ldr	r1, [r7, #20]
 8004892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004894:	f001 fe18 	bl	80064c8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d006      	beq.n	80048ac <osMutexNew+0x124>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3728      	adds	r7, #40	; 0x28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	200000dc 	.word	0x200000dc

080048bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08c      	sub	sp, #48	; 0x30
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048cc:	f3ef 8305 	mrs	r3, IPSR
 80048d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80048d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d170      	bne.n	80049ba <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d8:	f3ef 8310 	mrs	r3, PRIMASK
 80048dc:	617b      	str	r3, [r7, #20]
  return(result);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d105      	bne.n	80048f0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048e4:	f3ef 8311 	mrs	r3, BASEPRI
 80048e8:	613b      	str	r3, [r7, #16]
  return(result);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <osMessageQueueNew+0x3c>
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <osMessageQueueNew+0x108>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d060      	beq.n	80049ba <osMessageQueueNew+0xfe>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d05d      	beq.n	80049ba <osMessageQueueNew+0xfe>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05a      	beq.n	80049ba <osMessageQueueNew+0xfe>
    mem = -1;
 8004904:	f04f 33ff 	mov.w	r3, #4294967295
 8004908:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d029      	beq.n	8004964 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d012      	beq.n	800493e <osMessageQueueNew+0x82>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b4f      	cmp	r3, #79	; 0x4f
 800491e:	d90e      	bls.n	800493e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695a      	ldr	r2, [r3, #20]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	429a      	cmp	r2, r3
 8004936:	d302      	bcc.n	800493e <osMessageQueueNew+0x82>
        mem = 1;
 8004938:	2301      	movs	r3, #1
 800493a:	623b      	str	r3, [r7, #32]
 800493c:	e014      	b.n	8004968 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d110      	bne.n	8004968 <osMessageQueueNew+0xac>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10c      	bne.n	8004968 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004952:	2b00      	cmp	r3, #0
 8004954:	d108      	bne.n	8004968 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d104      	bne.n	8004968 <osMessageQueueNew+0xac>
          mem = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	623b      	str	r3, [r7, #32]
 8004962:	e001      	b.n	8004968 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d10c      	bne.n	8004988 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6899      	ldr	r1, [r3, #8]
 8004976:	2300      	movs	r3, #0
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	460b      	mov	r3, r1
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f972 	bl	8004c68 <xQueueGenericCreateStatic>
 8004984:	6278      	str	r0, [r7, #36]	; 0x24
 8004986:	e008      	b.n	800499a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d105      	bne.n	800499a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800498e:	2200      	movs	r2, #0
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f9f8 	bl	8004d88 <xQueueGenericCreate>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00c      	beq.n	80049ba <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <osMessageQueueNew+0xf2>
        name = attr->name;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	e001      	b.n	80049b2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80049b2:	69f9      	ldr	r1, [r7, #28]
 80049b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049b6:	f001 fd87 	bl	80064c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3728      	adds	r7, #40	; 0x28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	200000dc 	.word	0x200000dc

080049c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a07      	ldr	r2, [pc, #28]	; (80049f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80049d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4a06      	ldr	r2, [pc, #24]	; (80049f8 <vApplicationGetIdleTaskMemory+0x30>)
 80049de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2280      	movs	r2, #128	; 0x80
 80049e4:	601a      	str	r2, [r3, #0]
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	200000e0 	.word	0x200000e0
 80049f8:	2000013c 	.word	0x2000013c

080049fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4a06      	ldr	r2, [pc, #24]	; (8004a2c <vApplicationGetTimerTaskMemory+0x30>)
 8004a12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a1a:	601a      	str	r2, [r3, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	2000033c 	.word	0x2000033c
 8004a2c:	20000398 	.word	0x20000398

08004a30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f103 0208 	add.w	r2, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f04f 32ff 	mov.w	r2, #4294967295
 8004a48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f103 0208 	add.w	r2, r3, #8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f103 0208 	add.w	r2, r3, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	601a      	str	r2, [r3, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d103      	bne.n	8004af2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e00c      	b.n	8004b0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3308      	adds	r3, #8
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e002      	b.n	8004b00 <vListInsert+0x2e>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d2f6      	bcs.n	8004afa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	601a      	str	r2, [r3, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6892      	ldr	r2, [r2, #8]
 8004b5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6852      	ldr	r2, [r2, #4]
 8004b64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d103      	bne.n	8004b78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1e5a      	subs	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	e7fe      	b.n	8004bbe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004bc0:	f003 fbcc 	bl	800835c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	68f9      	ldr	r1, [r7, #12]
 8004bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	441a      	add	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	441a      	add	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	22ff      	movs	r2, #255	; 0xff
 8004c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	22ff      	movs	r2, #255	; 0xff
 8004c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d114      	bne.n	8004c40 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01a      	beq.n	8004c54 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3310      	adds	r3, #16
 8004c22:	4618      	mov	r0, r3
 8004c24:	f002 fa74 	bl	8007110 <xTaskRemoveFromEventList>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d012      	beq.n	8004c54 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <xQueueGenericReset+0xcc>)
 8004c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	e009      	b.n	8004c54 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3310      	adds	r3, #16
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fef3 	bl	8004a30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3324      	adds	r3, #36	; 0x24
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff feee 	bl	8004a30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c54:	f003 fbb0 	bl	80083b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c58:	2301      	movs	r3, #1
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	e000ed04 	.word	0xe000ed04

08004c68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08e      	sub	sp, #56	; 0x38
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <xQueueGenericCreateStatic+0x28>
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8e:	e7fe      	b.n	8004c8e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <xQueueGenericCreateStatic+0x42>
 8004c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca8:	e7fe      	b.n	8004ca8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <xQueueGenericCreateStatic+0x4e>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <xQueueGenericCreateStatic+0x52>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <xQueueGenericCreateStatic+0x54>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <xQueueGenericCreateStatic+0x6c>
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	e7fe      	b.n	8004cd2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <xQueueGenericCreateStatic+0x78>
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <xQueueGenericCreateStatic+0x7c>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <xQueueGenericCreateStatic+0x7e>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <xQueueGenericCreateStatic+0x96>
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	e7fe      	b.n	8004cfc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cfe:	2350      	movs	r3, #80	; 0x50
 8004d00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b50      	cmp	r3, #80	; 0x50
 8004d06:	d009      	beq.n	8004d1c <xQueueGenericCreateStatic+0xb4>
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e7fe      	b.n	8004d1a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00e      	beq.n	8004d46 <xQueueGenericCreateStatic+0xde>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d30:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f87e 	bl	8004e40 <prvInitialiseNewQueue>
 8004d44:	e017      	b.n	8004d76 <xQueueGenericCreateStatic+0x10e>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8004d46:	f7fc f9f8 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fc f973 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461a      	mov	r2, r3
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <xQueueGenericCreateStatic+0x118>)
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <xQueueGenericCreateStatic+0x10e>
 8004d62:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004d66:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <xQueueGenericCreateStatic+0x11c>)
 8004d68:	5cd3      	ldrb	r3, [r2, r3]
 8004d6a:	3340      	adds	r3, #64	; 0x40
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fc ffa3 	bl	8001cbc <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3730      	adds	r7, #48	; 0x30
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20004aa8 	.word	0x20004aa8
 8004d84:	20000004 	.word	0x20000004

08004d88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <xQueueGenericCreate+0x28>
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	e7fe      	b.n	8004dae <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	e004      	b.n	8004dc6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	fb02 f303 	mul.w	r3, r2, r3
 8004dc4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3350      	adds	r3, #80	; 0x50
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f003 fbe0 	bl	8008590 <pvPortMalloc>
 8004dd0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d012      	beq.n	8004dfe <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	3350      	adds	r3, #80	; 0x50
 8004de0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dea:	79fa      	ldrb	r2, [r7, #7]
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f822 	bl	8004e40 <prvInitialiseNewQueue>
 8004dfc:	e016      	b.n	8004e2c <xQueueGenericCreate+0xa4>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8004dfe:	f7fc f99c 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fc f917 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <xQueueGenericCreate+0xb0>)
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	4013      	ands	r3, r2
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <xQueueGenericCreate+0xa4>
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	4a07      	ldr	r2, [pc, #28]	; (8004e3c <xQueueGenericCreate+0xb4>)
 8004e1e:	5cd3      	ldrb	r3, [r2, r3]
 8004e20:	3340      	adds	r3, #64	; 0x40
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fc ff48 	bl	8001cbc <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
	}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20004aa8 	.word	0x20004aa8
 8004e3c:	20000004 	.word	0x20000004

08004e40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d103      	bne.n	8004e5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	6a3a      	ldr	r2, [r7, #32]
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	e002      	b.n	8004e62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e6e:	2101      	movs	r1, #1
 8004e70:	6a38      	ldr	r0, [r7, #32]
 8004e72:	f7ff fe91 	bl	8004b98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8004e7e:	6a38      	ldr	r0, [r7, #32]
 8004e80:	f7fc f8c1 	bl	8001006 <prvTraceGetQueueType>
 8004e84:	4603      	mov	r3, r0
 8004e86:	461a      	mov	r2, r3
 8004e88:	4b34      	ldr	r3, [pc, #208]	; (8004f5c <prvInitialiseNewQueue+0x11c>)
 8004e8a:	5c9b      	ldrb	r3, [r3, r2]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fd f981 	bl	8002194 <prvTraceGetObjectHandle>
 8004e92:	4603      	mov	r3, r0
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	4619      	mov	r1, r3
 8004e98:	6a38      	ldr	r0, [r7, #32]
 8004e9a:	f7fc f922 	bl	80010e2 <prvTraceSetQueueNumberLow16>
 8004e9e:	4b30      	ldr	r3, [pc, #192]	; (8004f60 <prvInitialiseNewQueue+0x120>)
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6a38      	ldr	r0, [r7, #32]
 8004ea6:	f7fc f932 	bl	800110e <prvTraceSetQueueNumberHigh16>
 8004eaa:	6a38      	ldr	r0, [r7, #32]
 8004eac:	f7fc f8ab 	bl	8001006 <prvTraceGetQueueType>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b29      	ldr	r3, [pc, #164]	; (8004f5c <prvInitialiseNewQueue+0x11c>)
 8004eb6:	5c9c      	ldrb	r4, [r3, r2]
 8004eb8:	6a38      	ldr	r0, [r7, #32]
 8004eba:	f7fc f8f7 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f7fd fa11 	bl	80022ec <prvMarkObjectAsUsed>
 8004eca:	f7fc f936 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fc f8b1 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4b22      	ldr	r3, [pc, #136]	; (8004f64 <prvInitialiseNewQueue+0x124>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d025      	beq.n	8004f32 <prvInitialiseNewQueue+0xf2>
 8004ee6:	6a38      	ldr	r0, [r7, #32]
 8004ee8:	f7fc f8ed 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <prvInitialiseNewQueue+0x124>)
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01a      	beq.n	8004f32 <prvInitialiseNewQueue+0xf2>
 8004efc:	6a38      	ldr	r0, [r7, #32]
 8004efe:	f7fc f882 	bl	8001006 <prvTraceGetQueueType>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461a      	mov	r2, r3
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <prvInitialiseNewQueue+0x11c>)
 8004f08:	5c9b      	ldrb	r3, [r3, r2]
 8004f0a:	3318      	adds	r3, #24
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	461d      	mov	r5, r3
 8004f10:	6a38      	ldr	r0, [r7, #32]
 8004f12:	f7fc f878 	bl	8001006 <prvTraceGetQueueType>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <prvInitialiseNewQueue+0x11c>)
 8004f1c:	5c9c      	ldrb	r4, [r3, r2]
 8004f1e:	6a38      	ldr	r0, [r7, #32]
 8004f20:	f7fc f8c4 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8004f24:	4603      	mov	r3, r0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f7fc fd85 	bl	8001a3c <prvTraceStoreKernelCall>
 8004f32:	6a38      	ldr	r0, [r7, #32]
 8004f34:	f7fc f867 	bl	8001006 <prvTraceGetQueueType>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <prvInitialiseNewQueue+0x11c>)
 8004f3e:	5c9c      	ldrb	r4, [r3, r2]
 8004f40:	6a38      	ldr	r0, [r7, #32]
 8004f42:	f7fc f8b3 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8004f46:	4603      	mov	r3, r0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f7fd f802 	bl	8001f58 <prvTraceSetObjectState>
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f5c:	20000004 	.word	0x20000004
 8004f60:	200063b4 	.word	0x200063b4
 8004f64:	20004aa8 	.word	0x20004aa8

08004f68 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00e      	beq.n	8004f94 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f838 	bl	8005004 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6939      	ldr	r1, [r7, #16]
 8004fb4:	6978      	ldr	r0, [r7, #20]
 8004fb6:	f7ff fee7 	bl	8004d88 <xQueueGenericCreate>
 8004fba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7ff ffd3 	bl	8004f68 <prvInitialiseMutex>

		return xNewQueue;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
	}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	6039      	str	r1, [r7, #0]
 8004fd6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	6939      	ldr	r1, [r7, #16]
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	f7ff fe3c 	bl	8004c68 <xQueueGenericCreateStatic>
 8004ff0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff ffb8 	bl	8004f68 <prvInitialiseMutex>

		return xNewQueue;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
	}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005004:	b5b0      	push	{r4, r5, r7, lr}
 8005006:	b08e      	sub	sp, #56	; 0x38
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005012:	2300      	movs	r3, #0
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <xQueueGenericSend+0x30>
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
 8005032:	e7fe      	b.n	8005032 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <xQueueGenericSend+0x3e>
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <xQueueGenericSend+0x42>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <xQueueGenericSend+0x44>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d109      	bne.n	8005060 <xQueueGenericSend+0x5c>
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	e7fe      	b.n	800505e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d103      	bne.n	800506e <xQueueGenericSend+0x6a>
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <xQueueGenericSend+0x6e>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <xQueueGenericSend+0x70>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <xQueueGenericSend+0x88>
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	623b      	str	r3, [r7, #32]
 800508a:	e7fe      	b.n	800508a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800508c:	f002 fa48 	bl	8007520 <xTaskGetSchedulerState>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d102      	bne.n	800509c <xQueueGenericSend+0x98>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <xQueueGenericSend+0x9c>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <xQueueGenericSend+0x9e>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <xQueueGenericSend+0xb6>
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	e7fe      	b.n	80050b8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050ba:	f003 f94f 	bl	800835c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d303      	bcc.n	80050d2 <xQueueGenericSend+0xce>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	f040 8084 	bne.w	80051da <xQueueGenericSend+0x1d6>
			{
				traceQUEUE_SEND( pxQueue );
 80050d2:	f7fc f832 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fb ffad 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80050de:	4603      	mov	r3, r0
 80050e0:	461a      	mov	r2, r3
 80050e2:	4ba6      	ldr	r3, [pc, #664]	; (800537c <xQueueGenericSend+0x378>)
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	4013      	ands	r3, r2
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d02a      	beq.n	8005144 <xQueueGenericSend+0x140>
 80050ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050f0:	f7fb ffe9 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80050f4:	4603      	mov	r3, r0
 80050f6:	461a      	mov	r2, r3
 80050f8:	4ba0      	ldr	r3, [pc, #640]	; (800537c <xQueueGenericSend+0x378>)
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	4013      	ands	r3, r2
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01f      	beq.n	8005144 <xQueueGenericSend+0x140>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <xQueueGenericSend+0x11c>
 800510a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800510c:	f7fb ff7b 	bl	8001006 <prvTraceGetQueueType>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	4b9a      	ldr	r3, [pc, #616]	; (8005380 <xQueueGenericSend+0x37c>)
 8005116:	5c9b      	ldrb	r3, [r3, r2]
 8005118:	3320      	adds	r3, #32
 800511a:	b2db      	uxtb	r3, r3
 800511c:	461d      	mov	r5, r3
 800511e:	e000      	b.n	8005122 <xQueueGenericSend+0x11e>
 8005120:	2525      	movs	r5, #37	; 0x25
 8005122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005124:	f7fb ff6f 	bl	8001006 <prvTraceGetQueueType>
 8005128:	4603      	mov	r3, r0
 800512a:	461a      	mov	r2, r3
 800512c:	4b94      	ldr	r3, [pc, #592]	; (8005380 <xQueueGenericSend+0x37c>)
 800512e:	5c9c      	ldrb	r4, [r3, r2]
 8005130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005132:	f7fb ffbb 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005136:	4603      	mov	r3, r0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	461a      	mov	r2, r3
 800513c:	4621      	mov	r1, r4
 800513e:	4628      	mov	r0, r5
 8005140:	f7fc fc7c 	bl	8001a3c <prvTraceStoreKernelCall>
 8005144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005146:	f7fb ff5e 	bl	8001006 <prvTraceGetQueueType>
 800514a:	4603      	mov	r3, r0
 800514c:	461a      	mov	r2, r3
 800514e:	4b8c      	ldr	r3, [pc, #560]	; (8005380 <xQueueGenericSend+0x37c>)
 8005150:	5c9c      	ldrb	r4, [r3, r2]
 8005152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005154:	f7fb ffaa 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005158:	4603      	mov	r3, r0
 800515a:	b2dd      	uxtb	r5, r3
 800515c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800515e:	f7fb ff52 	bl	8001006 <prvTraceGetQueueType>
 8005162:	4603      	mov	r3, r0
 8005164:	461a      	mov	r2, r3
 8005166:	4b86      	ldr	r3, [pc, #536]	; (8005380 <xQueueGenericSend+0x37c>)
 8005168:	5c9b      	ldrb	r3, [r3, r2]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d005      	beq.n	800517a <xQueueGenericSend+0x176>
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	b2db      	uxtb	r3, r3
 8005174:	3301      	adds	r3, #1
 8005176:	b2db      	uxtb	r3, r3
 8005178:	e000      	b.n	800517c <xQueueGenericSend+0x178>
 800517a:	2300      	movs	r3, #0
 800517c:	461a      	mov	r2, r3
 800517e:	4629      	mov	r1, r5
 8005180:	4620      	mov	r0, r4
 8005182:	f7fc fee9 	bl	8001f58 <prvTraceSetObjectState>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800518c:	f001 f88b 	bl	80062a6 <prvCopyDataToQueue>
 8005190:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d010      	beq.n	80051bc <xQueueGenericSend+0x1b8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	3324      	adds	r3, #36	; 0x24
 800519e:	4618      	mov	r0, r3
 80051a0:	f001 ffb6 	bl	8007110 <xTaskRemoveFromEventList>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d013      	beq.n	80051d2 <xQueueGenericSend+0x1ce>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051aa:	4b76      	ldr	r3, [pc, #472]	; (8005384 <xQueueGenericSend+0x380>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	e00a      	b.n	80051d2 <xQueueGenericSend+0x1ce>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <xQueueGenericSend+0x1ce>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051c2:	4b70      	ldr	r3, [pc, #448]	; (8005384 <xQueueGenericSend+0x380>)
 80051c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051d2:	f003 f8f1 	bl	80083b8 <vPortExitCritical>
				return pdPASS;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e115      	b.n	8005406 <xQueueGenericSend+0x402>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d13c      	bne.n	800525a <xQueueGenericSend+0x256>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051e0:	f003 f8ea 	bl	80083b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80051e4:	f7fb ffa9 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fb ff24 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80051f0:	4603      	mov	r3, r0
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b61      	ldr	r3, [pc, #388]	; (800537c <xQueueGenericSend+0x378>)
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	4013      	ands	r3, r2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d02a      	beq.n	8005256 <xQueueGenericSend+0x252>
 8005200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005202:	f7fb ff60 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 8005206:	4603      	mov	r3, r0
 8005208:	461a      	mov	r2, r3
 800520a:	4b5c      	ldr	r3, [pc, #368]	; (800537c <xQueueGenericSend+0x378>)
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	4013      	ands	r3, r2
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01f      	beq.n	8005256 <xQueueGenericSend+0x252>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <xQueueGenericSend+0x22e>
 800521c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521e:	f7fb fef2 	bl	8001006 <prvTraceGetQueueType>
 8005222:	4603      	mov	r3, r0
 8005224:	461a      	mov	r2, r3
 8005226:	4b56      	ldr	r3, [pc, #344]	; (8005380 <xQueueGenericSend+0x37c>)
 8005228:	5c9b      	ldrb	r3, [r3, r2]
 800522a:	3348      	adds	r3, #72	; 0x48
 800522c:	b2db      	uxtb	r3, r3
 800522e:	461d      	mov	r5, r3
 8005230:	e000      	b.n	8005234 <xQueueGenericSend+0x230>
 8005232:	254d      	movs	r5, #77	; 0x4d
 8005234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005236:	f7fb fee6 	bl	8001006 <prvTraceGetQueueType>
 800523a:	4603      	mov	r3, r0
 800523c:	461a      	mov	r2, r3
 800523e:	4b50      	ldr	r3, [pc, #320]	; (8005380 <xQueueGenericSend+0x37c>)
 8005240:	5c9c      	ldrb	r4, [r3, r2]
 8005242:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005244:	f7fb ff32 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005248:	4603      	mov	r3, r0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	4621      	mov	r1, r4
 8005250:	4628      	mov	r0, r5
 8005252:	f7fc fbf3 	bl	8001a3c <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 8005256:	2300      	movs	r3, #0
 8005258:	e0d5      	b.n	8005406 <xQueueGenericSend+0x402>
				}
				else if( xEntryTimeSet == pdFALSE )
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <xQueueGenericSend+0x26a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	4618      	mov	r0, r3
 8005266:	f001 ffcb 	bl	8007200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800526a:	2301      	movs	r3, #1
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800526e:	f003 f8a3 	bl	80083b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005272:	f001 fc8b 	bl	8006b8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005276:	f003 f871 	bl	800835c <vPortEnterCritical>
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005280:	b25b      	sxtb	r3, r3
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d103      	bne.n	8005290 <xQueueGenericSend+0x28c>
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005296:	b25b      	sxtb	r3, r3
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529c:	d103      	bne.n	80052a6 <xQueueGenericSend+0x2a2>
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a6:	f003 f887 	bl	80083b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052aa:	1d3a      	adds	r2, r7, #4
 80052ac:	f107 0314 	add.w	r3, r7, #20
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 ffba 	bl	800722c <xTaskCheckForTimeOut>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d164      	bne.n	8005388 <xQueueGenericSend+0x384>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052c0:	f001 f8e9 	bl	8006496 <prvIsQueueFull>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d051      	beq.n	800536e <xQueueGenericSend+0x36a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80052ca:	f7fb ff36 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb feb1 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	4b28      	ldr	r3, [pc, #160]	; (800537c <xQueueGenericSend+0x378>)
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	4013      	ands	r3, r2
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02a      	beq.n	800533c <xQueueGenericSend+0x338>
 80052e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052e8:	f7fb feed 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80052ec:	4603      	mov	r3, r0
 80052ee:	461a      	mov	r2, r3
 80052f0:	4b22      	ldr	r3, [pc, #136]	; (800537c <xQueueGenericSend+0x378>)
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	4013      	ands	r3, r2
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01f      	beq.n	800533c <xQueueGenericSend+0x338>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <xQueueGenericSend+0x314>
 8005302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005304:	f7fb fe7f 	bl	8001006 <prvTraceGetQueueType>
 8005308:	4603      	mov	r3, r0
 800530a:	461a      	mov	r2, r3
 800530c:	4b1c      	ldr	r3, [pc, #112]	; (8005380 <xQueueGenericSend+0x37c>)
 800530e:	5c9b      	ldrb	r3, [r3, r2]
 8005310:	3370      	adds	r3, #112	; 0x70
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461d      	mov	r5, r3
 8005316:	e000      	b.n	800531a <xQueueGenericSend+0x316>
 8005318:	2575      	movs	r5, #117	; 0x75
 800531a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800531c:	f7fb fe73 	bl	8001006 <prvTraceGetQueueType>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	4b16      	ldr	r3, [pc, #88]	; (8005380 <xQueueGenericSend+0x37c>)
 8005326:	5c9c      	ldrb	r4, [r3, r2]
 8005328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800532a:	f7fb febf 	bl	80010ac <prvTraceGetQueueNumberLow16>
 800532e:	4603      	mov	r3, r0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	4621      	mov	r1, r4
 8005336:	4628      	mov	r0, r5
 8005338:	f7fc fb80 	bl	8001a3c <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	3310      	adds	r3, #16
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f001 fe59 	bl	8006ffc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800534a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800534c:	f001 f83b 	bl	80063c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005350:	f001 fc2a 	bl	8006ba8 <xTaskResumeAll>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	f47f aeaf 	bne.w	80050ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <xQueueGenericSend+0x380>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	e6a5      	b.n	80050ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800536e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005370:	f001 f829 	bl	80063c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005374:	f001 fc18 	bl	8006ba8 <xTaskResumeAll>
 8005378:	e69f      	b.n	80050ba <xQueueGenericSend+0xb6>
 800537a:	bf00      	nop
 800537c:	20004aa8 	.word	0x20004aa8
 8005380:	20000004 	.word	0x20000004
 8005384:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800538a:	f001 f81c 	bl	80063c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800538e:	f001 fc0b 	bl	8006ba8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8005392:	f7fb fed2 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005396:	4603      	mov	r3, r0
 8005398:	4618      	mov	r0, r3
 800539a:	f7fb fe4d 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 800539e:	4603      	mov	r3, r0
 80053a0:	461a      	mov	r2, r3
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <xQueueGenericSend+0x40c>)
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	4013      	ands	r3, r2
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d02a      	beq.n	8005404 <xQueueGenericSend+0x400>
 80053ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053b0:	f7fb fe89 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80053b4:	4603      	mov	r3, r0
 80053b6:	461a      	mov	r2, r3
 80053b8:	4b15      	ldr	r3, [pc, #84]	; (8005410 <xQueueGenericSend+0x40c>)
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	4013      	ands	r3, r2
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01f      	beq.n	8005404 <xQueueGenericSend+0x400>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <xQueueGenericSend+0x3dc>
 80053ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053cc:	f7fb fe1b 	bl	8001006 <prvTraceGetQueueType>
 80053d0:	4603      	mov	r3, r0
 80053d2:	461a      	mov	r2, r3
 80053d4:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <xQueueGenericSend+0x410>)
 80053d6:	5c9b      	ldrb	r3, [r3, r2]
 80053d8:	3348      	adds	r3, #72	; 0x48
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	461d      	mov	r5, r3
 80053de:	e000      	b.n	80053e2 <xQueueGenericSend+0x3de>
 80053e0:	254d      	movs	r5, #77	; 0x4d
 80053e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053e4:	f7fb fe0f 	bl	8001006 <prvTraceGetQueueType>
 80053e8:	4603      	mov	r3, r0
 80053ea:	461a      	mov	r2, r3
 80053ec:	4b09      	ldr	r3, [pc, #36]	; (8005414 <xQueueGenericSend+0x410>)
 80053ee:	5c9c      	ldrb	r4, [r3, r2]
 80053f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053f2:	f7fb fe5b 	bl	80010ac <prvTraceGetQueueNumberLow16>
 80053f6:	4603      	mov	r3, r0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	4621      	mov	r1, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f7fc fb1c 	bl	8001a3c <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 8005404:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005406:	4618      	mov	r0, r3
 8005408:	3738      	adds	r7, #56	; 0x38
 800540a:	46bd      	mov	sp, r7
 800540c:	bdb0      	pop	{r4, r5, r7, pc}
 800540e:	bf00      	nop
 8005410:	20004aa8 	.word	0x20004aa8
 8005414:	20000004 	.word	0x20000004

08005418 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005418:	b5b0      	push	{r4, r5, r7, lr}
 800541a:	b08e      	sub	sp, #56	; 0x38
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <xQueueGenericSendFromISR+0x2c>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
 8005442:	e7fe      	b.n	8005442 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d103      	bne.n	8005452 <xQueueGenericSendFromISR+0x3a>
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <xQueueGenericSendFromISR+0x3e>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <xQueueGenericSendFromISR+0x40>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <xQueueGenericSendFromISR+0x58>
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	e7fe      	b.n	800546e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d103      	bne.n	800547e <xQueueGenericSendFromISR+0x66>
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <xQueueGenericSendFromISR+0x6a>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <xQueueGenericSendFromISR+0x6c>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <xQueueGenericSendFromISR+0x84>
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e7fe      	b.n	800549a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800549c:	f003 f83a 	bl	8008514 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054a0:	f3ef 8211 	mrs	r2, BASEPRI
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	61ba      	str	r2, [r7, #24]
 80054b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <xQueueGenericSendFromISR+0xb6>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d16c      	bne.n	80055a8 <xQueueGenericSendFromISR+0x190>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80054d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054da:	f7fb fdf4 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
 80054e2:	4b4d      	ldr	r3, [pc, #308]	; (8005618 <xQueueGenericSendFromISR+0x200>)
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	4013      	ands	r3, r2
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d01f      	beq.n	800552e <xQueueGenericSendFromISR+0x116>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <xQueueGenericSendFromISR+0xf2>
 80054f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054f6:	f7fb fd86 	bl	8001006 <prvTraceGetQueueType>
 80054fa:	4603      	mov	r3, r0
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b47      	ldr	r3, [pc, #284]	; (800561c <xQueueGenericSendFromISR+0x204>)
 8005500:	5c9b      	ldrb	r3, [r3, r2]
 8005502:	3330      	adds	r3, #48	; 0x30
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461d      	mov	r5, r3
 8005508:	e000      	b.n	800550c <xQueueGenericSendFromISR+0xf4>
 800550a:	2535      	movs	r5, #53	; 0x35
 800550c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550e:	f7fb fd7a 	bl	8001006 <prvTraceGetQueueType>
 8005512:	4603      	mov	r3, r0
 8005514:	461a      	mov	r2, r3
 8005516:	4b41      	ldr	r3, [pc, #260]	; (800561c <xQueueGenericSendFromISR+0x204>)
 8005518:	5c9c      	ldrb	r4, [r3, r2]
 800551a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551c:	f7fb fdc6 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005520:	4603      	mov	r3, r0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	4621      	mov	r1, r4
 8005528:	4628      	mov	r0, r5
 800552a:	f7fc fa87 	bl	8001a3c <prvTraceStoreKernelCall>
 800552e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005530:	f7fb fd69 	bl	8001006 <prvTraceGetQueueType>
 8005534:	4603      	mov	r3, r0
 8005536:	461a      	mov	r2, r3
 8005538:	4b38      	ldr	r3, [pc, #224]	; (800561c <xQueueGenericSendFromISR+0x204>)
 800553a:	5c9c      	ldrb	r4, [r3, r2]
 800553c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800553e:	f7fb fdb5 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005542:	4603      	mov	r3, r0
 8005544:	b2d9      	uxtb	r1, r3
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	b2db      	uxtb	r3, r3
 800554c:	3301      	adds	r3, #1
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	4620      	mov	r0, r4
 8005554:	f7fc fd00 	bl	8001f58 <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800555e:	f000 fea2 	bl	80062a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005562:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d112      	bne.n	8005592 <xQueueGenericSendFromISR+0x17a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d016      	beq.n	80055a2 <xQueueGenericSendFromISR+0x18a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	3324      	adds	r3, #36	; 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f001 fdc9 	bl	8007110 <xTaskRemoveFromEventList>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00e      	beq.n	80055a2 <xQueueGenericSendFromISR+0x18a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <xQueueGenericSendFromISR+0x18a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e007      	b.n	80055a2 <xQueueGenericSendFromISR+0x18a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005592:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005596:	3301      	adds	r3, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	b25a      	sxtb	r2, r3
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055a2:	2301      	movs	r3, #1
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80055a6:	e02c      	b.n	8005602 <xQueueGenericSendFromISR+0x1ea>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80055a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055aa:	f7fb fd8c 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461a      	mov	r2, r3
 80055b2:	4b19      	ldr	r3, [pc, #100]	; (8005618 <xQueueGenericSendFromISR+0x200>)
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	4013      	ands	r3, r2
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01f      	beq.n	80055fe <xQueueGenericSendFromISR+0x1e6>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <xQueueGenericSendFromISR+0x1c2>
 80055c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055c6:	f7fb fd1e 	bl	8001006 <prvTraceGetQueueType>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <xQueueGenericSendFromISR+0x204>)
 80055d0:	5c9b      	ldrb	r3, [r3, r2]
 80055d2:	3358      	adds	r3, #88	; 0x58
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461d      	mov	r5, r3
 80055d8:	e000      	b.n	80055dc <xQueueGenericSendFromISR+0x1c4>
 80055da:	255d      	movs	r5, #93	; 0x5d
 80055dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055de:	f7fb fd12 	bl	8001006 <prvTraceGetQueueType>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <xQueueGenericSendFromISR+0x204>)
 80055e8:	5c9c      	ldrb	r4, [r3, r2]
 80055ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ec:	f7fb fd5e 	bl	80010ac <prvTraceGetQueueNumberLow16>
 80055f0:	4603      	mov	r3, r0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	4621      	mov	r1, r4
 80055f8:	4628      	mov	r0, r5
 80055fa:	f7fc fa1f 	bl	8001a3c <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	637b      	str	r3, [r7, #52]	; 0x34
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800560e:	4618      	mov	r0, r3
 8005610:	3738      	adds	r7, #56	; 0x38
 8005612:	46bd      	mov	sp, r7
 8005614:	bdb0      	pop	{r4, r5, r7, pc}
 8005616:	bf00      	nop
 8005618:	20004aa8 	.word	0x20004aa8
 800561c:	20000004 	.word	0x20000004

08005620 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005620:	b5b0      	push	{r4, r5, r7, lr}
 8005622:	b08c      	sub	sp, #48	; 0x30
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <xQueueReceive+0x2e>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	e7fe      	b.n	800564c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d103      	bne.n	800565c <xQueueReceive+0x3c>
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <xQueueReceive+0x40>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <xQueueReceive+0x42>
 8005660:	2300      	movs	r3, #0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <xQueueReceive+0x5a>
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	e7fe      	b.n	8005678 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800567a:	f001 ff51 	bl	8007520 <xTaskGetSchedulerState>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <xQueueReceive+0x6a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <xQueueReceive+0x6e>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <xQueueReceive+0x70>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d109      	bne.n	80056a8 <xQueueReceive+0x88>
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	e7fe      	b.n	80056a6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056a8:	f002 fe58 	bl	800835c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d07b      	beq.n	80057b0 <xQueueReceive+0x190>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056bc:	f000 fe5d 	bl	800637a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80056c0:	f7fb fd3b 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80056c4:	4603      	mov	r3, r0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fb fcb6 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80056cc:	4603      	mov	r3, r0
 80056ce:	461a      	mov	r2, r3
 80056d0:	4bac      	ldr	r3, [pc, #688]	; (8005984 <xQueueReceive+0x364>)
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	4013      	ands	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d025      	beq.n	8005728 <xQueueReceive+0x108>
 80056dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056de:	f7fb fcf2 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80056e2:	4603      	mov	r3, r0
 80056e4:	461a      	mov	r2, r3
 80056e6:	4ba7      	ldr	r3, [pc, #668]	; (8005984 <xQueueReceive+0x364>)
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	4013      	ands	r3, r2
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01a      	beq.n	8005728 <xQueueReceive+0x108>
 80056f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056f4:	f7fb fc87 	bl	8001006 <prvTraceGetQueueType>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	4ba2      	ldr	r3, [pc, #648]	; (8005988 <xQueueReceive+0x368>)
 80056fe:	5c9b      	ldrb	r3, [r3, r2]
 8005700:	3328      	adds	r3, #40	; 0x28
 8005702:	b2db      	uxtb	r3, r3
 8005704:	461d      	mov	r5, r3
 8005706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005708:	f7fb fc7d 	bl	8001006 <prvTraceGetQueueType>
 800570c:	4603      	mov	r3, r0
 800570e:	461a      	mov	r2, r3
 8005710:	4b9d      	ldr	r3, [pc, #628]	; (8005988 <xQueueReceive+0x368>)
 8005712:	5c9c      	ldrb	r4, [r3, r2]
 8005714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005716:	f7fb fcc9 	bl	80010ac <prvTraceGetQueueNumberLow16>
 800571a:	4603      	mov	r3, r0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	4621      	mov	r1, r4
 8005722:	4628      	mov	r0, r5
 8005724:	f7fc f98a 	bl	8001a3c <prvTraceStoreKernelCall>
 8005728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800572a:	f7fb fc6c 	bl	8001006 <prvTraceGetQueueType>
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	4b95      	ldr	r3, [pc, #596]	; (8005988 <xQueueReceive+0x368>)
 8005734:	5c9c      	ldrb	r4, [r3, r2]
 8005736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005738:	f7fb fcb8 	bl	80010ac <prvTraceGetQueueNumberLow16>
 800573c:	4603      	mov	r3, r0
 800573e:	b2dd      	uxtb	r5, r3
 8005740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005742:	f7fb fc60 	bl	8001006 <prvTraceGetQueueType>
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	4b8f      	ldr	r3, [pc, #572]	; (8005988 <xQueueReceive+0x368>)
 800574c:	5c9b      	ldrb	r3, [r3, r2]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d108      	bne.n	8005764 <xQueueReceive+0x144>
 8005752:	f7fb fcf2 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005756:	4603      	mov	r3, r0
 8005758:	4618      	mov	r0, r3
 800575a:	f7fb fc60 	bl	800101e <prvTraceGetTaskNumberLow16>
 800575e:	4603      	mov	r3, r0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	e004      	b.n	800576e <xQueueReceive+0x14e>
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	b2db      	uxtb	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b2db      	uxtb	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	4629      	mov	r1, r5
 8005772:	4620      	mov	r0, r4
 8005774:	f7fc fbf0 	bl	8001f58 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	1e5a      	subs	r2, r3, #1
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00f      	beq.n	80057a8 <xQueueReceive+0x188>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	3310      	adds	r3, #16
 800578c:	4618      	mov	r0, r3
 800578e:	f001 fcbf 	bl	8007110 <xTaskRemoveFromEventList>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <xQueueReceive+0x188>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005798:	4b7c      	ldr	r3, [pc, #496]	; (800598c <xQueueReceive+0x36c>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057a8:	f002 fe06 	bl	80083b8 <vPortExitCritical>
				return pdPASS;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e130      	b.n	8005a12 <xQueueReceive+0x3f2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d137      	bne.n	8005826 <xQueueReceive+0x206>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057b6:	f002 fdff 	bl	80083b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80057ba:	f7fb fcbe 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80057be:	4603      	mov	r3, r0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fb fc39 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80057c6:	4603      	mov	r3, r0
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b6e      	ldr	r3, [pc, #440]	; (8005984 <xQueueReceive+0x364>)
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	4013      	ands	r3, r2
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d025      	beq.n	8005822 <xQueueReceive+0x202>
 80057d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d8:	f7fb fc75 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80057dc:	4603      	mov	r3, r0
 80057de:	461a      	mov	r2, r3
 80057e0:	4b68      	ldr	r3, [pc, #416]	; (8005984 <xQueueReceive+0x364>)
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	4013      	ands	r3, r2
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01a      	beq.n	8005822 <xQueueReceive+0x202>
 80057ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ee:	f7fb fc0a 	bl	8001006 <prvTraceGetQueueType>
 80057f2:	4603      	mov	r3, r0
 80057f4:	461a      	mov	r2, r3
 80057f6:	4b64      	ldr	r3, [pc, #400]	; (8005988 <xQueueReceive+0x368>)
 80057f8:	5c9b      	ldrb	r3, [r3, r2]
 80057fa:	3350      	adds	r3, #80	; 0x50
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	461d      	mov	r5, r3
 8005800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005802:	f7fb fc00 	bl	8001006 <prvTraceGetQueueType>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
 800580a:	4b5f      	ldr	r3, [pc, #380]	; (8005988 <xQueueReceive+0x368>)
 800580c:	5c9c      	ldrb	r4, [r3, r2]
 800580e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005810:	f7fb fc4c 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005814:	4603      	mov	r3, r0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	4621      	mov	r1, r4
 800581c:	4628      	mov	r0, r5
 800581e:	f7fc f90d 	bl	8001a3c <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8005822:	2300      	movs	r3, #0
 8005824:	e0f5      	b.n	8005a12 <xQueueReceive+0x3f2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d106      	bne.n	800583a <xQueueReceive+0x21a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800582c:	f107 0310 	add.w	r3, r7, #16
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fce5 	bl	8007200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005836:	2301      	movs	r3, #1
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800583a:	f002 fdbd 	bl	80083b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800583e:	f001 f9a5 	bl	8006b8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005842:	f002 fd8b 	bl	800835c <vPortEnterCritical>
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800584c:	b25b      	sxtb	r3, r3
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d103      	bne.n	800585c <xQueueReceive+0x23c>
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005862:	b25b      	sxtb	r3, r3
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d103      	bne.n	8005872 <xQueueReceive+0x252>
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005872:	f002 fda1 	bl	80083b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005876:	1d3a      	adds	r2, r7, #4
 8005878:	f107 0310 	add.w	r3, r7, #16
 800587c:	4611      	mov	r1, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fcd4 	bl	800722c <xTaskCheckForTimeOut>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	f040 8082 	bne.w	8005990 <xQueueReceive+0x370>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800588c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800588e:	f000 fdec 	bl	800646a <prvIsQueueEmpty>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d06e      	beq.n	8005976 <xQueueReceive+0x356>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8005898:	f7fb fc4f 	bl	800113a <prvTraceGetCurrentTaskHandle>
 800589c:	4603      	mov	r3, r0
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fb fbca 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	4b36      	ldr	r3, [pc, #216]	; (8005984 <xQueueReceive+0x364>)
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	4013      	ands	r3, r2
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d025      	beq.n	8005900 <xQueueReceive+0x2e0>
 80058b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058b6:	f7fb fc06 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	4b31      	ldr	r3, [pc, #196]	; (8005984 <xQueueReceive+0x364>)
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	4013      	ands	r3, r2
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d01a      	beq.n	8005900 <xQueueReceive+0x2e0>
 80058ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058cc:	f7fb fb9b 	bl	8001006 <prvTraceGetQueueType>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	4b2c      	ldr	r3, [pc, #176]	; (8005988 <xQueueReceive+0x368>)
 80058d6:	5c9b      	ldrb	r3, [r3, r2]
 80058d8:	3368      	adds	r3, #104	; 0x68
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	461d      	mov	r5, r3
 80058de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e0:	f7fb fb91 	bl	8001006 <prvTraceGetQueueType>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	4b27      	ldr	r3, [pc, #156]	; (8005988 <xQueueReceive+0x368>)
 80058ea:	5c9c      	ldrb	r4, [r3, r2]
 80058ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ee:	f7fb fbdd 	bl	80010ac <prvTraceGetQueueNumberLow16>
 80058f2:	4603      	mov	r3, r0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	4621      	mov	r1, r4
 80058fa:	4628      	mov	r0, r5
 80058fc:	f7fc f89e 	bl	8001a3c <prvTraceStoreKernelCall>
 8005900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005902:	f7fb fb80 	bl	8001006 <prvTraceGetQueueType>
 8005906:	4603      	mov	r3, r0
 8005908:	461a      	mov	r2, r3
 800590a:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <xQueueReceive+0x368>)
 800590c:	5c9b      	ldrb	r3, [r3, r2]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d018      	beq.n	8005944 <xQueueReceive+0x324>
 8005912:	f7fb fc12 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005916:	4603      	mov	r3, r0
 8005918:	4618      	mov	r0, r3
 800591a:	f7fb fb8d 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 800591e:	4603      	mov	r3, r0
 8005920:	461a      	mov	r2, r3
 8005922:	4b18      	ldr	r3, [pc, #96]	; (8005984 <xQueueReceive+0x364>)
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	4013      	ands	r3, r2
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <xQueueReceive+0x324>
 800592e:	f7fb fc04 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005932:	4603      	mov	r3, r0
 8005934:	4618      	mov	r0, r3
 8005936:	f7fb fb72 	bl	800101e <prvTraceGetTaskNumberLow16>
 800593a:	4603      	mov	r3, r0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	4618      	mov	r0, r3
 8005940:	f7fc fb82 	bl	8002048 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	3324      	adds	r3, #36	; 0x24
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f001 fb55 	bl	8006ffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005954:	f000 fd37 	bl	80063c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005958:	f001 f926 	bl	8006ba8 <xTaskResumeAll>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	f47f aea2 	bne.w	80056a8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005964:	4b09      	ldr	r3, [pc, #36]	; (800598c <xQueueReceive+0x36c>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	e698      	b.n	80056a8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005978:	f000 fd25 	bl	80063c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800597c:	f001 f914 	bl	8006ba8 <xTaskResumeAll>
 8005980:	e692      	b.n	80056a8 <xQueueReceive+0x88>
 8005982:	bf00      	nop
 8005984:	20004aa8 	.word	0x20004aa8
 8005988:	20000004 	.word	0x20000004
 800598c:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005992:	f000 fd18 	bl	80063c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005996:	f001 f907 	bl	8006ba8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800599a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599c:	f000 fd65 	bl	800646a <prvIsQueueEmpty>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f43f ae80 	beq.w	80056a8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80059a8:	f7fb fbc7 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80059ac:	4603      	mov	r3, r0
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fb fb42 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	4b18      	ldr	r3, [pc, #96]	; (8005a1c <xQueueReceive+0x3fc>)
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	4013      	ands	r3, r2
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d025      	beq.n	8005a10 <xQueueReceive+0x3f0>
 80059c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059c6:	f7fb fb7e 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80059ca:	4603      	mov	r3, r0
 80059cc:	461a      	mov	r2, r3
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <xQueueReceive+0x3fc>)
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	4013      	ands	r3, r2
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01a      	beq.n	8005a10 <xQueueReceive+0x3f0>
 80059da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059dc:	f7fb fb13 	bl	8001006 <prvTraceGetQueueType>
 80059e0:	4603      	mov	r3, r0
 80059e2:	461a      	mov	r2, r3
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <xQueueReceive+0x400>)
 80059e6:	5c9b      	ldrb	r3, [r3, r2]
 80059e8:	3350      	adds	r3, #80	; 0x50
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	461d      	mov	r5, r3
 80059ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059f0:	f7fb fb09 	bl	8001006 <prvTraceGetQueueType>
 80059f4:	4603      	mov	r3, r0
 80059f6:	461a      	mov	r2, r3
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <xQueueReceive+0x400>)
 80059fa:	5c9c      	ldrb	r4, [r3, r2]
 80059fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059fe:	f7fb fb55 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005a02:	4603      	mov	r3, r0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f7fc f816 	bl	8001a3c <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8005a10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3730      	adds	r7, #48	; 0x30
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bdb0      	pop	{r4, r5, r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20004aa8 	.word	0x20004aa8
 8005a20:	20000004 	.word	0x20000004

08005a24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a24:	b5b0      	push	{r4, r5, r7, lr}
 8005a26:	b08e      	sub	sp, #56	; 0x38
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <xQueueSemaphoreTake+0x30>
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	e7fe      	b.n	8005a52 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d009      	beq.n	8005a70 <xQueueSemaphoreTake+0x4c>
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	e7fe      	b.n	8005a6e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a70:	f001 fd56 	bl	8007520 <xTaskGetSchedulerState>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <xQueueSemaphoreTake+0x5c>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <xQueueSemaphoreTake+0x60>
 8005a80:	2301      	movs	r3, #1
 8005a82:	e000      	b.n	8005a86 <xQueueSemaphoreTake+0x62>
 8005a84:	2300      	movs	r3, #0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <xQueueSemaphoreTake+0x7a>
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	e7fe      	b.n	8005a9c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a9e:	f002 fc5d 	bl	800835c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8081 	beq.w	8005bb2 <xQueueSemaphoreTake+0x18e>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8005ab0:	f7fb fb43 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fb fabe 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4bbb      	ldr	r3, [pc, #748]	; (8005db0 <xQueueSemaphoreTake+0x38c>)
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d025      	beq.n	8005b18 <xQueueSemaphoreTake+0xf4>
 8005acc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ace:	f7fb fafa 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4bb6      	ldr	r3, [pc, #728]	; (8005db0 <xQueueSemaphoreTake+0x38c>)
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	4013      	ands	r3, r2
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d01a      	beq.n	8005b18 <xQueueSemaphoreTake+0xf4>
 8005ae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ae4:	f7fb fa8f 	bl	8001006 <prvTraceGetQueueType>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	461a      	mov	r2, r3
 8005aec:	4bb1      	ldr	r3, [pc, #708]	; (8005db4 <xQueueSemaphoreTake+0x390>)
 8005aee:	5c9b      	ldrb	r3, [r3, r2]
 8005af0:	3328      	adds	r3, #40	; 0x28
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461d      	mov	r5, r3
 8005af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005af8:	f7fb fa85 	bl	8001006 <prvTraceGetQueueType>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	4bac      	ldr	r3, [pc, #688]	; (8005db4 <xQueueSemaphoreTake+0x390>)
 8005b02:	5c9c      	ldrb	r4, [r3, r2]
 8005b04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b06:	f7fb fad1 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	4621      	mov	r1, r4
 8005b12:	4628      	mov	r0, r5
 8005b14:	f7fb ff92 	bl	8001a3c <prvTraceStoreKernelCall>
 8005b18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b1a:	f7fb fa74 	bl	8001006 <prvTraceGetQueueType>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	461a      	mov	r2, r3
 8005b22:	4ba4      	ldr	r3, [pc, #656]	; (8005db4 <xQueueSemaphoreTake+0x390>)
 8005b24:	5c9c      	ldrb	r4, [r3, r2]
 8005b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b28:	f7fb fac0 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	b2dd      	uxtb	r5, r3
 8005b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b32:	f7fb fa68 	bl	8001006 <prvTraceGetQueueType>
 8005b36:	4603      	mov	r3, r0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b9e      	ldr	r3, [pc, #632]	; (8005db4 <xQueueSemaphoreTake+0x390>)
 8005b3c:	5c9b      	ldrb	r3, [r3, r2]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d108      	bne.n	8005b54 <xQueueSemaphoreTake+0x130>
 8005b42:	f7fb fafa 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005b46:	4603      	mov	r3, r0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fb fa68 	bl	800101e <prvTraceGetTaskNumberLow16>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	e004      	b.n	8005b5e <xQueueSemaphoreTake+0x13a>
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4629      	mov	r1, r5
 8005b62:	4620      	mov	r0, r4
 8005b64:	f7fc f9f8 	bl	8001f58 <prvTraceSetObjectState>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	1e5a      	subs	r2, r3, #1
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d104      	bne.n	8005b82 <xQueueSemaphoreTake+0x15e>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b78:	f001 ff0e 	bl	8007998 <pvTaskIncrementMutexHeldCount>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00f      	beq.n	8005baa <xQueueSemaphoreTake+0x186>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	3310      	adds	r3, #16
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 fabe 	bl	8007110 <xTaskRemoveFromEventList>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <xQueueSemaphoreTake+0x186>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b9a:	4b87      	ldr	r3, [pc, #540]	; (8005db8 <xQueueSemaphoreTake+0x394>)
 8005b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005baa:	f002 fc05 	bl	80083b8 <vPortExitCritical>
				return pdPASS;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e15c      	b.n	8005e6c <xQueueSemaphoreTake+0x448>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d144      	bne.n	8005c42 <xQueueSemaphoreTake+0x21e>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <xQueueSemaphoreTake+0x1ae>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueSemaphoreTake+0x1ac>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005bd2:	f002 fbf1 	bl	80083b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005bd6:	f7fb fab0 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fb fa2b 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8005be2:	4603      	mov	r3, r0
 8005be4:	461a      	mov	r2, r3
 8005be6:	4b72      	ldr	r3, [pc, #456]	; (8005db0 <xQueueSemaphoreTake+0x38c>)
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	4013      	ands	r3, r2
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d025      	beq.n	8005c3e <xQueueSemaphoreTake+0x21a>
 8005bf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bf4:	f7fb fa67 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4b6c      	ldr	r3, [pc, #432]	; (8005db0 <xQueueSemaphoreTake+0x38c>)
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	4013      	ands	r3, r2
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01a      	beq.n	8005c3e <xQueueSemaphoreTake+0x21a>
 8005c08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c0a:	f7fb f9fc 	bl	8001006 <prvTraceGetQueueType>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	461a      	mov	r2, r3
 8005c12:	4b68      	ldr	r3, [pc, #416]	; (8005db4 <xQueueSemaphoreTake+0x390>)
 8005c14:	5c9b      	ldrb	r3, [r3, r2]
 8005c16:	3350      	adds	r3, #80	; 0x50
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	461d      	mov	r5, r3
 8005c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c1e:	f7fb f9f2 	bl	8001006 <prvTraceGetQueueType>
 8005c22:	4603      	mov	r3, r0
 8005c24:	461a      	mov	r2, r3
 8005c26:	4b63      	ldr	r3, [pc, #396]	; (8005db4 <xQueueSemaphoreTake+0x390>)
 8005c28:	5c9c      	ldrb	r4, [r3, r2]
 8005c2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c2c:	f7fb fa3e 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005c30:	4603      	mov	r3, r0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	4621      	mov	r1, r4
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f7fb feff 	bl	8001a3c <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e114      	b.n	8005e6c <xQueueSemaphoreTake+0x448>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <xQueueSemaphoreTake+0x232>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c48:	f107 030c 	add.w	r3, r7, #12
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 fad7 	bl	8007200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c52:	2301      	movs	r3, #1
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c56:	f002 fbaf 	bl	80083b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c5a:	f000 ff97 	bl	8006b8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c5e:	f002 fb7d 	bl	800835c <vPortEnterCritical>
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c68:	b25b      	sxtb	r3, r3
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d103      	bne.n	8005c78 <xQueueSemaphoreTake+0x254>
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c7e:	b25b      	sxtb	r3, r3
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d103      	bne.n	8005c8e <xQueueSemaphoreTake+0x26a>
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c8e:	f002 fb93 	bl	80083b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c92:	463a      	mov	r2, r7
 8005c94:	f107 030c 	add.w	r3, r7, #12
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 fac6 	bl	800722c <xTaskCheckForTimeOut>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f040 8090 	bne.w	8005dc8 <xQueueSemaphoreTake+0x3a4>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005caa:	f000 fbde 	bl	800646a <prvIsQueueEmpty>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8083 	beq.w	8005dbc <xQueueSemaphoreTake+0x398>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8005cb6:	f7fb fa40 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fb f9bb 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4b3a      	ldr	r3, [pc, #232]	; (8005db0 <xQueueSemaphoreTake+0x38c>)
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d025      	beq.n	8005d1e <xQueueSemaphoreTake+0x2fa>
 8005cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cd4:	f7fb f9f7 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4b34      	ldr	r3, [pc, #208]	; (8005db0 <xQueueSemaphoreTake+0x38c>)
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01a      	beq.n	8005d1e <xQueueSemaphoreTake+0x2fa>
 8005ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cea:	f7fb f98c 	bl	8001006 <prvTraceGetQueueType>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b30      	ldr	r3, [pc, #192]	; (8005db4 <xQueueSemaphoreTake+0x390>)
 8005cf4:	5c9b      	ldrb	r3, [r3, r2]
 8005cf6:	3368      	adds	r3, #104	; 0x68
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	461d      	mov	r5, r3
 8005cfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cfe:	f7fb f982 	bl	8001006 <prvTraceGetQueueType>
 8005d02:	4603      	mov	r3, r0
 8005d04:	461a      	mov	r2, r3
 8005d06:	4b2b      	ldr	r3, [pc, #172]	; (8005db4 <xQueueSemaphoreTake+0x390>)
 8005d08:	5c9c      	ldrb	r4, [r3, r2]
 8005d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d0c:	f7fb f9ce 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005d10:	4603      	mov	r3, r0
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	4621      	mov	r1, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f7fb fe8f 	bl	8001a3c <prvTraceStoreKernelCall>
 8005d1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d20:	f7fb f971 	bl	8001006 <prvTraceGetQueueType>
 8005d24:	4603      	mov	r3, r0
 8005d26:	461a      	mov	r2, r3
 8005d28:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <xQueueSemaphoreTake+0x390>)
 8005d2a:	5c9b      	ldrb	r3, [r3, r2]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d018      	beq.n	8005d62 <xQueueSemaphoreTake+0x33e>
 8005d30:	f7fb fa03 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005d34:	4603      	mov	r3, r0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fb f97e 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <xQueueSemaphoreTake+0x38c>)
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	4013      	ands	r3, r2
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <xQueueSemaphoreTake+0x33e>
 8005d4c:	f7fb f9f5 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fb f963 	bl	800101e <prvTraceGetTaskNumberLow16>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fc f973 	bl	8002048 <prvTraceSetTaskInstanceFinished>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <xQueueSemaphoreTake+0x35a>
					{
						taskENTER_CRITICAL();
 8005d6a:	f002 faf7 	bl	800835c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 fbf2 	bl	800755c <xTaskPriorityInherit>
 8005d78:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
 8005d7a:	f002 fb1d 	bl	80083b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	3324      	adds	r3, #36	; 0x24
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 f938 	bl	8006ffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d8e:	f000 fb1a 	bl	80063c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d92:	f000 ff09 	bl	8006ba8 <xTaskResumeAll>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f47f ae80 	bne.w	8005a9e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <xQueueSemaphoreTake+0x394>)
 8005da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	e676      	b.n	8005a9e <xQueueSemaphoreTake+0x7a>
 8005db0:	20004aa8 	.word	0x20004aa8
 8005db4:	20000004 	.word	0x20000004
 8005db8:	e000ed04 	.word	0xe000ed04
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dbe:	f000 fb02 	bl	80063c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dc2:	f000 fef1 	bl	8006ba8 <xTaskResumeAll>
 8005dc6:	e66a      	b.n	8005a9e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005dc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dca:	f000 fafc 	bl	80063c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dce:	f000 feeb 	bl	8006ba8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dd4:	f000 fb49 	bl	800646a <prvIsQueueEmpty>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f43f ae5f 	beq.w	8005a9e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00d      	beq.n	8005e02 <xQueueSemaphoreTake+0x3de>
					{
						taskENTER_CRITICAL();
 8005de6:	f002 fab9 	bl	800835c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dec:	f000 fa43 	bl	8006276 <prvGetDisinheritPriorityAfterTimeout>
 8005df0:	6338      	str	r0, [r7, #48]	; 0x30
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fd09 	bl	8007810 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005dfe:	f002 fadb 	bl	80083b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005e02:	f7fb f99a 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005e06:	4603      	mov	r3, r0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fb f915 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	461a      	mov	r2, r3
 8005e12:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <xQueueSemaphoreTake+0x450>)
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	4013      	ands	r3, r2
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d025      	beq.n	8005e6a <xQueueSemaphoreTake+0x446>
 8005e1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e20:	f7fb f951 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 8005e24:	4603      	mov	r3, r0
 8005e26:	461a      	mov	r2, r3
 8005e28:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <xQueueSemaphoreTake+0x450>)
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01a      	beq.n	8005e6a <xQueueSemaphoreTake+0x446>
 8005e34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e36:	f7fb f8e6 	bl	8001006 <prvTraceGetQueueType>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <xQueueSemaphoreTake+0x454>)
 8005e40:	5c9b      	ldrb	r3, [r3, r2]
 8005e42:	3350      	adds	r3, #80	; 0x50
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	461d      	mov	r5, r3
 8005e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e4a:	f7fb f8dc 	bl	8001006 <prvTraceGetQueueType>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	461a      	mov	r2, r3
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <xQueueSemaphoreTake+0x454>)
 8005e54:	5c9c      	ldrb	r4, [r3, r2]
 8005e56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e58:	f7fb f928 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	4621      	mov	r1, r4
 8005e64:	4628      	mov	r0, r5
 8005e66:	f7fb fde9 	bl	8001a3c <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8005e6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3738      	adds	r7, #56	; 0x38
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bdb0      	pop	{r4, r5, r7, pc}
 8005e74:	20004aa8 	.word	0x20004aa8
 8005e78:	20000004 	.word	0x20000004

08005e7c <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e7c:	b5b0      	push	{r4, r5, r7, lr}
 8005e7e:	b08e      	sub	sp, #56	; 0x38
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <xQueuePeek+0x2e>
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea8:	e7fe      	b.n	8005ea8 <xQueuePeek+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <xQueuePeek+0x3c>
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <xQueuePeek+0x40>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <xQueuePeek+0x42>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <xQueuePeek+0x5a>
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	623b      	str	r3, [r7, #32]
 8005ed4:	e7fe      	b.n	8005ed4 <xQueuePeek+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ed6:	f001 fb23 	bl	8007520 <xTaskGetSchedulerState>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <xQueuePeek+0x6a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <xQueuePeek+0x6e>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <xQueuePeek+0x70>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d109      	bne.n	8005f04 <xQueuePeek+0x88>
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	61fb      	str	r3, [r7, #28]
 8005f02:	e7fe      	b.n	8005f02 <xQueuePeek+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f04:	f002 fa2a 	bl	800835c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d055      	beq.n	8005fc0 <xQueuePeek+0x144>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f1e:	f000 fa2c 	bl	800637a <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 8005f22:	f7fb f90a 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005f26:	4603      	mov	r3, r0
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fb f885 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	461a      	mov	r2, r3
 8005f32:	4bba      	ldr	r3, [pc, #744]	; (800621c <xQueuePeek+0x3a0>)
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	4013      	ands	r3, r2
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d025      	beq.n	8005f8a <xQueuePeek+0x10e>
 8005f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f40:	f7fb f8c1 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 8005f44:	4603      	mov	r3, r0
 8005f46:	461a      	mov	r2, r3
 8005f48:	4bb4      	ldr	r3, [pc, #720]	; (800621c <xQueuePeek+0x3a0>)
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01a      	beq.n	8005f8a <xQueuePeek+0x10e>
 8005f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f56:	f7fb f856 	bl	8001006 <prvTraceGetQueueType>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4bb0      	ldr	r3, [pc, #704]	; (8006220 <xQueuePeek+0x3a4>)
 8005f60:	5c9b      	ldrb	r3, [r3, r2]
 8005f62:	3378      	adds	r3, #120	; 0x78
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	461d      	mov	r5, r3
 8005f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f6a:	f7fb f84c 	bl	8001006 <prvTraceGetQueueType>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	461a      	mov	r2, r3
 8005f72:	4bab      	ldr	r3, [pc, #684]	; (8006220 <xQueuePeek+0x3a4>)
 8005f74:	5c9c      	ldrb	r4, [r3, r2]
 8005f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f78:	f7fb f898 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	4621      	mov	r1, r4
 8005f84:	4628      	mov	r0, r5
 8005f86:	f7fb fd59 	bl	8001a3c <prvTraceStoreKernelCall>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f8e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00f      	beq.n	8005fb8 <xQueuePeek+0x13c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	3324      	adds	r3, #36	; 0x24
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f001 f8b7 	bl	8007110 <xTaskRemoveFromEventList>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <xQueuePeek+0x13c>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fa8:	4b9e      	ldr	r3, [pc, #632]	; (8006224 <xQueuePeek+0x3a8>)
 8005faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fb8:	f002 f9fe 	bl	80083b8 <vPortExitCritical>
				return pdPASS;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e128      	b.n	8006212 <xQueuePeek+0x396>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d137      	bne.n	8006036 <xQueuePeek+0x1ba>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fc6:	f002 f9f7 	bl	80083b8 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
 8005fca:	f7fb f8b6 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fb f831 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4b90      	ldr	r3, [pc, #576]	; (800621c <xQueuePeek+0x3a0>)
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d025      	beq.n	8006032 <xQueuePeek+0x1b6>
 8005fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fe8:	f7fb f86d 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4b8a      	ldr	r3, [pc, #552]	; (800621c <xQueuePeek+0x3a0>)
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01a      	beq.n	8006032 <xQueuePeek+0x1b6>
 8005ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ffe:	f7fb f802 	bl	8001006 <prvTraceGetQueueType>
 8006002:	4603      	mov	r3, r0
 8006004:	461a      	mov	r2, r3
 8006006:	4b86      	ldr	r3, [pc, #536]	; (8006220 <xQueuePeek+0x3a4>)
 8006008:	5c9b      	ldrb	r3, [r3, r2]
 800600a:	3b21      	subs	r3, #33	; 0x21
 800600c:	b2db      	uxtb	r3, r3
 800600e:	461d      	mov	r5, r3
 8006010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006012:	f7fa fff8 	bl	8001006 <prvTraceGetQueueType>
 8006016:	4603      	mov	r3, r0
 8006018:	461a      	mov	r2, r3
 800601a:	4b81      	ldr	r3, [pc, #516]	; (8006220 <xQueuePeek+0x3a4>)
 800601c:	5c9c      	ldrb	r4, [r3, r2]
 800601e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006020:	f7fb f844 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8006024:	4603      	mov	r3, r0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	4621      	mov	r1, r4
 800602c:	4628      	mov	r0, r5
 800602e:	f7fb fd05 	bl	8001a3c <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8006032:	2300      	movs	r3, #0
 8006034:	e0ed      	b.n	8006212 <xQueuePeek+0x396>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <xQueuePeek+0x1ce>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800603c:	f107 0314 	add.w	r3, r7, #20
 8006040:	4618      	mov	r0, r3
 8006042:	f001 f8dd 	bl	8007200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006046:	2301      	movs	r3, #1
 8006048:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800604a:	f002 f9b5 	bl	80083b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800604e:	f000 fd9d 	bl	8006b8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006052:	f002 f983 	bl	800835c <vPortEnterCritical>
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800605c:	b25b      	sxtb	r3, r3
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d103      	bne.n	800606c <xQueuePeek+0x1f0>
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006072:	b25b      	sxtb	r3, r3
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d103      	bne.n	8006082 <xQueuePeek+0x206>
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006082:	f002 f999 	bl	80083b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006086:	1d3a      	adds	r2, r7, #4
 8006088:	f107 0314 	add.w	r3, r7, #20
 800608c:	4611      	mov	r1, r2
 800608e:	4618      	mov	r0, r3
 8006090:	f001 f8cc 	bl	800722c <xTaskCheckForTimeOut>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d17a      	bne.n	8006190 <xQueuePeek+0x314>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800609a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800609c:	f000 f9e5 	bl	800646a <prvIsQueueEmpty>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d06e      	beq.n	8006184 <xQueuePeek+0x308>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
 80060a6:	f7fb f848 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80060aa:	4603      	mov	r3, r0
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fa ffc3 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80060b2:	4603      	mov	r3, r0
 80060b4:	461a      	mov	r2, r3
 80060b6:	4b59      	ldr	r3, [pc, #356]	; (800621c <xQueuePeek+0x3a0>)
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	4013      	ands	r3, r2
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d025      	beq.n	800610e <xQueuePeek+0x292>
 80060c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060c4:	f7fa ffff 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80060c8:	4603      	mov	r3, r0
 80060ca:	461a      	mov	r2, r3
 80060cc:	4b53      	ldr	r3, [pc, #332]	; (800621c <xQueuePeek+0x3a0>)
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	4013      	ands	r3, r2
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01a      	beq.n	800610e <xQueuePeek+0x292>
 80060d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060da:	f7fa ff94 	bl	8001006 <prvTraceGetQueueType>
 80060de:	4603      	mov	r3, r0
 80060e0:	461a      	mov	r2, r3
 80060e2:	4b4f      	ldr	r3, [pc, #316]	; (8006220 <xQueuePeek+0x3a4>)
 80060e4:	5c9b      	ldrb	r3, [r3, r2]
 80060e6:	3b24      	subs	r3, #36	; 0x24
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	461d      	mov	r5, r3
 80060ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ee:	f7fa ff8a 	bl	8001006 <prvTraceGetQueueType>
 80060f2:	4603      	mov	r3, r0
 80060f4:	461a      	mov	r2, r3
 80060f6:	4b4a      	ldr	r3, [pc, #296]	; (8006220 <xQueuePeek+0x3a4>)
 80060f8:	5c9c      	ldrb	r4, [r3, r2]
 80060fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060fc:	f7fa ffd6 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8006100:	4603      	mov	r3, r0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	4621      	mov	r1, r4
 8006108:	4628      	mov	r0, r5
 800610a:	f7fb fc97 	bl	8001a3c <prvTraceStoreKernelCall>
 800610e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006110:	f7fa ff79 	bl	8001006 <prvTraceGetQueueType>
 8006114:	4603      	mov	r3, r0
 8006116:	461a      	mov	r2, r3
 8006118:	4b41      	ldr	r3, [pc, #260]	; (8006220 <xQueuePeek+0x3a4>)
 800611a:	5c9b      	ldrb	r3, [r3, r2]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d018      	beq.n	8006152 <xQueuePeek+0x2d6>
 8006120:	f7fb f80b 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8006124:	4603      	mov	r3, r0
 8006126:	4618      	mov	r0, r3
 8006128:	f7fa ff86 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 800612c:	4603      	mov	r3, r0
 800612e:	461a      	mov	r2, r3
 8006130:	4b3a      	ldr	r3, [pc, #232]	; (800621c <xQueuePeek+0x3a0>)
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	4013      	ands	r3, r2
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <xQueuePeek+0x2d6>
 800613c:	f7fa fffd 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8006140:	4603      	mov	r3, r0
 8006142:	4618      	mov	r0, r3
 8006144:	f7fa ff6b 	bl	800101e <prvTraceGetTaskNumberLow16>
 8006148:	4603      	mov	r3, r0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	4618      	mov	r0, r3
 800614e:	f7fb ff7b 	bl	8002048 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	3324      	adds	r3, #36	; 0x24
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	4611      	mov	r1, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f000 ff4e 	bl	8006ffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006162:	f000 f930 	bl	80063c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006166:	f000 fd1f 	bl	8006ba8 <xTaskResumeAll>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	f47f aec9 	bne.w	8005f04 <xQueuePeek+0x88>
				{
					portYIELD_WITHIN_API();
 8006172:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <xQueuePeek+0x3a8>)
 8006174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	e6bf      	b.n	8005f04 <xQueuePeek+0x88>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8006184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006186:	f000 f91e 	bl	80063c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800618a:	f000 fd0d 	bl	8006ba8 <xTaskResumeAll>
 800618e:	e6b9      	b.n	8005f04 <xQueuePeek+0x88>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8006190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006192:	f000 f918 	bl	80063c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006196:	f000 fd07 	bl	8006ba8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800619a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800619c:	f000 f965 	bl	800646a <prvIsQueueEmpty>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f43f aeae 	beq.w	8005f04 <xQueuePeek+0x88>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
 80061a8:	f7fa ffc7 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80061ac:	4603      	mov	r3, r0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fa ff42 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80061b4:	4603      	mov	r3, r0
 80061b6:	461a      	mov	r2, r3
 80061b8:	4b18      	ldr	r3, [pc, #96]	; (800621c <xQueuePeek+0x3a0>)
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	4013      	ands	r3, r2
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d025      	beq.n	8006210 <xQueuePeek+0x394>
 80061c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061c6:	f7fa ff7e 	bl	80010c6 <prvTraceGetQueueNumberHigh16>
 80061ca:	4603      	mov	r3, r0
 80061cc:	461a      	mov	r2, r3
 80061ce:	4b13      	ldr	r3, [pc, #76]	; (800621c <xQueuePeek+0x3a0>)
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	4013      	ands	r3, r2
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01a      	beq.n	8006210 <xQueuePeek+0x394>
 80061da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061dc:	f7fa ff13 	bl	8001006 <prvTraceGetQueueType>
 80061e0:	4603      	mov	r3, r0
 80061e2:	461a      	mov	r2, r3
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <xQueuePeek+0x3a4>)
 80061e6:	5c9b      	ldrb	r3, [r3, r2]
 80061e8:	3b21      	subs	r3, #33	; 0x21
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461d      	mov	r5, r3
 80061ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061f0:	f7fa ff09 	bl	8001006 <prvTraceGetQueueType>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <xQueuePeek+0x3a4>)
 80061fa:	5c9c      	ldrb	r4, [r3, r2]
 80061fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061fe:	f7fa ff55 	bl	80010ac <prvTraceGetQueueNumberLow16>
 8006202:	4603      	mov	r3, r0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	4621      	mov	r1, r4
 800620a:	4628      	mov	r0, r5
 800620c:	f7fb fc16 	bl	8001a3c <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8006210:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006212:	4618      	mov	r0, r3
 8006214:	3738      	adds	r7, #56	; 0x38
 8006216:	46bd      	mov	sp, r7
 8006218:	bdb0      	pop	{r4, r5, r7, pc}
 800621a:	bf00      	nop
 800621c:	20004aa8 	.word	0x20004aa8
 8006220:	20000004 	.word	0x20000004
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006276:	b480      	push	{r7}
 8006278:	b085      	sub	sp, #20
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d006      	beq.n	8006294 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e001      	b.n	8006298 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006298:	68fb      	ldr	r3, [r7, #12]
	}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10d      	bne.n	80062e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d14d      	bne.n	8006368 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 f9ef 	bl	80076b4 <xTaskPriorityDisinherit>
 80062d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	609a      	str	r2, [r3, #8]
 80062de:	e043      	b.n	8006368 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d119      	bne.n	800631a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6858      	ldr	r0, [r3, #4]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	461a      	mov	r2, r3
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	f002 fb65 	bl	80089c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	441a      	add	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	429a      	cmp	r2, r3
 800630e:	d32b      	bcc.n	8006368 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	605a      	str	r2, [r3, #4]
 8006318:	e026      	b.n	8006368 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68d8      	ldr	r0, [r3, #12]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	461a      	mov	r2, r3
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	f002 fb4b 	bl	80089c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	425b      	negs	r3, r3
 8006334:	441a      	add	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d207      	bcs.n	8006356 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	425b      	negs	r3, r3
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d105      	bne.n	8006368 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	3b01      	subs	r3, #1
 8006366:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006370:	697b      	ldr	r3, [r7, #20]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b082      	sub	sp, #8
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d018      	beq.n	80063be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	441a      	add	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d303      	bcc.n	80063ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68d9      	ldr	r1, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	461a      	mov	r2, r3
 80063b8:	6838      	ldr	r0, [r7, #0]
 80063ba:	f002 fb01 	bl	80089c0 <memcpy>
	}
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063ce:	f001 ffc5 	bl	800835c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063da:	e011      	b.n	8006400 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d012      	beq.n	800640a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3324      	adds	r3, #36	; 0x24
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fe91 	bl	8007110 <xTaskRemoveFromEventList>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063f4:	f000 ff7a 	bl	80072ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006404:	2b00      	cmp	r3, #0
 8006406:	dce9      	bgt.n	80063dc <prvUnlockQueue+0x16>
 8006408:	e000      	b.n	800640c <prvUnlockQueue+0x46>
					break;
 800640a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	22ff      	movs	r2, #255	; 0xff
 8006410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006414:	f001 ffd0 	bl	80083b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006418:	f001 ffa0 	bl	800835c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006422:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006424:	e011      	b.n	800644a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d012      	beq.n	8006454 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3310      	adds	r3, #16
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fe6c 	bl	8007110 <xTaskRemoveFromEventList>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800643e:	f000 ff55 	bl	80072ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	3b01      	subs	r3, #1
 8006446:	b2db      	uxtb	r3, r3
 8006448:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800644a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800644e:	2b00      	cmp	r3, #0
 8006450:	dce9      	bgt.n	8006426 <prvUnlockQueue+0x60>
 8006452:	e000      	b.n	8006456 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006454:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	22ff      	movs	r2, #255	; 0xff
 800645a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800645e:	f001 ffab 	bl	80083b8 <vPortExitCritical>
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006472:	f001 ff73 	bl	800835c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	2b00      	cmp	r3, #0
 800647c:	d102      	bne.n	8006484 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800647e:	2301      	movs	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	e001      	b.n	8006488 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006488:	f001 ff96 	bl	80083b8 <vPortExitCritical>

	return xReturn;
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800649e:	f001 ff5d 	bl	800835c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d102      	bne.n	80064b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064ae:	2301      	movs	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	e001      	b.n	80064b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064b8:	f001 ff7e 	bl	80083b8 <vPortExitCritical>

	return xReturn;
 80064bc:	68fb      	ldr	r3, [r7, #12]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e025      	b.n	8006524 <vQueueAddToRegistry+0x5c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064d8:	4a16      	ldr	r2, [pc, #88]	; (8006534 <vQueueAddToRegistry+0x6c>)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d11c      	bne.n	800651e <vQueueAddToRegistry+0x56>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064e4:	4913      	ldr	r1, [pc, #76]	; (8006534 <vQueueAddToRegistry+0x6c>)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064ee:	4a11      	ldr	r2, [pc, #68]	; (8006534 <vQueueAddToRegistry+0x6c>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	4413      	add	r3, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fa fd83 	bl	8001006 <prvTraceGetQueueType>
 8006500:	4603      	mov	r3, r0
 8006502:	461a      	mov	r2, r3
 8006504:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <vQueueAddToRegistry+0x70>)
 8006506:	5c9c      	ldrb	r4, [r3, r2]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7fa fdcf 	bl	80010ac <prvTraceGetQueueNumberLow16>
 800650e:	4603      	mov	r3, r0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	4619      	mov	r1, r3
 8006516:	4620      	mov	r0, r4
 8006518:	f7fb ff2c 	bl	8002374 <prvTraceSetObjectName>
				break;
 800651c:	e005      	b.n	800652a <vQueueAddToRegistry+0x62>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3301      	adds	r3, #1
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b07      	cmp	r3, #7
 8006528:	d9d6      	bls.n	80064d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	bd90      	pop	{r4, r7, pc}
 8006532:	bf00      	nop
 8006534:	20006454 	.word	0x20006454
 8006538:	20000004 	.word	0x20000004

0800653c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800654c:	f001 ff06 	bl	800835c <vPortEnterCritical>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006556:	b25b      	sxtb	r3, r3
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d103      	bne.n	8006566 <vQueueWaitForMessageRestricted+0x2a>
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800656c:	b25b      	sxtb	r3, r3
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d103      	bne.n	800657c <vQueueWaitForMessageRestricted+0x40>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800657c:	f001 ff1c 	bl	80083b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	3324      	adds	r3, #36	; 0x24
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fd57 	bl	8007044 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006596:	6978      	ldr	r0, [r7, #20]
 8006598:	f7ff ff15 	bl	80063c6 <prvUnlockQueue>
	}
 800659c:	bf00      	nop
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08e      	sub	sp, #56	; 0x38
 80065a8:	af04      	add	r7, sp, #16
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <xTaskCreateStatic+0x28>
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	623b      	str	r3, [r7, #32]
 80065ca:	e7fe      	b.n	80065ca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <xTaskCreateStatic+0x42>
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	e7fe      	b.n	80065e4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065e6:	235c      	movs	r3, #92	; 0x5c
 80065e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b5c      	cmp	r3, #92	; 0x5c
 80065ee:	d009      	beq.n	8006604 <xTaskCreateStatic+0x60>
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	e7fe      	b.n	8006602 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006604:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01e      	beq.n	800664a <xTaskCreateStatic+0xa6>
 800660c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01b      	beq.n	800664a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800661a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006624:	2300      	movs	r3, #0
 8006626:	9303      	str	r3, [sp, #12]
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	9302      	str	r3, [sp, #8]
 800662c:	f107 0314 	add.w	r3, r7, #20
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f850 	bl	80066e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006644:	f000 f8dc 	bl	8006800 <prvAddNewTaskToReadyList>
 8006648:	e001      	b.n	800664e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800664e:	697b      	ldr	r3, [r7, #20]
	}
 8006650:	4618      	mov	r0, r3
 8006652:	3728      	adds	r7, #40	; 0x28
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08c      	sub	sp, #48	; 0x30
 800665c:	af04      	add	r7, sp, #16
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	4613      	mov	r3, r2
 8006666:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4618      	mov	r0, r3
 800666e:	f001 ff8f 	bl	8008590 <pvPortMalloc>
 8006672:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800667a:	205c      	movs	r0, #92	; 0x5c
 800667c:	f001 ff88 	bl	8008590 <pvPortMalloc>
 8006680:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
 800668e:	e005      	b.n	800669c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006690:	6978      	ldr	r0, [r7, #20]
 8006692:	f002 f84f 	bl	8008734 <vPortFree>
 8006696:	e001      	b.n	800669c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006698:	2300      	movs	r3, #0
 800669a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d017      	beq.n	80066d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066aa:	88fa      	ldrh	r2, [r7, #6]
 80066ac:	2300      	movs	r3, #0
 80066ae:	9303      	str	r3, [sp, #12]
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	9302      	str	r3, [sp, #8]
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f80e 	bl	80066e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066c6:	69f8      	ldr	r0, [r7, #28]
 80066c8:	f000 f89a 	bl	8006800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066cc:	2301      	movs	r3, #1
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e002      	b.n	80066d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066d2:	f04f 33ff 	mov.w	r3, #4294967295
 80066d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066d8:	69bb      	ldr	r3, [r7, #24]
	}
 80066da:	4618      	mov	r0, r3
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b088      	sub	sp, #32
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	461a      	mov	r2, r3
 80066fa:	21a5      	movs	r1, #165	; 0xa5
 80066fc:	f002 f96b 	bl	80089d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800670a:	3b01      	subs	r3, #1
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	f023 0307 	bic.w	r3, r3, #7
 8006718:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	2b00      	cmp	r3, #0
 8006722:	d009      	beq.n	8006738 <prvInitialiseNewTask+0x56>
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e7fe      	b.n	8006736 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01f      	beq.n	800677e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	e012      	b.n	800676a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	7819      	ldrb	r1, [r3, #0]
 800674c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	3334      	adds	r3, #52	; 0x34
 8006754:	460a      	mov	r2, r1
 8006756:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	3301      	adds	r3, #1
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	2b0f      	cmp	r3, #15
 800676e:	d9e9      	bls.n	8006744 <prvInitialiseNewTask+0x62>
 8006770:	e000      	b.n	8006774 <prvInitialiseNewTask+0x92>
			{
				break;
 8006772:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800677c:	e003      	b.n	8006786 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	2b37      	cmp	r3, #55	; 0x37
 800678a:	d901      	bls.n	8006790 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800678c:	2337      	movs	r3, #55	; 0x37
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006794:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800679a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	2200      	movs	r2, #0
 80067a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	3304      	adds	r3, #4
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe f962 	bl	8004a70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	3318      	adds	r3, #24
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fe f95d 	bl	8004a70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	2200      	movs	r2, #0
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	68f9      	ldr	r1, [r7, #12]
 80067de:	69b8      	ldr	r0, [r7, #24]
 80067e0:	f001 fc88 	bl	80080f4 <pxPortInitialiseStack>
 80067e4:	4602      	mov	r2, r0
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f6:	bf00      	nop
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006808:	f001 fda8 	bl	800835c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800680c:	4b5c      	ldr	r3, [pc, #368]	; (8006980 <prvAddNewTaskToReadyList+0x180>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a5b      	ldr	r2, [pc, #364]	; (8006980 <prvAddNewTaskToReadyList+0x180>)
 8006814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006816:	4b5b      	ldr	r3, [pc, #364]	; (8006984 <prvAddNewTaskToReadyList+0x184>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800681e:	4a59      	ldr	r2, [pc, #356]	; (8006984 <prvAddNewTaskToReadyList+0x184>)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006824:	4b56      	ldr	r3, [pc, #344]	; (8006980 <prvAddNewTaskToReadyList+0x180>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d110      	bne.n	800684e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800682c:	f000 fdae 	bl	800738c <prvInitialiseTaskLists>
 8006830:	e00d      	b.n	800684e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006832:	4b55      	ldr	r3, [pc, #340]	; (8006988 <prvAddNewTaskToReadyList+0x188>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800683a:	4b52      	ldr	r3, [pc, #328]	; (8006984 <prvAddNewTaskToReadyList+0x184>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	429a      	cmp	r2, r3
 8006846:	d802      	bhi.n	800684e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006848:	4a4e      	ldr	r2, [pc, #312]	; (8006984 <prvAddNewTaskToReadyList+0x184>)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800684e:	4b4f      	ldr	r3, [pc, #316]	; (800698c <prvAddNewTaskToReadyList+0x18c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	4a4d      	ldr	r2, [pc, #308]	; (800698c <prvAddNewTaskToReadyList+0x18c>)
 8006856:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006858:	4b4c      	ldr	r3, [pc, #304]	; (800698c <prvAddNewTaskToReadyList+0x18c>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d048      	beq.n	80068f8 <prvAddNewTaskToReadyList+0xf8>
 8006866:	2003      	movs	r0, #3
 8006868:	f7fb fc94 	bl	8002194 <prvTraceGetObjectHandle>
 800686c:	4603      	mov	r3, r0
 800686e:	b29b      	uxth	r3, r3
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fa fbee 	bl	8001054 <prvTraceSetTaskNumberLow16>
 8006878:	4b45      	ldr	r3, [pc, #276]	; (8006990 <prvAddNewTaskToReadyList+0x190>)
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fa fbfe 	bl	8001080 <prvTraceSetTaskNumberHigh16>
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7fa fbca 	bl	800101e <prvTraceGetTaskNumberLow16>
 800688a:	4603      	mov	r3, r0
 800688c:	b2d9      	uxtb	r1, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3334      	adds	r3, #52	; 0x34
 8006892:	461a      	mov	r2, r3
 8006894:	2003      	movs	r0, #3
 8006896:	f7fb fd6d 	bl	8002374 <prvTraceSetObjectName>
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fa fbbf 	bl	800101e <prvTraceGetTaskNumberLow16>
 80068a0:	4603      	mov	r3, r0
 80068a2:	b2d9      	uxtb	r1, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	2003      	movs	r0, #3
 80068ae:	f7fb fad9 	bl	8001e64 <prvTraceSetPriorityProperty>
 80068b2:	f7fa fc42 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80068b6:	4603      	mov	r3, r0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fa fbbd 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	4b34      	ldr	r3, [pc, #208]	; (8006994 <prvAddNewTaskToReadyList+0x194>)
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	4013      	ands	r3, r2
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d014      	beq.n	80068f8 <prvAddNewTaskToReadyList+0xf8>
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fa fbb2 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80068d4:	4603      	mov	r3, r0
 80068d6:	461a      	mov	r2, r3
 80068d8:	4b2e      	ldr	r3, [pc, #184]	; (8006994 <prvAddNewTaskToReadyList+0x194>)
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	4013      	ands	r3, r2
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d009      	beq.n	80068f8 <prvAddNewTaskToReadyList+0xf8>
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7fa fb9a 	bl	800101e <prvTraceGetTaskNumberLow16>
 80068ea:	4603      	mov	r3, r0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	2103      	movs	r1, #3
 80068f2:	201b      	movs	r0, #27
 80068f4:	f7fb f8a2 	bl	8001a3c <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fa fb9d 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	4b24      	ldr	r3, [pc, #144]	; (8006994 <prvAddNewTaskToReadyList+0x194>)
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	4013      	ands	r3, r2
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <prvAddNewTaskToReadyList+0x11e>
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fa fb85 	bl	800101e <prvTraceGetTaskNumberLow16>
 8006914:	4603      	mov	r3, r0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	4618      	mov	r0, r3
 800691a:	f7fa ff95 	bl	8001848 <prvTraceStoreTaskReady>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006922:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <prvAddNewTaskToReadyList+0x198>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d903      	bls.n	8006932 <prvAddNewTaskToReadyList+0x132>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	4a1a      	ldr	r2, [pc, #104]	; (8006998 <prvAddNewTaskToReadyList+0x198>)
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4a17      	ldr	r2, [pc, #92]	; (800699c <prvAddNewTaskToReadyList+0x19c>)
 8006940:	441a      	add	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3304      	adds	r3, #4
 8006946:	4619      	mov	r1, r3
 8006948:	4610      	mov	r0, r2
 800694a:	f7fe f89e 	bl	8004a8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800694e:	f001 fd33 	bl	80083b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006952:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <prvAddNewTaskToReadyList+0x188>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <prvAddNewTaskToReadyList+0x178>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800695a:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <prvAddNewTaskToReadyList+0x184>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	429a      	cmp	r2, r3
 8006966:	d207      	bcs.n	8006978 <prvAddNewTaskToReadyList+0x178>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006968:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <prvAddNewTaskToReadyList+0x1a0>)
 800696a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20000c6c 	.word	0x20000c6c
 8006984:	20000798 	.word	0x20000798
 8006988:	20000c78 	.word	0x20000c78
 800698c:	20000c88 	.word	0x20000c88
 8006990:	200063b4 	.word	0x200063b4
 8006994:	20004aa8 	.word	0x20004aa8
 8006998:	20000c74 	.word	0x20000c74
 800699c:	2000079c 	.word	0x2000079c
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d04a      	beq.n	8006a4c <vTaskDelay+0xa8>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069b6:	4b2d      	ldr	r3, [pc, #180]	; (8006a6c <vTaskDelay+0xc8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d009      	beq.n	80069d2 <vTaskDelay+0x2e>
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60bb      	str	r3, [r7, #8]
 80069d0:	e7fe      	b.n	80069d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80069d2:	f000 f8db 	bl	8006b8c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80069d6:	4b26      	ldr	r3, [pc, #152]	; (8006a70 <vTaskDelay+0xcc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fa fb2c 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
 80069e4:	4b23      	ldr	r3, [pc, #140]	; (8006a74 <vTaskDelay+0xd0>)
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	4013      	ands	r3, r2
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <vTaskDelay+0x68>
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	2089      	movs	r0, #137	; 0x89
 80069f4:	f7fb f962 	bl	8001cbc <prvTraceStoreKernelCallWithNumericParamOnly>
 80069f8:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <vTaskDelay+0xcc>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fa fb0e 	bl	800101e <prvTraceGetTaskNumberLow16>
 8006a02:	4603      	mov	r3, r0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fb fb1e 	bl	8002048 <prvTraceSetTaskInstanceFinished>
 8006a0c:	f7fa fb95 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8006a10:	4603      	mov	r3, r0
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fa fb10 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4b15      	ldr	r3, [pc, #84]	; (8006a74 <vTaskDelay+0xd0>)
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	4013      	ands	r3, r2
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00a      	beq.n	8006a3e <vTaskDelay+0x9a>
 8006a28:	f7fa fb87 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fa faf5 	bl	800101e <prvTraceGetTaskNumberLow16>
 8006a34:	4603      	mov	r3, r0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fb fb05 	bl	8002048 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a3e:	2100      	movs	r1, #0
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 ffbd 	bl	80079c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a46:	f000 f8af 	bl	8006ba8 <xTaskResumeAll>
 8006a4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d107      	bne.n	8006a62 <vTaskDelay+0xbe>
		{
			portYIELD_WITHIN_API();
 8006a52:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <vTaskDelay+0xd4>)
 8006a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000c94 	.word	0x20000c94
 8006a70:	20000798 	.word	0x20000798
 8006a74:	20004aa8 	.word	0x20004aa8
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a8a:	463a      	mov	r2, r7
 8006a8c:	1d39      	adds	r1, r7, #4
 8006a8e:	f107 0308 	add.w	r3, r7, #8
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fd ff98 	bl	80049c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	9202      	str	r2, [sp, #8]
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	460a      	mov	r2, r1
 8006aaa:	4930      	ldr	r1, [pc, #192]	; (8006b6c <vTaskStartScheduler+0xf0>)
 8006aac:	4830      	ldr	r0, [pc, #192]	; (8006b70 <vTaskStartScheduler+0xf4>)
 8006aae:	f7ff fd79 	bl	80065a4 <xTaskCreateStatic>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	4b2f      	ldr	r3, [pc, #188]	; (8006b74 <vTaskStartScheduler+0xf8>)
 8006ab6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ab8:	4b2e      	ldr	r3, [pc, #184]	; (8006b74 <vTaskStartScheduler+0xf8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	e001      	b.n	8006aca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d102      	bne.n	8006ad6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ad0:	f000 ffca 	bl	8007a68 <xTimerCreateTimerTask>
 8006ad4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d134      	bne.n	8006b46 <vTaskStartScheduler+0xca>
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006aee:	4b22      	ldr	r3, [pc, #136]	; (8006b78 <vTaskStartScheduler+0xfc>)
 8006af0:	f04f 32ff 	mov.w	r2, #4294967295
 8006af4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006af6:	4b21      	ldr	r3, [pc, #132]	; (8006b7c <vTaskStartScheduler+0x100>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006afc:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <vTaskStartScheduler+0x104>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8006b02:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <vTaskStartScheduler+0x108>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	f7fa fb17 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fa fa92 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8006b14:	4603      	mov	r3, r0
 8006b16:	461a      	mov	r2, r3
 8006b18:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <vTaskStartScheduler+0x10c>)
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <vTaskStartScheduler+0xbe>
 8006b24:	f7fa fb09 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fa fa77 	bl	800101e <prvTraceGetTaskNumberLow16>
 8006b30:	4603      	mov	r3, r0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fb f925 	bl	8001d84 <prvTraceStoreTaskswitch>
 8006b3a:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <vTaskStartScheduler+0x108>)
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b40:	f001 fb5e 	bl	8008200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b44:	e00d      	b.n	8006b62 <vTaskStartScheduler+0xe6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d109      	bne.n	8006b62 <vTaskStartScheduler+0xe6>
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	e7fe      	b.n	8006b60 <vTaskStartScheduler+0xe4>
}
 8006b62:	bf00      	nop
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	0800a99c 	.word	0x0800a99c
 8006b70:	08007359 	.word	0x08007359
 8006b74:	20000c90 	.word	0x20000c90
 8006b78:	20000c8c 	.word	0x20000c8c
 8006b7c:	20000c78 	.word	0x20000c78
 8006b80:	20000c70 	.word	0x20000c70
 8006b84:	200000b0 	.word	0x200000b0
 8006b88:	20004aa8 	.word	0x20004aa8

08006b8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b90:	4b04      	ldr	r3, [pc, #16]	; (8006ba4 <vTaskSuspendAll+0x18>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	4a03      	ldr	r2, [pc, #12]	; (8006ba4 <vTaskSuspendAll+0x18>)
 8006b98:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006b9a:	bf00      	nop
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	20000c94 	.word	0x20000c94

08006ba8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bb6:	4b4b      	ldr	r3, [pc, #300]	; (8006ce4 <xTaskResumeAll+0x13c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <xTaskResumeAll+0x2a>
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	e7fe      	b.n	8006bd0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bd2:	f001 fbc3 	bl	800835c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bd6:	4b43      	ldr	r3, [pc, #268]	; (8006ce4 <xTaskResumeAll+0x13c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	4a41      	ldr	r2, [pc, #260]	; (8006ce4 <xTaskResumeAll+0x13c>)
 8006bde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006be0:	4b40      	ldr	r3, [pc, #256]	; (8006ce4 <xTaskResumeAll+0x13c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d175      	bne.n	8006cd4 <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006be8:	4b3f      	ldr	r3, [pc, #252]	; (8006ce8 <xTaskResumeAll+0x140>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d071      	beq.n	8006cd4 <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bf0:	e042      	b.n	8006c78 <xTaskResumeAll+0xd0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf2:	4b3e      	ldr	r3, [pc, #248]	; (8006cec <xTaskResumeAll+0x144>)
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3318      	adds	r3, #24
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fd ffa0 	bl	8004b44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3304      	adds	r3, #4
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fd ff9b 	bl	8004b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7fa fa12 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	4b35      	ldr	r3, [pc, #212]	; (8006cf0 <xTaskResumeAll+0x148>)
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <xTaskResumeAll+0x8c>
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7fa f9fa 	bl	800101e <prvTraceGetTaskNumberLow16>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fa fe0a 	bl	8001848 <prvTraceStoreTaskReady>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c38:	4b2e      	ldr	r3, [pc, #184]	; (8006cf4 <xTaskResumeAll+0x14c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d903      	bls.n	8006c48 <xTaskResumeAll+0xa0>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	4a2b      	ldr	r2, [pc, #172]	; (8006cf4 <xTaskResumeAll+0x14c>)
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4a28      	ldr	r2, [pc, #160]	; (8006cf8 <xTaskResumeAll+0x150>)
 8006c56:	441a      	add	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f7fd ff13 	bl	8004a8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <xTaskResumeAll+0x154>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 8006c72:	4b23      	ldr	r3, [pc, #140]	; (8006d00 <xTaskResumeAll+0x158>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c78:	4b1c      	ldr	r3, [pc, #112]	; (8006cec <xTaskResumeAll+0x144>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1b8      	bne.n	8006bf2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c86:	f000 fc1b 	bl	80074c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c8a:	4b1e      	ldr	r3, [pc, #120]	; (8006d04 <xTaskResumeAll+0x15c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d010      	beq.n	8006cb8 <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c96:	f000 f849 	bl	8006d2c <xTaskIncrementTick>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 8006ca0:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <xTaskResumeAll+0x158>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1f1      	bne.n	8006c96 <xTaskResumeAll+0xee>

						uxPendedTicks = 0;
 8006cb2:	4b14      	ldr	r3, [pc, #80]	; (8006d04 <xTaskResumeAll+0x15c>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cb8:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <xTaskResumeAll+0x158>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cc4:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <xTaskResumeAll+0x160>)
 8006cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cd4:	f001 fb70 	bl	80083b8 <vPortExitCritical>

	return xAlreadyYielded;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000c94 	.word	0x20000c94
 8006ce8:	20000c6c 	.word	0x20000c6c
 8006cec:	20000c2c 	.word	0x20000c2c
 8006cf0:	20004aa8 	.word	0x20004aa8
 8006cf4:	20000c74 	.word	0x20000c74
 8006cf8:	2000079c 	.word	0x2000079c
 8006cfc:	20000798 	.word	0x20000798
 8006d00:	20000c80 	.word	0x20000c80
 8006d04:	20000c7c 	.word	0x20000c7c
 8006d08:	e000ed04 	.word	0xe000ed04

08006d0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <xTaskGetTickCount+0x1c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d18:	687b      	ldr	r3, [r7, #4]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	20000c70 	.word	0x20000c70

08006d2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d32:	2300      	movs	r3, #0
 8006d34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8006d36:	4b65      	ldr	r3, [pc, #404]	; (8006ecc <xTaskIncrementTick+0x1a0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d003      	beq.n	8006d46 <xTaskIncrementTick+0x1a>
 8006d3e:	4b64      	ldr	r3, [pc, #400]	; (8006ed0 <xTaskIncrementTick+0x1a4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d107      	bne.n	8006d56 <xTaskIncrementTick+0x2a>
 8006d46:	4b63      	ldr	r3, [pc, #396]	; (8006ed4 <xTaskIncrementTick+0x1a8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	4a61      	ldr	r2, [pc, #388]	; (8006ed4 <xTaskIncrementTick+0x1a8>)
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	2000      	movs	r0, #0
 8006d52:	f7fb fd5b 	bl	800280c <prvTracePortGetTimeStamp>
 8006d56:	4b5d      	ldr	r3, [pc, #372]	; (8006ecc <xTaskIncrementTick+0x1a0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d106      	bne.n	8006d6c <xTaskIncrementTick+0x40>
 8006d5e:	4b5e      	ldr	r3, [pc, #376]	; (8006ed8 <xTaskIncrementTick+0x1ac>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	4619      	mov	r1, r3
 8006d66:	2003      	movs	r0, #3
 8006d68:	f7fa ffa8 	bl	8001cbc <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d6c:	4b57      	ldr	r3, [pc, #348]	; (8006ecc <xTaskIncrementTick+0x1a0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 809b 	bne.w	8006eac <xTaskIncrementTick+0x180>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d76:	4b58      	ldr	r3, [pc, #352]	; (8006ed8 <xTaskIncrementTick+0x1ac>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d7e:	4a56      	ldr	r2, [pc, #344]	; (8006ed8 <xTaskIncrementTick+0x1ac>)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d11f      	bne.n	8006dca <xTaskIncrementTick+0x9e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d8a:	4b54      	ldr	r3, [pc, #336]	; (8006edc <xTaskIncrementTick+0x1b0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d009      	beq.n	8006da8 <xTaskIncrementTick+0x7c>
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	603b      	str	r3, [r7, #0]
 8006da6:	e7fe      	b.n	8006da6 <xTaskIncrementTick+0x7a>
 8006da8:	4b4c      	ldr	r3, [pc, #304]	; (8006edc <xTaskIncrementTick+0x1b0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	4b4c      	ldr	r3, [pc, #304]	; (8006ee0 <xTaskIncrementTick+0x1b4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a4a      	ldr	r2, [pc, #296]	; (8006edc <xTaskIncrementTick+0x1b0>)
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	4a4a      	ldr	r2, [pc, #296]	; (8006ee0 <xTaskIncrementTick+0x1b4>)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	4b49      	ldr	r3, [pc, #292]	; (8006ee4 <xTaskIncrementTick+0x1b8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	4a48      	ldr	r2, [pc, #288]	; (8006ee4 <xTaskIncrementTick+0x1b8>)
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	f000 fb7b 	bl	80074c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006dca:	4b47      	ldr	r3, [pc, #284]	; (8006ee8 <xTaskIncrementTick+0x1bc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d35c      	bcc.n	8006e8e <xTaskIncrementTick+0x162>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dd4:	4b41      	ldr	r3, [pc, #260]	; (8006edc <xTaskIncrementTick+0x1b0>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d104      	bne.n	8006de8 <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dde:	4b42      	ldr	r3, [pc, #264]	; (8006ee8 <xTaskIncrementTick+0x1bc>)
 8006de0:	f04f 32ff 	mov.w	r2, #4294967295
 8006de4:	601a      	str	r2, [r3, #0]
					break;
 8006de6:	e052      	b.n	8006e8e <xTaskIncrementTick+0x162>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de8:	4b3c      	ldr	r3, [pc, #240]	; (8006edc <xTaskIncrementTick+0x1b0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d203      	bcs.n	8006e08 <xTaskIncrementTick+0xdc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e00:	4a39      	ldr	r2, [pc, #228]	; (8006ee8 <xTaskIncrementTick+0x1bc>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e06:	e042      	b.n	8006e8e <xTaskIncrementTick+0x162>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fd fe99 	bl	8004b44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <xTaskIncrementTick+0xf8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	3318      	adds	r3, #24
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fd fe90 	bl	8004b44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e24:	68b8      	ldr	r0, [r7, #8]
 8006e26:	f7fa f907 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	4b2f      	ldr	r3, [pc, #188]	; (8006eec <xTaskIncrementTick+0x1c0>)
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	4013      	ands	r3, r2
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d007      	beq.n	8006e4a <xTaskIncrementTick+0x11e>
 8006e3a:	68b8      	ldr	r0, [r7, #8]
 8006e3c:	f7fa f8ef 	bl	800101e <prvTraceGetTaskNumberLow16>
 8006e40:	4603      	mov	r3, r0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fa fcff 	bl	8001848 <prvTraceStoreTaskReady>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4e:	4b28      	ldr	r3, [pc, #160]	; (8006ef0 <xTaskIncrementTick+0x1c4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d903      	bls.n	8006e5e <xTaskIncrementTick+0x132>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	4a25      	ldr	r2, [pc, #148]	; (8006ef0 <xTaskIncrementTick+0x1c4>)
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4a22      	ldr	r2, [pc, #136]	; (8006ef4 <xTaskIncrementTick+0x1c8>)
 8006e6c:	441a      	add	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f7fd fe08 	bl	8004a8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <xTaskIncrementTick+0x1cc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d3a5      	bcc.n	8006dd4 <xTaskIncrementTick+0xa8>
						{
							xSwitchRequired = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e8c:	e7a2      	b.n	8006dd4 <xTaskIncrementTick+0xa8>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <xTaskIncrementTick+0x1cc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e94:	4917      	ldr	r1, [pc, #92]	; (8006ef4 <xTaskIncrementTick+0x1c8>)
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	440b      	add	r3, r1
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d907      	bls.n	8006eb6 <xTaskIncrementTick+0x18a>
			{
				xSwitchRequired = pdTRUE;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	e004      	b.n	8006eb6 <xTaskIncrementTick+0x18a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006eac:	4b08      	ldr	r3, [pc, #32]	; (8006ed0 <xTaskIncrementTick+0x1a4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a07      	ldr	r2, [pc, #28]	; (8006ed0 <xTaskIncrementTick+0x1a4>)
 8006eb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006eb6:	4b11      	ldr	r3, [pc, #68]	; (8006efc <xTaskIncrementTick+0x1d0>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <xTaskIncrementTick+0x196>
		{
			xSwitchRequired = pdTRUE;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ec2:	697b      	ldr	r3, [r7, #20]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000c94 	.word	0x20000c94
 8006ed0:	20000c7c 	.word	0x20000c7c
 8006ed4:	200000a4 	.word	0x200000a4
 8006ed8:	20000c70 	.word	0x20000c70
 8006edc:	20000c24 	.word	0x20000c24
 8006ee0:	20000c28 	.word	0x20000c28
 8006ee4:	20000c84 	.word	0x20000c84
 8006ee8:	20000c8c 	.word	0x20000c8c
 8006eec:	20004aa8 	.word	0x20004aa8
 8006ef0:	20000c74 	.word	0x20000c74
 8006ef4:	2000079c 	.word	0x2000079c
 8006ef8:	20000798 	.word	0x20000798
 8006efc:	20000c80 	.word	0x20000c80

08006f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f06:	4b36      	ldr	r3, [pc, #216]	; (8006fe0 <vTaskSwitchContext+0xe0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f0e:	4b35      	ldr	r3, [pc, #212]	; (8006fe4 <vTaskSwitchContext+0xe4>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f14:	e05f      	b.n	8006fd6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8006f16:	4b33      	ldr	r3, [pc, #204]	; (8006fe4 <vTaskSwitchContext+0xe4>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f1c:	4b32      	ldr	r3, [pc, #200]	; (8006fe8 <vTaskSwitchContext+0xe8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	e00f      	b.n	8006f44 <vTaskSwitchContext+0x44>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <vTaskSwitchContext+0x3e>
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	607b      	str	r3, [r7, #4]
 8006f3c:	e7fe      	b.n	8006f3c <vTaskSwitchContext+0x3c>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	4929      	ldr	r1, [pc, #164]	; (8006fec <vTaskSwitchContext+0xec>)
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	440b      	add	r3, r1
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0e5      	beq.n	8006f24 <vTaskSwitchContext+0x24>
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4a22      	ldr	r2, [pc, #136]	; (8006fec <vTaskSwitchContext+0xec>)
 8006f64:	4413      	add	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	605a      	str	r2, [r3, #4]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d104      	bne.n	8006f88 <vTaskSwitchContext+0x88>
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	605a      	str	r2, [r3, #4]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	4a18      	ldr	r2, [pc, #96]	; (8006ff0 <vTaskSwitchContext+0xf0>)
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <vTaskSwitchContext+0xe8>)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8006f98:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <vTaskSwitchContext+0xf4>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	f7fa f8cc 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fa f847 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8006faa:	4603      	mov	r3, r0
 8006fac:	461a      	mov	r2, r3
 8006fae:	4b12      	ldr	r3, [pc, #72]	; (8006ff8 <vTaskSwitchContext+0xf8>)
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <vTaskSwitchContext+0xd0>
 8006fba:	f7fa f8be 	bl	800113a <prvTraceGetCurrentTaskHandle>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fa f82c 	bl	800101e <prvTraceGetTaskNumberLow16>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fa feda 	bl	8001d84 <prvTraceStoreTaskswitch>
 8006fd0:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <vTaskSwitchContext+0xf4>)
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000c94 	.word	0x20000c94
 8006fe4:	20000c80 	.word	0x20000c80
 8006fe8:	20000c74 	.word	0x20000c74
 8006fec:	2000079c 	.word	0x2000079c
 8006ff0:	20000798 	.word	0x20000798
 8006ff4:	200000b0 	.word	0x200000b0
 8006ff8:	20004aa8 	.word	0x20004aa8

08006ffc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d109      	bne.n	8007020 <vTaskPlaceOnEventList+0x24>
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e7fe      	b.n	800701e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <vTaskPlaceOnEventList+0x44>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3318      	adds	r3, #24
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7fd fd52 	bl	8004ad2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800702e:	2101      	movs	r1, #1
 8007030:	6838      	ldr	r0, [r7, #0]
 8007032:	f000 fcc5 	bl	80079c0 <prvAddCurrentTaskToDelayedList>
}
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000798 	.word	0x20000798

08007044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d109      	bne.n	800706a <vTaskPlaceOnEventListRestricted+0x26>
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	e7fe      	b.n	8007068 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800706a:	4b26      	ldr	r3, [pc, #152]	; (8007104 <vTaskPlaceOnEventListRestricted+0xc0>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3318      	adds	r3, #24
 8007070:	4619      	mov	r1, r3
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7fd fd09 	bl	8004a8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800707e:	f04f 33ff 	mov.w	r3, #4294967295
 8007082:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8007084:	4b1f      	ldr	r3, [pc, #124]	; (8007104 <vTaskPlaceOnEventListRestricted+0xc0>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4618      	mov	r0, r3
 800708a:	f7f9 ffd5 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <vTaskPlaceOnEventListRestricted+0xc4>)
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	4013      	ands	r3, r2
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d011      	beq.n	80070c2 <vTaskPlaceOnEventListRestricted+0x7e>
 800709e:	4b1b      	ldr	r3, [pc, #108]	; (800710c <vTaskPlaceOnEventListRestricted+0xc8>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4413      	add	r3, r2
 80070a6:	4619      	mov	r1, r3
 80070a8:	2088      	movs	r0, #136	; 0x88
 80070aa:	f7fa fe07 	bl	8001cbc <prvTraceStoreKernelCallWithNumericParamOnly>
 80070ae:	4b15      	ldr	r3, [pc, #84]	; (8007104 <vTaskPlaceOnEventListRestricted+0xc0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7f9 ffb3 	bl	800101e <prvTraceGetTaskNumberLow16>
 80070b8:	4603      	mov	r3, r0
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fa ffc3 	bl	8002048 <prvTraceSetTaskInstanceFinished>
 80070c2:	f7fa f83a 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80070c6:	4603      	mov	r3, r0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7f9 ffb5 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80070ce:	4603      	mov	r3, r0
 80070d0:	461a      	mov	r2, r3
 80070d2:	4b0d      	ldr	r3, [pc, #52]	; (8007108 <vTaskPlaceOnEventListRestricted+0xc4>)
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	4013      	ands	r3, r2
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <vTaskPlaceOnEventListRestricted+0xb0>
 80070de:	f7fa f82c 	bl	800113a <prvTraceGetCurrentTaskHandle>
 80070e2:	4603      	mov	r3, r0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7f9 ff9a 	bl	800101e <prvTraceGetTaskNumberLow16>
 80070ea:	4603      	mov	r3, r0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fa ffaa 	bl	8002048 <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	68b8      	ldr	r0, [r7, #8]
 80070f8:	f000 fc62 	bl	80079c0 <prvAddCurrentTaskToDelayedList>
	}
 80070fc:	bf00      	nop
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000798 	.word	0x20000798
 8007108:	20004aa8 	.word	0x20004aa8
 800710c:	20000c70 	.word	0x20000c70

08007110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <xTaskRemoveFromEventList+0x2a>
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e7fe      	b.n	8007138 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3318      	adds	r3, #24
 800713e:	4618      	mov	r0, r3
 8007140:	f7fd fd00 	bl	8004b44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007144:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <xTaskRemoveFromEventList+0xd4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d130      	bne.n	80071ae <xTaskRemoveFromEventList+0x9e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	3304      	adds	r3, #4
 8007150:	4618      	mov	r0, r3
 8007152:	f7fd fcf7 	bl	8004b44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007156:	6938      	ldr	r0, [r7, #16]
 8007158:	f7f9 ff6e 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 800715c:	4603      	mov	r3, r0
 800715e:	461a      	mov	r2, r3
 8007160:	4b21      	ldr	r3, [pc, #132]	; (80071e8 <xTaskRemoveFromEventList+0xd8>)
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	4013      	ands	r3, r2
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <xTaskRemoveFromEventList+0x6c>
 800716c:	6938      	ldr	r0, [r7, #16]
 800716e:	f7f9 ff56 	bl	800101e <prvTraceGetTaskNumberLow16>
 8007172:	4603      	mov	r3, r0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	4618      	mov	r0, r3
 8007178:	f7fa fb66 	bl	8001848 <prvTraceStoreTaskReady>
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007180:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <xTaskRemoveFromEventList+0xdc>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d903      	bls.n	8007190 <xTaskRemoveFromEventList+0x80>
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	4a17      	ldr	r2, [pc, #92]	; (80071ec <xTaskRemoveFromEventList+0xdc>)
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <xTaskRemoveFromEventList+0xe0>)
 800719e:	441a      	add	r2, r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	3304      	adds	r3, #4
 80071a4:	4619      	mov	r1, r3
 80071a6:	4610      	mov	r0, r2
 80071a8:	f7fd fc6f 	bl	8004a8a <vListInsertEnd>
 80071ac:	e005      	b.n	80071ba <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	3318      	adds	r3, #24
 80071b2:	4619      	mov	r1, r3
 80071b4:	480f      	ldr	r0, [pc, #60]	; (80071f4 <xTaskRemoveFromEventList+0xe4>)
 80071b6:	f7fd fc68 	bl	8004a8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071be:	4b0e      	ldr	r3, [pc, #56]	; (80071f8 <xTaskRemoveFromEventList+0xe8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d905      	bls.n	80071d4 <xTaskRemoveFromEventList+0xc4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071c8:	2301      	movs	r3, #1
 80071ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <xTaskRemoveFromEventList+0xec>)
 80071ce:	2201      	movs	r2, #1
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	e001      	b.n	80071d8 <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		xReturn = pdFALSE;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071d8:	697b      	ldr	r3, [r7, #20]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20000c94 	.word	0x20000c94
 80071e8:	20004aa8 	.word	0x20004aa8
 80071ec:	20000c74 	.word	0x20000c74
 80071f0:	2000079c 	.word	0x2000079c
 80071f4:	20000c2c 	.word	0x20000c2c
 80071f8:	20000798 	.word	0x20000798
 80071fc:	20000c80 	.word	0x20000c80

08007200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007208:	4b06      	ldr	r3, [pc, #24]	; (8007224 <vTaskInternalSetTimeOutState+0x24>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <vTaskInternalSetTimeOutState+0x28>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	605a      	str	r2, [r3, #4]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20000c84 	.word	0x20000c84
 8007228:	20000c70 	.word	0x20000c70

0800722c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d109      	bne.n	8007250 <xTaskCheckForTimeOut+0x24>
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	e7fe      	b.n	800724e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d109      	bne.n	800726a <xTaskCheckForTimeOut+0x3e>
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e7fe      	b.n	8007268 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800726a:	f001 f877 	bl	800835c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800726e:	4b1d      	ldr	r3, [pc, #116]	; (80072e4 <xTaskCheckForTimeOut+0xb8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007286:	d102      	bne.n	800728e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007288:	2300      	movs	r3, #0
 800728a:	61fb      	str	r3, [r7, #28]
 800728c:	e023      	b.n	80072d6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b15      	ldr	r3, [pc, #84]	; (80072e8 <xTaskCheckForTimeOut+0xbc>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d007      	beq.n	80072aa <xTaskCheckForTimeOut+0x7e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d302      	bcc.n	80072aa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072a4:	2301      	movs	r3, #1
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	e015      	b.n	80072d6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d20b      	bcs.n	80072cc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	1ad2      	subs	r2, r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff ff9d 	bl	8007200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
 80072ca:	e004      	b.n	80072d6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072d2:	2301      	movs	r3, #1
 80072d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072d6:	f001 f86f 	bl	80083b8 <vPortExitCritical>

	return xReturn;
 80072da:	69fb      	ldr	r3, [r7, #28]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3720      	adds	r7, #32
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000c70 	.word	0x20000c70
 80072e8:	20000c84 	.word	0x20000c84

080072ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072f0:	4b03      	ldr	r3, [pc, #12]	; (8007300 <vTaskMissedYield+0x14>)
 80072f2:	2201      	movs	r2, #1
 80072f4:	601a      	str	r2, [r3, #0]
}
 80072f6:	bf00      	nop
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	20000c80 	.word	0x20000c80

08007304 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d005      	beq.n	800731e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	e001      	b.n	8007322 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8007322:	68fb      	ldr	r3, [r7, #12]
	}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
	...

08007358 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007360:	f000 f854 	bl	800740c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <prvIdleTask+0x2c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d907      	bls.n	800737c <prvIdleTask+0x24>
			{
				taskYIELD();
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <prvIdleTask+0x30>)
 800736e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800737c:	f7f9 fab8 	bl	80008f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007380:	e7ee      	b.n	8007360 <prvIdleTask+0x8>
 8007382:	bf00      	nop
 8007384:	2000079c 	.word	0x2000079c
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007392:	2300      	movs	r3, #0
 8007394:	607b      	str	r3, [r7, #4]
 8007396:	e00c      	b.n	80073b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4a12      	ldr	r2, [pc, #72]	; (80073ec <prvInitialiseTaskLists+0x60>)
 80073a4:	4413      	add	r3, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fd fb42 	bl	8004a30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3301      	adds	r3, #1
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b37      	cmp	r3, #55	; 0x37
 80073b6:	d9ef      	bls.n	8007398 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073b8:	480d      	ldr	r0, [pc, #52]	; (80073f0 <prvInitialiseTaskLists+0x64>)
 80073ba:	f7fd fb39 	bl	8004a30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073be:	480d      	ldr	r0, [pc, #52]	; (80073f4 <prvInitialiseTaskLists+0x68>)
 80073c0:	f7fd fb36 	bl	8004a30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073c4:	480c      	ldr	r0, [pc, #48]	; (80073f8 <prvInitialiseTaskLists+0x6c>)
 80073c6:	f7fd fb33 	bl	8004a30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073ca:	480c      	ldr	r0, [pc, #48]	; (80073fc <prvInitialiseTaskLists+0x70>)
 80073cc:	f7fd fb30 	bl	8004a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073d0:	480b      	ldr	r0, [pc, #44]	; (8007400 <prvInitialiseTaskLists+0x74>)
 80073d2:	f7fd fb2d 	bl	8004a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073d6:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <prvInitialiseTaskLists+0x78>)
 80073d8:	4a05      	ldr	r2, [pc, #20]	; (80073f0 <prvInitialiseTaskLists+0x64>)
 80073da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073dc:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <prvInitialiseTaskLists+0x7c>)
 80073de:	4a05      	ldr	r2, [pc, #20]	; (80073f4 <prvInitialiseTaskLists+0x68>)
 80073e0:	601a      	str	r2, [r3, #0]
}
 80073e2:	bf00      	nop
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	2000079c 	.word	0x2000079c
 80073f0:	20000bfc 	.word	0x20000bfc
 80073f4:	20000c10 	.word	0x20000c10
 80073f8:	20000c2c 	.word	0x20000c2c
 80073fc:	20000c40 	.word	0x20000c40
 8007400:	20000c58 	.word	0x20000c58
 8007404:	20000c24 	.word	0x20000c24
 8007408:	20000c28 	.word	0x20000c28

0800740c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007412:	e019      	b.n	8007448 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007414:	f000 ffa2 	bl	800835c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007418:	4b0f      	ldr	r3, [pc, #60]	; (8007458 <prvCheckTasksWaitingTermination+0x4c>)
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	4618      	mov	r0, r3
 8007426:	f7fd fb8d 	bl	8004b44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800742a:	4b0c      	ldr	r3, [pc, #48]	; (800745c <prvCheckTasksWaitingTermination+0x50>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3b01      	subs	r3, #1
 8007430:	4a0a      	ldr	r2, [pc, #40]	; (800745c <prvCheckTasksWaitingTermination+0x50>)
 8007432:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007434:	4b0a      	ldr	r3, [pc, #40]	; (8007460 <prvCheckTasksWaitingTermination+0x54>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3b01      	subs	r3, #1
 800743a:	4a09      	ldr	r2, [pc, #36]	; (8007460 <prvCheckTasksWaitingTermination+0x54>)
 800743c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800743e:	f000 ffbb 	bl	80083b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f80e 	bl	8007464 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007448:	4b05      	ldr	r3, [pc, #20]	; (8007460 <prvCheckTasksWaitingTermination+0x54>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e1      	bne.n	8007414 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20000c40 	.word	0x20000c40
 800745c:	20000c6c 	.word	0x20000c6c
 8007460:	20000c54 	.word	0x20000c54

08007464 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007472:	2b00      	cmp	r3, #0
 8007474:	d108      	bne.n	8007488 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	4618      	mov	r0, r3
 800747c:	f001 f95a 	bl	8008734 <vPortFree>
				vPortFree( pxTCB );
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 f957 	bl	8008734 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007486:	e017      	b.n	80074b8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800748e:	2b01      	cmp	r3, #1
 8007490:	d103      	bne.n	800749a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f001 f94e 	bl	8008734 <vPortFree>
	}
 8007498:	e00e      	b.n	80074b8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d009      	beq.n	80074b8 <prvDeleteTCB+0x54>
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	e7fe      	b.n	80074b6 <prvDeleteTCB+0x52>
	}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvResetNextTaskUnblockTime+0x38>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074d0:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <prvResetNextTaskUnblockTime+0x3c>)
 80074d2:	f04f 32ff 	mov.w	r2, #4294967295
 80074d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074d8:	e008      	b.n	80074ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074da:	4b07      	ldr	r3, [pc, #28]	; (80074f8 <prvResetNextTaskUnblockTime+0x38>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	4a04      	ldr	r2, [pc, #16]	; (80074fc <prvResetNextTaskUnblockTime+0x3c>)
 80074ea:	6013      	str	r3, [r2, #0]
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	20000c24 	.word	0x20000c24
 80074fc:	20000c8c 	.word	0x20000c8c

08007500 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007506:	4b05      	ldr	r3, [pc, #20]	; (800751c <xTaskGetCurrentTaskHandle+0x1c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800750c:	687b      	ldr	r3, [r7, #4]
	}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000798 	.word	0x20000798

08007520 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007526:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <xTaskGetSchedulerState+0x34>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800752e:	2301      	movs	r3, #1
 8007530:	607b      	str	r3, [r7, #4]
 8007532:	e008      	b.n	8007546 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007534:	4b08      	ldr	r3, [pc, #32]	; (8007558 <xTaskGetSchedulerState+0x38>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d102      	bne.n	8007542 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800753c:	2302      	movs	r3, #2
 800753e:	607b      	str	r3, [r7, #4]
 8007540:	e001      	b.n	8007546 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007542:	2300      	movs	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007546:	687b      	ldr	r3, [r7, #4]
	}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	20000c78 	.word	0x20000c78
 8007558:	20000c94 	.word	0x20000c94

0800755c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 8093 	beq.w	800769a <xTaskPriorityInherit+0x13e>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4b4a      	ldr	r3, [pc, #296]	; (80076a4 <xTaskPriorityInherit+0x148>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	429a      	cmp	r2, r3
 8007580:	f080 8082 	bcs.w	8007688 <xTaskPriorityInherit+0x12c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	db06      	blt.n	800759a <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800758c:	4b45      	ldr	r3, [pc, #276]	; (80076a4 <xTaskPriorityInherit+0x148>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6959      	ldr	r1, [r3, #20]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a2:	4613      	mov	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4a3f      	ldr	r2, [pc, #252]	; (80076a8 <xTaskPriorityInherit+0x14c>)
 80075ac:	4413      	add	r3, r2
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d135      	bne.n	800761e <xTaskPriorityInherit+0xc2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fd fac4 	bl	8004b44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075bc:	4b39      	ldr	r3, [pc, #228]	; (80076a4 <xTaskPriorityInherit+0x148>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80075c6:	68b8      	ldr	r0, [r7, #8]
 80075c8:	f7f9 fd36 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	4b36      	ldr	r3, [pc, #216]	; (80076ac <xTaskPriorityInherit+0x150>)
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	4013      	ands	r3, r2
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d007      	beq.n	80075ec <xTaskPriorityInherit+0x90>
 80075dc:	68b8      	ldr	r0, [r7, #8]
 80075de:	f7f9 fd1e 	bl	800101e <prvTraceGetTaskNumberLow16>
 80075e2:	4603      	mov	r3, r0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fa f92e 	bl	8001848 <prvTraceStoreTaskReady>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	4b2f      	ldr	r3, [pc, #188]	; (80076b0 <xTaskPriorityInherit+0x154>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d903      	bls.n	8007600 <xTaskPriorityInherit+0xa4>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	4a2c      	ldr	r2, [pc, #176]	; (80076b0 <xTaskPriorityInherit+0x154>)
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007604:	4613      	mov	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4a26      	ldr	r2, [pc, #152]	; (80076a8 <xTaskPriorityInherit+0x14c>)
 800760e:	441a      	add	r2, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	3304      	adds	r3, #4
 8007614:	4619      	mov	r1, r3
 8007616:	4610      	mov	r0, r2
 8007618:	f7fd fa37 	bl	8004a8a <vListInsertEnd>
 800761c:	e004      	b.n	8007628 <xTaskPriorityInherit+0xcc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800761e:	4b21      	ldr	r3, [pc, #132]	; (80076a4 <xTaskPriorityInherit+0x148>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8007628:	68b8      	ldr	r0, [r7, #8]
 800762a:	f7f9 fd05 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 800762e:	4603      	mov	r3, r0
 8007630:	461a      	mov	r2, r3
 8007632:	4b1e      	ldr	r3, [pc, #120]	; (80076ac <xTaskPriorityInherit+0x150>)
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	4013      	ands	r3, r2
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d021      	beq.n	8007682 <xTaskPriorityInherit+0x126>
 800763e:	68b8      	ldr	r0, [r7, #8]
 8007640:	f7f9 fced 	bl	800101e <prvTraceGetTaskNumberLow16>
 8007644:	4603      	mov	r3, r0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461c      	mov	r4, r3
 800764a:	68b8      	ldr	r0, [r7, #8]
 800764c:	f7f9 fce7 	bl	800101e <prvTraceGetTaskNumberLow16>
 8007650:	4603      	mov	r3, r0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	4619      	mov	r1, r3
 8007656:	2003      	movs	r0, #3
 8007658:	f7fa fc40 	bl	8001edc <prvTraceGetPriorityProperty>
 800765c:	4603      	mov	r3, r0
 800765e:	4622      	mov	r2, r4
 8007660:	2103      	movs	r1, #3
 8007662:	208e      	movs	r0, #142	; 0x8e
 8007664:	f7fa fa66 	bl	8001b34 <prvTraceStoreKernelCallWithParam>
 8007668:	68b8      	ldr	r0, [r7, #8]
 800766a:	f7f9 fcd8 	bl	800101e <prvTraceGetTaskNumberLow16>
 800766e:	4603      	mov	r3, r0
 8007670:	b2d9      	uxtb	r1, r3
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <xTaskPriorityInherit+0x148>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	b2db      	uxtb	r3, r3
 800767a:	461a      	mov	r2, r3
 800767c:	2003      	movs	r0, #3
 800767e:	f7fa fbf1 	bl	8001e64 <prvTraceSetPriorityProperty>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007682:	2301      	movs	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e008      	b.n	800769a <xTaskPriorityInherit+0x13e>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800768c:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <xTaskPriorityInherit+0x148>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007692:	429a      	cmp	r2, r3
 8007694:	d201      	bcs.n	800769a <xTaskPriorityInherit+0x13e>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007696:	2301      	movs	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800769a:	68fb      	ldr	r3, [r7, #12]
	}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd90      	pop	{r4, r7, pc}
 80076a4:	20000798 	.word	0x20000798
 80076a8:	2000079c 	.word	0x2000079c
 80076ac:	20004aa8 	.word	0x20004aa8
 80076b0:	20000c74 	.word	0x20000c74

080076b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076b4:	b590      	push	{r4, r7, lr}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 8094 	beq.w	80077f4 <xTaskPriorityDisinherit+0x140>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076cc:	4b4c      	ldr	r3, [pc, #304]	; (8007800 <xTaskPriorityDisinherit+0x14c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d009      	beq.n	80076ea <xTaskPriorityDisinherit+0x36>
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e7fe      	b.n	80076e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d109      	bne.n	8007706 <xTaskPriorityDisinherit+0x52>
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60bb      	str	r3, [r7, #8]
 8007704:	e7fe      	b.n	8007704 <xTaskPriorityDisinherit+0x50>
			( pxTCB->uxMutexesHeld )--;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770a:	1e5a      	subs	r2, r3, #1
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007718:	429a      	cmp	r2, r3
 800771a:	d06b      	beq.n	80077f4 <xTaskPriorityDisinherit+0x140>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007720:	2b00      	cmp	r3, #0
 8007722:	d167      	bne.n	80077f4 <xTaskPriorityDisinherit+0x140>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	3304      	adds	r3, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f7fd fa0b 	bl	8004b44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800772e:	6938      	ldr	r0, [r7, #16]
 8007730:	f7f9 fc82 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8007734:	4603      	mov	r3, r0
 8007736:	461a      	mov	r2, r3
 8007738:	4b32      	ldr	r3, [pc, #200]	; (8007804 <xTaskPriorityDisinherit+0x150>)
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	4013      	ands	r3, r2
 800773e:	b29b      	uxth	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d020      	beq.n	8007786 <xTaskPriorityDisinherit+0xd2>
 8007744:	6938      	ldr	r0, [r7, #16]
 8007746:	f7f9 fc6a 	bl	800101e <prvTraceGetTaskNumberLow16>
 800774a:	4603      	mov	r3, r0
 800774c:	b2db      	uxtb	r3, r3
 800774e:	461c      	mov	r4, r3
 8007750:	6938      	ldr	r0, [r7, #16]
 8007752:	f7f9 fc64 	bl	800101e <prvTraceGetTaskNumberLow16>
 8007756:	4603      	mov	r3, r0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	4619      	mov	r1, r3
 800775c:	2003      	movs	r0, #3
 800775e:	f7fa fbbd 	bl	8001edc <prvTraceGetPriorityProperty>
 8007762:	4603      	mov	r3, r0
 8007764:	4622      	mov	r2, r4
 8007766:	2103      	movs	r1, #3
 8007768:	208f      	movs	r0, #143	; 0x8f
 800776a:	f7fa f9e3 	bl	8001b34 <prvTraceStoreKernelCallWithParam>
 800776e:	6938      	ldr	r0, [r7, #16]
 8007770:	f7f9 fc55 	bl	800101e <prvTraceGetTaskNumberLow16>
 8007774:	4603      	mov	r3, r0
 8007776:	b2d9      	uxtb	r1, r3
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777c:	b2db      	uxtb	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	2003      	movs	r0, #3
 8007782:	f7fa fb6f 	bl	8001e64 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800779a:	6938      	ldr	r0, [r7, #16]
 800779c:	f7f9 fc4c 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	4b17      	ldr	r3, [pc, #92]	; (8007804 <xTaskPriorityDisinherit+0x150>)
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	4013      	ands	r3, r2
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d007      	beq.n	80077c0 <xTaskPriorityDisinherit+0x10c>
 80077b0:	6938      	ldr	r0, [r7, #16]
 80077b2:	f7f9 fc34 	bl	800101e <prvTraceGetTaskNumberLow16>
 80077b6:	4603      	mov	r3, r0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fa f844 	bl	8001848 <prvTraceStoreTaskReady>
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c4:	4b10      	ldr	r3, [pc, #64]	; (8007808 <xTaskPriorityDisinherit+0x154>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d903      	bls.n	80077d4 <xTaskPriorityDisinherit+0x120>
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	4a0d      	ldr	r2, [pc, #52]	; (8007808 <xTaskPriorityDisinherit+0x154>)
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4a0a      	ldr	r2, [pc, #40]	; (800780c <xTaskPriorityDisinherit+0x158>)
 80077e2:	441a      	add	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f7fd f94d 	bl	8004a8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077f4:	697b      	ldr	r3, [r7, #20]
	}
 80077f6:	4618      	mov	r0, r3
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd90      	pop	{r4, r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000798 	.word	0x20000798
 8007804:	20004aa8 	.word	0x20004aa8
 8007808:	20000c74 	.word	0x20000c74
 800780c:	2000079c 	.word	0x2000079c

08007810 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b089      	sub	sp, #36	; 0x24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800781e:	2301      	movs	r3, #1
 8007820:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 80aa 	beq.w	800797e <vTaskPriorityDisinheritAfterTimeout+0x16e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	e7fe      	b.n	8007844 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d902      	bls.n	8007856 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	61fb      	str	r3, [r7, #28]
 8007854:	e002      	b.n	800785c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	429a      	cmp	r2, r3
 8007864:	f000 808b 	beq.w	800797e <vTaskPriorityDisinheritAfterTimeout+0x16e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	429a      	cmp	r2, r3
 8007870:	f040 8085 	bne.w	800797e <vTaskPriorityDisinheritAfterTimeout+0x16e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007874:	4b44      	ldr	r3, [pc, #272]	; (8007988 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	429a      	cmp	r2, r3
 800787c:	d109      	bne.n	8007892 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60bb      	str	r3, [r7, #8]
 8007890:	e7fe      	b.n	8007890 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8007892:	69b8      	ldr	r0, [r7, #24]
 8007894:	f7f9 fbd0 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 8007898:	4603      	mov	r3, r0
 800789a:	461a      	mov	r2, r3
 800789c:	4b3b      	ldr	r3, [pc, #236]	; (800798c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	4013      	ands	r3, r2
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d020      	beq.n	80078ea <vTaskPriorityDisinheritAfterTimeout+0xda>
 80078a8:	69b8      	ldr	r0, [r7, #24]
 80078aa:	f7f9 fbb8 	bl	800101e <prvTraceGetTaskNumberLow16>
 80078ae:	4603      	mov	r3, r0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	461c      	mov	r4, r3
 80078b4:	69b8      	ldr	r0, [r7, #24]
 80078b6:	f7f9 fbb2 	bl	800101e <prvTraceGetTaskNumberLow16>
 80078ba:	4603      	mov	r3, r0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	4619      	mov	r1, r3
 80078c0:	2003      	movs	r0, #3
 80078c2:	f7fa fb0b 	bl	8001edc <prvTraceGetPriorityProperty>
 80078c6:	4603      	mov	r3, r0
 80078c8:	4622      	mov	r2, r4
 80078ca:	2103      	movs	r1, #3
 80078cc:	208f      	movs	r0, #143	; 0x8f
 80078ce:	f7fa f931 	bl	8001b34 <prvTraceStoreKernelCallWithParam>
 80078d2:	69b8      	ldr	r0, [r7, #24]
 80078d4:	f7f9 fba3 	bl	800101e <prvTraceGetTaskNumberLow16>
 80078d8:	4603      	mov	r3, r0
 80078da:	b2d9      	uxtb	r1, r3
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	2003      	movs	r0, #3
 80078e6:	f7fa fabd 	bl	8001e64 <prvTraceSetPriorityProperty>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	db04      	blt.n	8007908 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	6959      	ldr	r1, [r3, #20]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4a1e      	ldr	r2, [pc, #120]	; (8007990 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8007918:	4413      	add	r3, r2
 800791a:	4299      	cmp	r1, r3
 800791c:	d12f      	bne.n	800797e <vTaskPriorityDisinheritAfterTimeout+0x16e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	3304      	adds	r3, #4
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd f90e 	bl	8004b44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007928:	69b8      	ldr	r0, [r7, #24]
 800792a:	f7f9 fb85 	bl	8001038 <prvTraceGetTaskNumberHigh16>
 800792e:	4603      	mov	r3, r0
 8007930:	461a      	mov	r2, r3
 8007932:	4b16      	ldr	r3, [pc, #88]	; (800798c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	4013      	ands	r3, r2
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d007      	beq.n	800794e <vTaskPriorityDisinheritAfterTimeout+0x13e>
 800793e:	69b8      	ldr	r0, [r7, #24]
 8007940:	f7f9 fb6d 	bl	800101e <prvTraceGetTaskNumberLow16>
 8007944:	4603      	mov	r3, r0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	4618      	mov	r0, r3
 800794a:	f7f9 ff7d 	bl	8001848 <prvTraceStoreTaskReady>
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <vTaskPriorityDisinheritAfterTimeout+0x152>
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	4a0d      	ldr	r2, [pc, #52]	; (8007994 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4a08      	ldr	r2, [pc, #32]	; (8007990 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8007970:	441a      	add	r2, r3
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	3304      	adds	r3, #4
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f7fd f886 	bl	8004a8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800797e:	bf00      	nop
 8007980:	3724      	adds	r7, #36	; 0x24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd90      	pop	{r4, r7, pc}
 8007986:	bf00      	nop
 8007988:	20000798 	.word	0x20000798
 800798c:	20004aa8 	.word	0x20004aa8
 8007990:	2000079c 	.word	0x2000079c
 8007994:	20000c74 	.word	0x20000c74

08007998 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800799c:	4b07      	ldr	r3, [pc, #28]	; (80079bc <pvTaskIncrementMutexHeldCount+0x24>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <pvTaskIncrementMutexHeldCount+0x24>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079aa:	3201      	adds	r2, #1
 80079ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80079ae:	4b03      	ldr	r3, [pc, #12]	; (80079bc <pvTaskIncrementMutexHeldCount+0x24>)
 80079b0:	681b      	ldr	r3, [r3, #0]
	}
 80079b2:	4618      	mov	r0, r3
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	20000798 	.word	0x20000798

080079c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079ca:	4b21      	ldr	r3, [pc, #132]	; (8007a50 <prvAddCurrentTaskToDelayedList+0x90>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079d0:	4b20      	ldr	r3, [pc, #128]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fd f8b4 	bl	8004b44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e2:	d10a      	bne.n	80079fa <prvAddCurrentTaskToDelayedList+0x3a>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d007      	beq.n	80079fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ea:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	4819      	ldr	r0, [pc, #100]	; (8007a58 <prvAddCurrentTaskToDelayedList+0x98>)
 80079f4:	f7fd f849 	bl	8004a8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079f8:	e026      	b.n	8007a48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4413      	add	r3, r2
 8007a00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a02:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d209      	bcs.n	8007a26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a12:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4610      	mov	r0, r2
 8007a20:	f7fd f857 	bl	8004ad2 <vListInsert>
}
 8007a24:	e010      	b.n	8007a48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a26:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4619      	mov	r1, r3
 8007a32:	4610      	mov	r0, r2
 8007a34:	f7fd f84d 	bl	8004ad2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d202      	bcs.n	8007a48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a42:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6013      	str	r3, [r2, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000c70 	.word	0x20000c70
 8007a54:	20000798 	.word	0x20000798
 8007a58:	20000c58 	.word	0x20000c58
 8007a5c:	20000c28 	.word	0x20000c28
 8007a60:	20000c24 	.word	0x20000c24
 8007a64:	20000c8c 	.word	0x20000c8c

08007a68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	; 0x28
 8007a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a72:	f000 faff 	bl	8008074 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a76:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <xTimerCreateTimerTask+0x80>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d021      	beq.n	8007ac2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a86:	1d3a      	adds	r2, r7, #4
 8007a88:	f107 0108 	add.w	r1, r7, #8
 8007a8c:	f107 030c 	add.w	r3, r7, #12
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fc ffb3 	bl	80049fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a96:	6879      	ldr	r1, [r7, #4]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	9202      	str	r2, [sp, #8]
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	460a      	mov	r2, r1
 8007aa8:	4910      	ldr	r1, [pc, #64]	; (8007aec <xTimerCreateTimerTask+0x84>)
 8007aaa:	4811      	ldr	r0, [pc, #68]	; (8007af0 <xTimerCreateTimerTask+0x88>)
 8007aac:	f7fe fd7a 	bl	80065a4 <xTaskCreateStatic>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <xTimerCreateTimerTask+0x8c>)
 8007ab4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ab6:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <xTimerCreateTimerTask+0x8c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <xTimerCreateTimerTask+0x74>
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	e7fe      	b.n	8007ada <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007adc:	697b      	ldr	r3, [r7, #20]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000cc8 	.word	0x20000cc8
 8007aec:	0800a9a4 	.word	0x0800a9a4
 8007af0:	08007c29 	.word	0x08007c29
 8007af4:	20000ccc 	.word	0x20000ccc

08007af8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d109      	bne.n	8007b24 <xTimerGenericCommand+0x2c>
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	623b      	str	r3, [r7, #32]
 8007b22:	e7fe      	b.n	8007b22 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b24:	4b19      	ldr	r3, [pc, #100]	; (8007b8c <xTimerGenericCommand+0x94>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d02a      	beq.n	8007b82 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2b05      	cmp	r3, #5
 8007b3c:	dc18      	bgt.n	8007b70 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b3e:	f7ff fcef 	bl	8007520 <xTaskGetSchedulerState>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d109      	bne.n	8007b5c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b48:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <xTimerGenericCommand+0x94>)
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	f107 0110 	add.w	r1, r7, #16
 8007b50:	2300      	movs	r3, #0
 8007b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b54:	f7fd fa56 	bl	8005004 <xQueueGenericSend>
 8007b58:	6278      	str	r0, [r7, #36]	; 0x24
 8007b5a:	e012      	b.n	8007b82 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <xTimerGenericCommand+0x94>)
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	f107 0110 	add.w	r1, r7, #16
 8007b64:	2300      	movs	r3, #0
 8007b66:	2200      	movs	r2, #0
 8007b68:	f7fd fa4c 	bl	8005004 <xQueueGenericSend>
 8007b6c:	6278      	str	r0, [r7, #36]	; 0x24
 8007b6e:	e008      	b.n	8007b82 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <xTimerGenericCommand+0x94>)
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	f107 0110 	add.w	r1, r7, #16
 8007b78:	2300      	movs	r3, #0
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	f7fd fc4c 	bl	8005418 <xQueueGenericSendFromISR>
 8007b80:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3728      	adds	r7, #40	; 0x28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20000cc8 	.word	0x20000cc8

08007b90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9a:	4b22      	ldr	r3, [pc, #136]	; (8007c24 <prvProcessExpiredTimer+0x94>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fc ffcb 	bl	8004b44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d021      	beq.n	8007c00 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	18d1      	adds	r1, r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	6978      	ldr	r0, [r7, #20]
 8007bca:	f000 f8d1 	bl	8007d70 <prvInsertTimerInActiveList>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01e      	beq.n	8007c12 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	2100      	movs	r1, #0
 8007bde:	6978      	ldr	r0, [r7, #20]
 8007be0:	f7ff ff8a 	bl	8007af8 <xTimerGenericCommand>
 8007be4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d112      	bne.n	8007c12 <prvProcessExpiredTimer+0x82>
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e7fe      	b.n	8007bfe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c06:	f023 0301 	bic.w	r3, r3, #1
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	6978      	ldr	r0, [r7, #20]
 8007c18:	4798      	blx	r3
}
 8007c1a:	bf00      	nop
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000cc0 	.word	0x20000cc0

08007c28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c30:	f107 0308 	add.w	r3, r7, #8
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 f857 	bl	8007ce8 <prvGetNextExpireTime>
 8007c3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f803 	bl	8007c4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c46:	f000 f8d5 	bl	8007df4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c4a:	e7f1      	b.n	8007c30 <prvTimerTask+0x8>

08007c4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c56:	f7fe ff99 	bl	8006b8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 f866 	bl	8007d30 <prvSampleTimeNow>
 8007c64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d130      	bne.n	8007cce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <prvProcessTimerOrBlockTask+0x3c>
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d806      	bhi.n	8007c88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c7a:	f7fe ff95 	bl	8006ba8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff ff85 	bl	8007b90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c86:	e024      	b.n	8007cd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c8e:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <prvProcessTimerOrBlockTask+0x90>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <prvProcessTimerOrBlockTask+0x50>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <prvProcessTimerOrBlockTask+0x52>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ca0:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <prvProcessTimerOrBlockTask+0x94>)
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4619      	mov	r1, r3
 8007cae:	f7fe fc45 	bl	800653c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007cb2:	f7fe ff79 	bl	8006ba8 <xTaskResumeAll>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007cbc:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <prvProcessTimerOrBlockTask+0x98>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	f3bf 8f6f 	isb	sy
}
 8007ccc:	e001      	b.n	8007cd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007cce:	f7fe ff6b 	bl	8006ba8 <xTaskResumeAll>
}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000cc4 	.word	0x20000cc4
 8007ce0:	20000cc8 	.word	0x20000cc8
 8007ce4:	e000ed04 	.word	0xe000ed04

08007ce8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cf0:	4b0e      	ldr	r3, [pc, #56]	; (8007d2c <prvGetNextExpireTime+0x44>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <prvGetNextExpireTime+0x16>
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	e000      	b.n	8007d00 <prvGetNextExpireTime+0x18>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d105      	bne.n	8007d18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d0c:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <prvGetNextExpireTime+0x44>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	e001      	b.n	8007d1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	20000cc0 	.word	0x20000cc0

08007d30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d38:	f7fe ffe8 	bl	8006d0c <xTaskGetTickCount>
 8007d3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d3e:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <prvSampleTimeNow+0x3c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d205      	bcs.n	8007d54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d48:	f000 f930 	bl	8007fac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	e002      	b.n	8007d5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d5a:	4a04      	ldr	r2, [pc, #16]	; (8007d6c <prvSampleTimeNow+0x3c>)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d60:	68fb      	ldr	r3, [r7, #12]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000cd0 	.word	0x20000cd0

08007d70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d812      	bhi.n	8007dbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	1ad2      	subs	r2, r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d302      	bcc.n	8007daa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	e01b      	b.n	8007de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007daa:	4b10      	ldr	r3, [pc, #64]	; (8007dec <prvInsertTimerInActiveList+0x7c>)
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7fc fe8c 	bl	8004ad2 <vListInsert>
 8007dba:	e012      	b.n	8007de2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d206      	bcs.n	8007dd2 <prvInsertTimerInActiveList+0x62>
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d302      	bcc.n	8007dd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	e007      	b.n	8007de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <prvInsertTimerInActiveList+0x80>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7fc fe78 	bl	8004ad2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007de2:	697b      	ldr	r3, [r7, #20]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20000cc4 	.word	0x20000cc4
 8007df0:	20000cc0 	.word	0x20000cc0

08007df4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08e      	sub	sp, #56	; 0x38
 8007df8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dfa:	e0c6      	b.n	8007f8a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	da17      	bge.n	8007e32 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e02:	1d3b      	adds	r3, r7, #4
 8007e04:	3304      	adds	r3, #4
 8007e06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <prvProcessReceivedCommands+0x2e>
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61fb      	str	r3, [r7, #28]
 8007e20:	e7fe      	b.n	8007e20 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e28:	6850      	ldr	r0, [r2, #4]
 8007e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e2c:	6892      	ldr	r2, [r2, #8]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f2c0 80a7 	blt.w	8007f88 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fc fe7a 	bl	8004b44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e50:	463b      	mov	r3, r7
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff ff6c 	bl	8007d30 <prvSampleTimeNow>
 8007e58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b09      	cmp	r3, #9
 8007e5e:	f200 8094 	bhi.w	8007f8a <prvProcessReceivedCommands+0x196>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <prvProcessReceivedCommands+0x74>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e91 	.word	0x08007e91
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007e91 	.word	0x08007e91
 8007e74:	08007f03 	.word	0x08007f03
 8007e78:	08007f17 	.word	0x08007f17
 8007e7c:	08007f5f 	.word	0x08007f5f
 8007e80:	08007e91 	.word	0x08007e91
 8007e84:	08007e91 	.word	0x08007e91
 8007e88:	08007f03 	.word	0x08007f03
 8007e8c:	08007f17 	.word	0x08007f17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	18d1      	adds	r1, r2, r3
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eb0:	f7ff ff5e 	bl	8007d70 <prvInsertTimerInActiveList>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d067      	beq.n	8007f8a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d05c      	beq.n	8007f8a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	441a      	add	r2, r3
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2300      	movs	r3, #0
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee2:	f7ff fe09 	bl	8007af8 <xTimerGenericCommand>
 8007ee6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d14d      	bne.n	8007f8a <prvProcessReceivedCommands+0x196>
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	e7fe      	b.n	8007f00 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007f14:	e039      	b.n	8007f8a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <prvProcessReceivedCommands+0x156>
 8007f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	e7fe      	b.n	8007f48 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	18d1      	adds	r1, r2, r3
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f58:	f7ff ff0a 	bl	8007d70 <prvInsertTimerInActiveList>
					break;
 8007f5c:	e015      	b.n	8007f8a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f6e:	f000 fbe1 	bl	8008734 <vPortFree>
 8007f72:	e00a      	b.n	8007f8a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f7a:	f023 0301 	bic.w	r3, r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f86:	e000      	b.n	8007f8a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007f88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f8a:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <prvProcessReceivedCommands+0x1b4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	1d39      	adds	r1, r7, #4
 8007f90:	2200      	movs	r2, #0
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fd fb44 	bl	8005620 <xQueueReceive>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f47f af2e 	bne.w	8007dfc <prvProcessReceivedCommands+0x8>
	}
}
 8007fa0:	bf00      	nop
 8007fa2:	3730      	adds	r7, #48	; 0x30
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20000cc8 	.word	0x20000cc8

08007fac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fb2:	e047      	b.n	8008044 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fb4:	4b2d      	ldr	r3, [pc, #180]	; (800806c <prvSwitchTimerLists+0xc0>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fbe:	4b2b      	ldr	r3, [pc, #172]	; (800806c <prvSwitchTimerLists+0xc0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fc fdb9 	bl	8004b44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d02d      	beq.n	8008044 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d90e      	bls.n	8008018 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008006:	4b19      	ldr	r3, [pc, #100]	; (800806c <prvSwitchTimerLists+0xc0>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3304      	adds	r3, #4
 800800e:	4619      	mov	r1, r3
 8008010:	4610      	mov	r0, r2
 8008012:	f7fc fd5e 	bl	8004ad2 <vListInsert>
 8008016:	e015      	b.n	8008044 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008018:	2300      	movs	r3, #0
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	2300      	movs	r3, #0
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	2100      	movs	r1, #0
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff fd68 	bl	8007af8 <xTimerGenericCommand>
 8008028:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d109      	bne.n	8008044 <prvSwitchTimerLists+0x98>
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	603b      	str	r3, [r7, #0]
 8008042:	e7fe      	b.n	8008042 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008044:	4b09      	ldr	r3, [pc, #36]	; (800806c <prvSwitchTimerLists+0xc0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1b2      	bne.n	8007fb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800804e:	4b07      	ldr	r3, [pc, #28]	; (800806c <prvSwitchTimerLists+0xc0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <prvSwitchTimerLists+0xc4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a04      	ldr	r2, [pc, #16]	; (800806c <prvSwitchTimerLists+0xc0>)
 800805a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800805c:	4a04      	ldr	r2, [pc, #16]	; (8008070 <prvSwitchTimerLists+0xc4>)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	6013      	str	r3, [r2, #0]
}
 8008062:	bf00      	nop
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000cc0 	.word	0x20000cc0
 8008070:	20000cc4 	.word	0x20000cc4

08008074 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800807a:	f000 f96f 	bl	800835c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800807e:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <prvCheckForValidListAndQueue+0x60>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d120      	bne.n	80080c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008086:	4814      	ldr	r0, [pc, #80]	; (80080d8 <prvCheckForValidListAndQueue+0x64>)
 8008088:	f7fc fcd2 	bl	8004a30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800808c:	4813      	ldr	r0, [pc, #76]	; (80080dc <prvCheckForValidListAndQueue+0x68>)
 800808e:	f7fc fccf 	bl	8004a30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <prvCheckForValidListAndQueue+0x6c>)
 8008094:	4a10      	ldr	r2, [pc, #64]	; (80080d8 <prvCheckForValidListAndQueue+0x64>)
 8008096:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008098:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <prvCheckForValidListAndQueue+0x70>)
 800809a:	4a10      	ldr	r2, [pc, #64]	; (80080dc <prvCheckForValidListAndQueue+0x68>)
 800809c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800809e:	2300      	movs	r3, #0
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <prvCheckForValidListAndQueue+0x74>)
 80080a4:	4a11      	ldr	r2, [pc, #68]	; (80080ec <prvCheckForValidListAndQueue+0x78>)
 80080a6:	2110      	movs	r1, #16
 80080a8:	200a      	movs	r0, #10
 80080aa:	f7fc fddd 	bl	8004c68 <xQueueGenericCreateStatic>
 80080ae:	4602      	mov	r2, r0
 80080b0:	4b08      	ldr	r3, [pc, #32]	; (80080d4 <prvCheckForValidListAndQueue+0x60>)
 80080b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080b4:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <prvCheckForValidListAndQueue+0x60>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080bc:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <prvCheckForValidListAndQueue+0x60>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	490b      	ldr	r1, [pc, #44]	; (80080f0 <prvCheckForValidListAndQueue+0x7c>)
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fa00 	bl	80064c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080c8:	f000 f976 	bl	80083b8 <vPortExitCritical>
}
 80080cc:	bf00      	nop
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000cc8 	.word	0x20000cc8
 80080d8:	20000c98 	.word	0x20000c98
 80080dc:	20000cac 	.word	0x20000cac
 80080e0:	20000cc0 	.word	0x20000cc0
 80080e4:	20000cc4 	.word	0x20000cc4
 80080e8:	20000d74 	.word	0x20000d74
 80080ec:	20000cd4 	.word	0x20000cd4
 80080f0:	0800a9ac 	.word	0x0800a9ac

080080f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3b04      	subs	r3, #4
 8008104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800810c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3b04      	subs	r3, #4
 8008112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f023 0201 	bic.w	r2, r3, #1
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3b04      	subs	r3, #4
 8008122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008124:	4a0c      	ldr	r2, [pc, #48]	; (8008158 <pxPortInitialiseStack+0x64>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b14      	subs	r3, #20
 800812e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3b04      	subs	r3, #4
 800813a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f06f 0202 	mvn.w	r2, #2
 8008142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3b20      	subs	r3, #32
 8008148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800814a:	68fb      	ldr	r3, [r7, #12]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	0800815d 	.word	0x0800815d

0800815c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008166:	4b11      	ldr	r3, [pc, #68]	; (80081ac <prvTaskExitError+0x50>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816e:	d009      	beq.n	8008184 <prvTaskExitError+0x28>
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	e7fe      	b.n	8008182 <prvTaskExitError+0x26>
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008196:	bf00      	nop
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0fc      	beq.n	8008198 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800819e:	bf00      	nop
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000018 	.word	0x20000018

080081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <pxCurrentTCBConst2>)
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	f380 8809 	msr	PSP, r0
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	4770      	bx	lr
 80081cc:	f3af 8000 	nop.w

080081d0 <pxCurrentTCBConst2>:
 80081d0:	20000798 	.word	0x20000798
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081d8:	4808      	ldr	r0, [pc, #32]	; (80081fc <prvPortStartFirstTask+0x24>)
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f380 8808 	msr	MSP, r0
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8814 	msr	CONTROL, r0
 80081ea:	b662      	cpsie	i
 80081ec:	b661      	cpsie	f
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	df00      	svc	0
 80081f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081fa:	bf00      	nop
 80081fc:	e000ed08 	.word	0xe000ed08

08008200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008206:	4b4c      	ldr	r3, [pc, #304]	; (8008338 <xPortStartScheduler+0x138>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a4c      	ldr	r2, [pc, #304]	; (800833c <xPortStartScheduler+0x13c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d109      	bne.n	8008224 <xPortStartScheduler+0x24>
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	61bb      	str	r3, [r7, #24]
 8008222:	e7fe      	b.n	8008222 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008224:	4b44      	ldr	r3, [pc, #272]	; (8008338 <xPortStartScheduler+0x138>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a45      	ldr	r2, [pc, #276]	; (8008340 <xPortStartScheduler+0x140>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d109      	bne.n	8008242 <xPortStartScheduler+0x42>
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	e7fe      	b.n	8008240 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008242:	4b40      	ldr	r3, [pc, #256]	; (8008344 <xPortStartScheduler+0x144>)
 8008244:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	22ff      	movs	r2, #255	; 0xff
 8008252:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008264:	b2da      	uxtb	r2, r3
 8008266:	4b38      	ldr	r3, [pc, #224]	; (8008348 <xPortStartScheduler+0x148>)
 8008268:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800826a:	4b38      	ldr	r3, [pc, #224]	; (800834c <xPortStartScheduler+0x14c>)
 800826c:	2207      	movs	r2, #7
 800826e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008270:	e009      	b.n	8008286 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008272:	4b36      	ldr	r3, [pc, #216]	; (800834c <xPortStartScheduler+0x14c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3b01      	subs	r3, #1
 8008278:	4a34      	ldr	r2, [pc, #208]	; (800834c <xPortStartScheduler+0x14c>)
 800827a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	b2db      	uxtb	r3, r3
 8008284:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	d0ef      	beq.n	8008272 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8008292:	4b2e      	ldr	r3, [pc, #184]	; (800834c <xPortStartScheduler+0x14c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f1c3 0307 	rsb	r3, r3, #7
 800829a:	2b04      	cmp	r3, #4
 800829c:	d009      	beq.n	80082b2 <xPortStartScheduler+0xb2>
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	e7fe      	b.n	80082b0 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082b2:	4b26      	ldr	r3, [pc, #152]	; (800834c <xPortStartScheduler+0x14c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f1c3 0307 	rsb	r3, r3, #7
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d009      	beq.n	80082d2 <xPortStartScheduler+0xd2>
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	e7fe      	b.n	80082d0 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082d2:	4b1e      	ldr	r3, [pc, #120]	; (800834c <xPortStartScheduler+0x14c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	4a1c      	ldr	r2, [pc, #112]	; (800834c <xPortStartScheduler+0x14c>)
 80082da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082dc:	4b1b      	ldr	r3, [pc, #108]	; (800834c <xPortStartScheduler+0x14c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082e4:	4a19      	ldr	r2, [pc, #100]	; (800834c <xPortStartScheduler+0x14c>)
 80082e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082f0:	4b17      	ldr	r3, [pc, #92]	; (8008350 <xPortStartScheduler+0x150>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a16      	ldr	r2, [pc, #88]	; (8008350 <xPortStartScheduler+0x150>)
 80082f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082fc:	4b14      	ldr	r3, [pc, #80]	; (8008350 <xPortStartScheduler+0x150>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a13      	ldr	r2, [pc, #76]	; (8008350 <xPortStartScheduler+0x150>)
 8008302:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008306:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008308:	f000 f8d6 	bl	80084b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800830c:	4b11      	ldr	r3, [pc, #68]	; (8008354 <xPortStartScheduler+0x154>)
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008312:	f000 f8f5 	bl	8008500 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008316:	4b10      	ldr	r3, [pc, #64]	; (8008358 <xPortStartScheduler+0x158>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a0f      	ldr	r2, [pc, #60]	; (8008358 <xPortStartScheduler+0x158>)
 800831c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008320:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008322:	f7ff ff59 	bl	80081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008326:	f7fe fdeb 	bl	8006f00 <vTaskSwitchContext>
	prvTaskExitError();
 800832a:	f7ff ff17 	bl	800815c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	e000ed00 	.word	0xe000ed00
 800833c:	410fc271 	.word	0x410fc271
 8008340:	410fc270 	.word	0x410fc270
 8008344:	e000e400 	.word	0xe000e400
 8008348:	20000dc4 	.word	0x20000dc4
 800834c:	20000dc8 	.word	0x20000dc8
 8008350:	e000ed20 	.word	0xe000ed20
 8008354:	20000018 	.word	0x20000018
 8008358:	e000ef34 	.word	0xe000ef34

0800835c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008374:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <vPortEnterCritical+0x54>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	4a0d      	ldr	r2, [pc, #52]	; (80083b0 <vPortEnterCritical+0x54>)
 800837c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800837e:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <vPortEnterCritical+0x54>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d10e      	bne.n	80083a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008386:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <vPortEnterCritical+0x58>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d009      	beq.n	80083a4 <vPortEnterCritical+0x48>
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	603b      	str	r3, [r7, #0]
 80083a2:	e7fe      	b.n	80083a2 <vPortEnterCritical+0x46>
	}
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	20000018 	.word	0x20000018
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083be:	4b11      	ldr	r3, [pc, #68]	; (8008404 <vPortExitCritical+0x4c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d109      	bne.n	80083da <vPortExitCritical+0x22>
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	607b      	str	r3, [r7, #4]
 80083d8:	e7fe      	b.n	80083d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80083da:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <vPortExitCritical+0x4c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3b01      	subs	r3, #1
 80083e0:	4a08      	ldr	r2, [pc, #32]	; (8008404 <vPortExitCritical+0x4c>)
 80083e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083e4:	4b07      	ldr	r3, [pc, #28]	; (8008404 <vPortExitCritical+0x4c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d104      	bne.n	80083f6 <vPortExitCritical+0x3e>
 80083ec:	2300      	movs	r3, #0
 80083ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	20000018 	.word	0x20000018
	...

08008410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008410:	f3ef 8009 	mrs	r0, PSP
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4b15      	ldr	r3, [pc, #84]	; (8008470 <pxCurrentTCBConst>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	f01e 0f10 	tst.w	lr, #16
 8008420:	bf08      	it	eq
 8008422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	6010      	str	r0, [r2, #0]
 800842c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008434:	f380 8811 	msr	BASEPRI, r0
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f7fe fd5e 	bl	8006f00 <vTaskSwitchContext>
 8008444:	f04f 0000 	mov.w	r0, #0
 8008448:	f380 8811 	msr	BASEPRI, r0
 800844c:	bc09      	pop	{r0, r3}
 800844e:	6819      	ldr	r1, [r3, #0]
 8008450:	6808      	ldr	r0, [r1, #0]
 8008452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008456:	f01e 0f10 	tst.w	lr, #16
 800845a:	bf08      	it	eq
 800845c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008460:	f380 8809 	msr	PSP, r0
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst>:
 8008470:	20000798 	.word	0x20000798
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008490:	f7fe fc4c 	bl	8006d2c <xTaskIncrementTick>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800849a:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <xPortSysTickHandler+0x3c>)
 800849c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	2300      	movs	r3, #0
 80084a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	e000ed04 	.word	0xe000ed04

080084b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084bc:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <vPortSetupTimerInterrupt+0x34>)
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084c2:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <vPortSetupTimerInterrupt+0x38>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084c8:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <vPortSetupTimerInterrupt+0x3c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a0a      	ldr	r2, [pc, #40]	; (80084f8 <vPortSetupTimerInterrupt+0x40>)
 80084ce:	fba2 2303 	umull	r2, r3, r2, r3
 80084d2:	099b      	lsrs	r3, r3, #6
 80084d4:	4a09      	ldr	r2, [pc, #36]	; (80084fc <vPortSetupTimerInterrupt+0x44>)
 80084d6:	3b01      	subs	r3, #1
 80084d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084da:	4b04      	ldr	r3, [pc, #16]	; (80084ec <vPortSetupTimerInterrupt+0x34>)
 80084dc:	2207      	movs	r2, #7
 80084de:	601a      	str	r2, [r3, #0]
}
 80084e0:	bf00      	nop
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	e000e010 	.word	0xe000e010
 80084f0:	e000e018 	.word	0xe000e018
 80084f4:	20000000 	.word	0x20000000
 80084f8:	10624dd3 	.word	0x10624dd3
 80084fc:	e000e014 	.word	0xe000e014

08008500 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008500:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008510 <vPortEnableVFP+0x10>
 8008504:	6801      	ldr	r1, [r0, #0]
 8008506:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800850a:	6001      	str	r1, [r0, #0]
 800850c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800850e:	bf00      	nop
 8008510:	e000ed88 	.word	0xe000ed88

08008514 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800851a:	f3ef 8305 	mrs	r3, IPSR
 800851e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b0f      	cmp	r3, #15
 8008524:	d913      	bls.n	800854e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008526:	4a16      	ldr	r2, [pc, #88]	; (8008580 <vPortValidateInterruptPriority+0x6c>)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008530:	4b14      	ldr	r3, [pc, #80]	; (8008584 <vPortValidateInterruptPriority+0x70>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	7afa      	ldrb	r2, [r7, #11]
 8008536:	429a      	cmp	r2, r3
 8008538:	d209      	bcs.n	800854e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	607b      	str	r3, [r7, #4]
 800854c:	e7fe      	b.n	800854c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800854e:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <vPortValidateInterruptPriority+0x74>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <vPortValidateInterruptPriority+0x78>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d909      	bls.n	8008572 <vPortValidateInterruptPriority+0x5e>
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	e7fe      	b.n	8008570 <vPortValidateInterruptPriority+0x5c>
	}
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	e000e3f0 	.word	0xe000e3f0
 8008584:	20000dc4 	.word	0x20000dc4
 8008588:	e000ed0c 	.word	0xe000ed0c
 800858c:	20000dc8 	.word	0x20000dc8

08008590 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08a      	sub	sp, #40	; 0x28
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008598:	2300      	movs	r3, #0
 800859a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800859c:	f7fe faf6 	bl	8006b8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085a0:	4b5f      	ldr	r3, [pc, #380]	; (8008720 <pvPortMalloc+0x190>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085a8:	f000 f924 	bl	80087f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085ac:	4b5d      	ldr	r3, [pc, #372]	; (8008724 <pvPortMalloc+0x194>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4013      	ands	r3, r2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f040 808c 	bne.w	80086d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01c      	beq.n	80085fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80085c0:	2208      	movs	r2, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4413      	add	r3, r2
 80085c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d013      	beq.n	80085fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f023 0307 	bic.w	r3, r3, #7
 80085d8:	3308      	adds	r3, #8
 80085da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f003 0307 	and.w	r3, r3, #7
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <pvPortMalloc+0x6a>
 80085e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e7fe      	b.n	80085f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d068      	beq.n	80086d2 <pvPortMalloc+0x142>
 8008600:	4b49      	ldr	r3, [pc, #292]	; (8008728 <pvPortMalloc+0x198>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	429a      	cmp	r2, r3
 8008608:	d863      	bhi.n	80086d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800860a:	4b48      	ldr	r3, [pc, #288]	; (800872c <pvPortMalloc+0x19c>)
 800860c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800860e:	4b47      	ldr	r3, [pc, #284]	; (800872c <pvPortMalloc+0x19c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008614:	e004      	b.n	8008620 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d903      	bls.n	8008632 <pvPortMalloc+0xa2>
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f1      	bne.n	8008616 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008632:	4b3b      	ldr	r3, [pc, #236]	; (8008720 <pvPortMalloc+0x190>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008638:	429a      	cmp	r2, r3
 800863a:	d04a      	beq.n	80086d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2208      	movs	r2, #8
 8008642:	4413      	add	r3, r2
 8008644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	1ad2      	subs	r2, r2, r3
 8008656:	2308      	movs	r3, #8
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	429a      	cmp	r2, r3
 800865c:	d91e      	bls.n	800869c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800865e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	2b00      	cmp	r3, #0
 800866e:	d009      	beq.n	8008684 <pvPortMalloc+0xf4>
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	e7fe      	b.n	8008682 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	1ad2      	subs	r2, r2, r3
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008696:	69b8      	ldr	r0, [r7, #24]
 8008698:	f000 f90e 	bl	80088b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800869c:	4b22      	ldr	r3, [pc, #136]	; (8008728 <pvPortMalloc+0x198>)
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	4a20      	ldr	r2, [pc, #128]	; (8008728 <pvPortMalloc+0x198>)
 80086a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086aa:	4b1f      	ldr	r3, [pc, #124]	; (8008728 <pvPortMalloc+0x198>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	4b20      	ldr	r3, [pc, #128]	; (8008730 <pvPortMalloc+0x1a0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d203      	bcs.n	80086be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086b6:	4b1c      	ldr	r3, [pc, #112]	; (8008728 <pvPortMalloc+0x198>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a1d      	ldr	r2, [pc, #116]	; (8008730 <pvPortMalloc+0x1a0>)
 80086bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	4b18      	ldr	r3, [pc, #96]	; (8008724 <pvPortMalloc+0x194>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	431a      	orrs	r2, r3
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d006      	beq.n	80086e6 <pvPortMalloc+0x156>
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4619      	mov	r1, r3
 80086de:	2094      	movs	r0, #148	; 0x94
 80086e0:	f7f9 f916 	bl	8001910 <vTraceStoreMemMangEvent>
 80086e4:	e005      	b.n	80086f2 <pvPortMalloc+0x162>
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	4619      	mov	r1, r3
 80086ec:	20e8      	movs	r0, #232	; 0xe8
 80086ee:	f7f9 f90f 	bl	8001910 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 80086f2:	f7fe fa59 	bl	8006ba8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	f003 0307 	and.w	r3, r3, #7
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d009      	beq.n	8008714 <pvPortMalloc+0x184>
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	e7fe      	b.n	8008712 <pvPortMalloc+0x182>
	return pvReturn;
 8008714:	69fb      	ldr	r3, [r7, #28]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3728      	adds	r7, #40	; 0x28
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	200049d4 	.word	0x200049d4
 8008724:	200049e0 	.word	0x200049e0
 8008728:	200049d8 	.word	0x200049d8
 800872c:	200049cc 	.word	0x200049cc
 8008730:	200049dc 	.word	0x200049dc

08008734 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d04e      	beq.n	80087e4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008746:	2308      	movs	r3, #8
 8008748:	425b      	negs	r3, r3
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	4413      	add	r3, r2
 800874e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	4b24      	ldr	r3, [pc, #144]	; (80087ec <vPortFree+0xb8>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4013      	ands	r3, r2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d109      	bne.n	8008776 <vPortFree+0x42>
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	e7fe      	b.n	8008774 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d009      	beq.n	8008792 <vPortFree+0x5e>
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	60bb      	str	r3, [r7, #8]
 8008790:	e7fe      	b.n	8008790 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	4b15      	ldr	r3, [pc, #84]	; (80087ec <vPortFree+0xb8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4013      	ands	r3, r2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d021      	beq.n	80087e4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d11d      	bne.n	80087e4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <vPortFree+0xb8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	401a      	ands	r2, r3
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087b8:	f7fe f9e8 	bl	8006b8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	4b0b      	ldr	r3, [pc, #44]	; (80087f0 <vPortFree+0xbc>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4413      	add	r3, r2
 80087c6:	4a0a      	ldr	r2, [pc, #40]	; (80087f0 <vPortFree+0xbc>)
 80087c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	425b      	negs	r3, r3
 80087d2:	461a      	mov	r2, r3
 80087d4:	2096      	movs	r0, #150	; 0x96
 80087d6:	f7f9 f89b 	bl	8001910 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087da:	6938      	ldr	r0, [r7, #16]
 80087dc:	f000 f86c 	bl	80088b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80087e0:	f7fe f9e2 	bl	8006ba8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087e4:	bf00      	nop
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	200049e0 	.word	0x200049e0
 80087f0:	200049d8 	.word	0x200049d8

080087f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008800:	4b27      	ldr	r3, [pc, #156]	; (80088a0 <prvHeapInit+0xac>)
 8008802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00c      	beq.n	8008828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3307      	adds	r3, #7
 8008812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0307 	bic.w	r3, r3, #7
 800881a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	4a1f      	ldr	r2, [pc, #124]	; (80088a0 <prvHeapInit+0xac>)
 8008824:	4413      	add	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800882c:	4a1d      	ldr	r2, [pc, #116]	; (80088a4 <prvHeapInit+0xb0>)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008832:	4b1c      	ldr	r3, [pc, #112]	; (80088a4 <prvHeapInit+0xb0>)
 8008834:	2200      	movs	r2, #0
 8008836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008840:	2208      	movs	r2, #8
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0307 	bic.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a15      	ldr	r2, [pc, #84]	; (80088a8 <prvHeapInit+0xb4>)
 8008854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008856:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <prvHeapInit+0xb4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2200      	movs	r2, #0
 800885c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <prvHeapInit+0xb4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008874:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <prvHeapInit+0xb4>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <prvHeapInit+0xb8>)
 8008882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <prvHeapInit+0xbc>)
 800888a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800888c:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <prvHeapInit+0xc0>)
 800888e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008892:	601a      	str	r2, [r3, #0]
}
 8008894:	bf00      	nop
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	20000dcc 	.word	0x20000dcc
 80088a4:	200049cc 	.word	0x200049cc
 80088a8:	200049d4 	.word	0x200049d4
 80088ac:	200049dc 	.word	0x200049dc
 80088b0:	200049d8 	.word	0x200049d8
 80088b4:	200049e0 	.word	0x200049e0

080088b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088c0:	4b28      	ldr	r3, [pc, #160]	; (8008964 <prvInsertBlockIntoFreeList+0xac>)
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	e002      	b.n	80088cc <prvInsertBlockIntoFreeList+0x14>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d8f7      	bhi.n	80088c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	4413      	add	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d108      	bne.n	80088fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	441a      	add	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d118      	bne.n	8008940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	4b15      	ldr	r3, [pc, #84]	; (8008968 <prvInsertBlockIntoFreeList+0xb0>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d00d      	beq.n	8008936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	441a      	add	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e008      	b.n	8008948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008936:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <prvInsertBlockIntoFreeList+0xb0>)
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	e003      	b.n	8008948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	d002      	beq.n	8008956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008956:	bf00      	nop
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	200049cc 	.word	0x200049cc
 8008968:	200049d4 	.word	0x200049d4

0800896c <__errno>:
 800896c:	4b01      	ldr	r3, [pc, #4]	; (8008974 <__errno+0x8>)
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	2000001c 	.word	0x2000001c

08008978 <__libc_init_array>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	4e0d      	ldr	r6, [pc, #52]	; (80089b0 <__libc_init_array+0x38>)
 800897c:	4c0d      	ldr	r4, [pc, #52]	; (80089b4 <__libc_init_array+0x3c>)
 800897e:	1ba4      	subs	r4, r4, r6
 8008980:	10a4      	asrs	r4, r4, #2
 8008982:	2500      	movs	r5, #0
 8008984:	42a5      	cmp	r5, r4
 8008986:	d109      	bne.n	800899c <__libc_init_array+0x24>
 8008988:	4e0b      	ldr	r6, [pc, #44]	; (80089b8 <__libc_init_array+0x40>)
 800898a:	4c0c      	ldr	r4, [pc, #48]	; (80089bc <__libc_init_array+0x44>)
 800898c:	f000 fc28 	bl	80091e0 <_init>
 8008990:	1ba4      	subs	r4, r4, r6
 8008992:	10a4      	asrs	r4, r4, #2
 8008994:	2500      	movs	r5, #0
 8008996:	42a5      	cmp	r5, r4
 8008998:	d105      	bne.n	80089a6 <__libc_init_array+0x2e>
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089a0:	4798      	blx	r3
 80089a2:	3501      	adds	r5, #1
 80089a4:	e7ee      	b.n	8008984 <__libc_init_array+0xc>
 80089a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089aa:	4798      	blx	r3
 80089ac:	3501      	adds	r5, #1
 80089ae:	e7f2      	b.n	8008996 <__libc_init_array+0x1e>
 80089b0:	0800ab2c 	.word	0x0800ab2c
 80089b4:	0800ab2c 	.word	0x0800ab2c
 80089b8:	0800ab2c 	.word	0x0800ab2c
 80089bc:	0800ab30 	.word	0x0800ab30

080089c0 <memcpy>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	1e43      	subs	r3, r0, #1
 80089c4:	440a      	add	r2, r1
 80089c6:	4291      	cmp	r1, r2
 80089c8:	d100      	bne.n	80089cc <memcpy+0xc>
 80089ca:	bd10      	pop	{r4, pc}
 80089cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089d4:	e7f7      	b.n	80089c6 <memcpy+0x6>

080089d6 <memset>:
 80089d6:	4402      	add	r2, r0
 80089d8:	4603      	mov	r3, r0
 80089da:	4293      	cmp	r3, r2
 80089dc:	d100      	bne.n	80089e0 <memset+0xa>
 80089de:	4770      	bx	lr
 80089e0:	f803 1b01 	strb.w	r1, [r3], #1
 80089e4:	e7f9      	b.n	80089da <memset+0x4>
	...

080089e8 <siprintf>:
 80089e8:	b40e      	push	{r1, r2, r3}
 80089ea:	b500      	push	{lr}
 80089ec:	b09c      	sub	sp, #112	; 0x70
 80089ee:	ab1d      	add	r3, sp, #116	; 0x74
 80089f0:	9002      	str	r0, [sp, #8]
 80089f2:	9006      	str	r0, [sp, #24]
 80089f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089f8:	4809      	ldr	r0, [pc, #36]	; (8008a20 <siprintf+0x38>)
 80089fa:	9107      	str	r1, [sp, #28]
 80089fc:	9104      	str	r1, [sp, #16]
 80089fe:	4909      	ldr	r1, [pc, #36]	; (8008a24 <siprintf+0x3c>)
 8008a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a04:	9105      	str	r1, [sp, #20]
 8008a06:	6800      	ldr	r0, [r0, #0]
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	a902      	add	r1, sp, #8
 8008a0c:	f000 f866 	bl	8008adc <_svfiprintf_r>
 8008a10:	9b02      	ldr	r3, [sp, #8]
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	b01c      	add	sp, #112	; 0x70
 8008a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a1c:	b003      	add	sp, #12
 8008a1e:	4770      	bx	lr
 8008a20:	2000001c 	.word	0x2000001c
 8008a24:	ffff0208 	.word	0xffff0208

08008a28 <__ssputs_r>:
 8008a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a2c:	688e      	ldr	r6, [r1, #8]
 8008a2e:	429e      	cmp	r6, r3
 8008a30:	4682      	mov	sl, r0
 8008a32:	460c      	mov	r4, r1
 8008a34:	4690      	mov	r8, r2
 8008a36:	4699      	mov	r9, r3
 8008a38:	d837      	bhi.n	8008aaa <__ssputs_r+0x82>
 8008a3a:	898a      	ldrh	r2, [r1, #12]
 8008a3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a40:	d031      	beq.n	8008aa6 <__ssputs_r+0x7e>
 8008a42:	6825      	ldr	r5, [r4, #0]
 8008a44:	6909      	ldr	r1, [r1, #16]
 8008a46:	1a6f      	subs	r7, r5, r1
 8008a48:	6965      	ldr	r5, [r4, #20]
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a50:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a54:	f109 0301 	add.w	r3, r9, #1
 8008a58:	443b      	add	r3, r7
 8008a5a:	429d      	cmp	r5, r3
 8008a5c:	bf38      	it	cc
 8008a5e:	461d      	movcc	r5, r3
 8008a60:	0553      	lsls	r3, r2, #21
 8008a62:	d530      	bpl.n	8008ac6 <__ssputs_r+0x9e>
 8008a64:	4629      	mov	r1, r5
 8008a66:	f000 fb21 	bl	80090ac <_malloc_r>
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	b950      	cbnz	r0, 8008a84 <__ssputs_r+0x5c>
 8008a6e:	230c      	movs	r3, #12
 8008a70:	f8ca 3000 	str.w	r3, [sl]
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a84:	463a      	mov	r2, r7
 8008a86:	6921      	ldr	r1, [r4, #16]
 8008a88:	f7ff ff9a 	bl	80089c0 <memcpy>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	6126      	str	r6, [r4, #16]
 8008a9a:	6165      	str	r5, [r4, #20]
 8008a9c:	443e      	add	r6, r7
 8008a9e:	1bed      	subs	r5, r5, r7
 8008aa0:	6026      	str	r6, [r4, #0]
 8008aa2:	60a5      	str	r5, [r4, #8]
 8008aa4:	464e      	mov	r6, r9
 8008aa6:	454e      	cmp	r6, r9
 8008aa8:	d900      	bls.n	8008aac <__ssputs_r+0x84>
 8008aaa:	464e      	mov	r6, r9
 8008aac:	4632      	mov	r2, r6
 8008aae:	4641      	mov	r1, r8
 8008ab0:	6820      	ldr	r0, [r4, #0]
 8008ab2:	f000 fa93 	bl	8008fdc <memmove>
 8008ab6:	68a3      	ldr	r3, [r4, #8]
 8008ab8:	1b9b      	subs	r3, r3, r6
 8008aba:	60a3      	str	r3, [r4, #8]
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	441e      	add	r6, r3
 8008ac0:	6026      	str	r6, [r4, #0]
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	e7dc      	b.n	8008a80 <__ssputs_r+0x58>
 8008ac6:	462a      	mov	r2, r5
 8008ac8:	f000 fb4a 	bl	8009160 <_realloc_r>
 8008acc:	4606      	mov	r6, r0
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d1e2      	bne.n	8008a98 <__ssputs_r+0x70>
 8008ad2:	6921      	ldr	r1, [r4, #16]
 8008ad4:	4650      	mov	r0, sl
 8008ad6:	f000 fa9b 	bl	8009010 <_free_r>
 8008ada:	e7c8      	b.n	8008a6e <__ssputs_r+0x46>

08008adc <_svfiprintf_r>:
 8008adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	461d      	mov	r5, r3
 8008ae2:	898b      	ldrh	r3, [r1, #12]
 8008ae4:	061f      	lsls	r7, r3, #24
 8008ae6:	b09d      	sub	sp, #116	; 0x74
 8008ae8:	4680      	mov	r8, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	4616      	mov	r6, r2
 8008aee:	d50f      	bpl.n	8008b10 <_svfiprintf_r+0x34>
 8008af0:	690b      	ldr	r3, [r1, #16]
 8008af2:	b96b      	cbnz	r3, 8008b10 <_svfiprintf_r+0x34>
 8008af4:	2140      	movs	r1, #64	; 0x40
 8008af6:	f000 fad9 	bl	80090ac <_malloc_r>
 8008afa:	6020      	str	r0, [r4, #0]
 8008afc:	6120      	str	r0, [r4, #16]
 8008afe:	b928      	cbnz	r0, 8008b0c <_svfiprintf_r+0x30>
 8008b00:	230c      	movs	r3, #12
 8008b02:	f8c8 3000 	str.w	r3, [r8]
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0a:	e0c8      	b.n	8008c9e <_svfiprintf_r+0x1c2>
 8008b0c:	2340      	movs	r3, #64	; 0x40
 8008b0e:	6163      	str	r3, [r4, #20]
 8008b10:	2300      	movs	r3, #0
 8008b12:	9309      	str	r3, [sp, #36]	; 0x24
 8008b14:	2320      	movs	r3, #32
 8008b16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b1a:	2330      	movs	r3, #48	; 0x30
 8008b1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b20:	9503      	str	r5, [sp, #12]
 8008b22:	f04f 0b01 	mov.w	fp, #1
 8008b26:	4637      	mov	r7, r6
 8008b28:	463d      	mov	r5, r7
 8008b2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b2e:	b10b      	cbz	r3, 8008b34 <_svfiprintf_r+0x58>
 8008b30:	2b25      	cmp	r3, #37	; 0x25
 8008b32:	d13e      	bne.n	8008bb2 <_svfiprintf_r+0xd6>
 8008b34:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b38:	d00b      	beq.n	8008b52 <_svfiprintf_r+0x76>
 8008b3a:	4653      	mov	r3, sl
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4640      	mov	r0, r8
 8008b42:	f7ff ff71 	bl	8008a28 <__ssputs_r>
 8008b46:	3001      	adds	r0, #1
 8008b48:	f000 80a4 	beq.w	8008c94 <_svfiprintf_r+0x1b8>
 8008b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b4e:	4453      	add	r3, sl
 8008b50:	9309      	str	r3, [sp, #36]	; 0x24
 8008b52:	783b      	ldrb	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 809d 	beq.w	8008c94 <_svfiprintf_r+0x1b8>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b64:	9304      	str	r3, [sp, #16]
 8008b66:	9307      	str	r3, [sp, #28]
 8008b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b6e:	462f      	mov	r7, r5
 8008b70:	2205      	movs	r2, #5
 8008b72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008b76:	4850      	ldr	r0, [pc, #320]	; (8008cb8 <_svfiprintf_r+0x1dc>)
 8008b78:	f7f7 fb3a 	bl	80001f0 <memchr>
 8008b7c:	9b04      	ldr	r3, [sp, #16]
 8008b7e:	b9d0      	cbnz	r0, 8008bb6 <_svfiprintf_r+0xda>
 8008b80:	06d9      	lsls	r1, r3, #27
 8008b82:	bf44      	itt	mi
 8008b84:	2220      	movmi	r2, #32
 8008b86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b8a:	071a      	lsls	r2, r3, #28
 8008b8c:	bf44      	itt	mi
 8008b8e:	222b      	movmi	r2, #43	; 0x2b
 8008b90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b94:	782a      	ldrb	r2, [r5, #0]
 8008b96:	2a2a      	cmp	r2, #42	; 0x2a
 8008b98:	d015      	beq.n	8008bc6 <_svfiprintf_r+0xea>
 8008b9a:	9a07      	ldr	r2, [sp, #28]
 8008b9c:	462f      	mov	r7, r5
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	250a      	movs	r5, #10
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ba8:	3b30      	subs	r3, #48	; 0x30
 8008baa:	2b09      	cmp	r3, #9
 8008bac:	d94d      	bls.n	8008c4a <_svfiprintf_r+0x16e>
 8008bae:	b1b8      	cbz	r0, 8008be0 <_svfiprintf_r+0x104>
 8008bb0:	e00f      	b.n	8008bd2 <_svfiprintf_r+0xf6>
 8008bb2:	462f      	mov	r7, r5
 8008bb4:	e7b8      	b.n	8008b28 <_svfiprintf_r+0x4c>
 8008bb6:	4a40      	ldr	r2, [pc, #256]	; (8008cb8 <_svfiprintf_r+0x1dc>)
 8008bb8:	1a80      	subs	r0, r0, r2
 8008bba:	fa0b f000 	lsl.w	r0, fp, r0
 8008bbe:	4318      	orrs	r0, r3
 8008bc0:	9004      	str	r0, [sp, #16]
 8008bc2:	463d      	mov	r5, r7
 8008bc4:	e7d3      	b.n	8008b6e <_svfiprintf_r+0x92>
 8008bc6:	9a03      	ldr	r2, [sp, #12]
 8008bc8:	1d11      	adds	r1, r2, #4
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	9103      	str	r1, [sp, #12]
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	db01      	blt.n	8008bd6 <_svfiprintf_r+0xfa>
 8008bd2:	9207      	str	r2, [sp, #28]
 8008bd4:	e004      	b.n	8008be0 <_svfiprintf_r+0x104>
 8008bd6:	4252      	negs	r2, r2
 8008bd8:	f043 0302 	orr.w	r3, r3, #2
 8008bdc:	9207      	str	r2, [sp, #28]
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	783b      	ldrb	r3, [r7, #0]
 8008be2:	2b2e      	cmp	r3, #46	; 0x2e
 8008be4:	d10c      	bne.n	8008c00 <_svfiprintf_r+0x124>
 8008be6:	787b      	ldrb	r3, [r7, #1]
 8008be8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bea:	d133      	bne.n	8008c54 <_svfiprintf_r+0x178>
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	1d1a      	adds	r2, r3, #4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	9203      	str	r2, [sp, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfb8      	it	lt
 8008bf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bfc:	3702      	adds	r7, #2
 8008bfe:	9305      	str	r3, [sp, #20]
 8008c00:	4d2e      	ldr	r5, [pc, #184]	; (8008cbc <_svfiprintf_r+0x1e0>)
 8008c02:	7839      	ldrb	r1, [r7, #0]
 8008c04:	2203      	movs	r2, #3
 8008c06:	4628      	mov	r0, r5
 8008c08:	f7f7 faf2 	bl	80001f0 <memchr>
 8008c0c:	b138      	cbz	r0, 8008c1e <_svfiprintf_r+0x142>
 8008c0e:	2340      	movs	r3, #64	; 0x40
 8008c10:	1b40      	subs	r0, r0, r5
 8008c12:	fa03 f000 	lsl.w	r0, r3, r0
 8008c16:	9b04      	ldr	r3, [sp, #16]
 8008c18:	4303      	orrs	r3, r0
 8008c1a:	3701      	adds	r7, #1
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	7839      	ldrb	r1, [r7, #0]
 8008c20:	4827      	ldr	r0, [pc, #156]	; (8008cc0 <_svfiprintf_r+0x1e4>)
 8008c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c26:	2206      	movs	r2, #6
 8008c28:	1c7e      	adds	r6, r7, #1
 8008c2a:	f7f7 fae1 	bl	80001f0 <memchr>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d038      	beq.n	8008ca4 <_svfiprintf_r+0x1c8>
 8008c32:	4b24      	ldr	r3, [pc, #144]	; (8008cc4 <_svfiprintf_r+0x1e8>)
 8008c34:	bb13      	cbnz	r3, 8008c7c <_svfiprintf_r+0x1a0>
 8008c36:	9b03      	ldr	r3, [sp, #12]
 8008c38:	3307      	adds	r3, #7
 8008c3a:	f023 0307 	bic.w	r3, r3, #7
 8008c3e:	3308      	adds	r3, #8
 8008c40:	9303      	str	r3, [sp, #12]
 8008c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c44:	444b      	add	r3, r9
 8008c46:	9309      	str	r3, [sp, #36]	; 0x24
 8008c48:	e76d      	b.n	8008b26 <_svfiprintf_r+0x4a>
 8008c4a:	fb05 3202 	mla	r2, r5, r2, r3
 8008c4e:	2001      	movs	r0, #1
 8008c50:	460f      	mov	r7, r1
 8008c52:	e7a6      	b.n	8008ba2 <_svfiprintf_r+0xc6>
 8008c54:	2300      	movs	r3, #0
 8008c56:	3701      	adds	r7, #1
 8008c58:	9305      	str	r3, [sp, #20]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	250a      	movs	r5, #10
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c64:	3a30      	subs	r2, #48	; 0x30
 8008c66:	2a09      	cmp	r2, #9
 8008c68:	d903      	bls.n	8008c72 <_svfiprintf_r+0x196>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0c8      	beq.n	8008c00 <_svfiprintf_r+0x124>
 8008c6e:	9105      	str	r1, [sp, #20]
 8008c70:	e7c6      	b.n	8008c00 <_svfiprintf_r+0x124>
 8008c72:	fb05 2101 	mla	r1, r5, r1, r2
 8008c76:	2301      	movs	r3, #1
 8008c78:	4607      	mov	r7, r0
 8008c7a:	e7f0      	b.n	8008c5e <_svfiprintf_r+0x182>
 8008c7c:	ab03      	add	r3, sp, #12
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	4622      	mov	r2, r4
 8008c82:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <_svfiprintf_r+0x1ec>)
 8008c84:	a904      	add	r1, sp, #16
 8008c86:	4640      	mov	r0, r8
 8008c88:	f3af 8000 	nop.w
 8008c8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c90:	4681      	mov	r9, r0
 8008c92:	d1d6      	bne.n	8008c42 <_svfiprintf_r+0x166>
 8008c94:	89a3      	ldrh	r3, [r4, #12]
 8008c96:	065b      	lsls	r3, r3, #25
 8008c98:	f53f af35 	bmi.w	8008b06 <_svfiprintf_r+0x2a>
 8008c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c9e:	b01d      	add	sp, #116	; 0x74
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca4:	ab03      	add	r3, sp, #12
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	4622      	mov	r2, r4
 8008caa:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <_svfiprintf_r+0x1ec>)
 8008cac:	a904      	add	r1, sp, #16
 8008cae:	4640      	mov	r0, r8
 8008cb0:	f000 f882 	bl	8008db8 <_printf_i>
 8008cb4:	e7ea      	b.n	8008c8c <_svfiprintf_r+0x1b0>
 8008cb6:	bf00      	nop
 8008cb8:	0800aaf0 	.word	0x0800aaf0
 8008cbc:	0800aaf6 	.word	0x0800aaf6
 8008cc0:	0800aafa 	.word	0x0800aafa
 8008cc4:	00000000 	.word	0x00000000
 8008cc8:	08008a29 	.word	0x08008a29

08008ccc <_printf_common>:
 8008ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	4691      	mov	r9, r2
 8008cd2:	461f      	mov	r7, r3
 8008cd4:	688a      	ldr	r2, [r1, #8]
 8008cd6:	690b      	ldr	r3, [r1, #16]
 8008cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	bfb8      	it	lt
 8008ce0:	4613      	movlt	r3, r2
 8008ce2:	f8c9 3000 	str.w	r3, [r9]
 8008ce6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cea:	4606      	mov	r6, r0
 8008cec:	460c      	mov	r4, r1
 8008cee:	b112      	cbz	r2, 8008cf6 <_printf_common+0x2a>
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	f8c9 3000 	str.w	r3, [r9]
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	0699      	lsls	r1, r3, #26
 8008cfa:	bf42      	ittt	mi
 8008cfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d00:	3302      	addmi	r3, #2
 8008d02:	f8c9 3000 	strmi.w	r3, [r9]
 8008d06:	6825      	ldr	r5, [r4, #0]
 8008d08:	f015 0506 	ands.w	r5, r5, #6
 8008d0c:	d107      	bne.n	8008d1e <_printf_common+0x52>
 8008d0e:	f104 0a19 	add.w	sl, r4, #25
 8008d12:	68e3      	ldr	r3, [r4, #12]
 8008d14:	f8d9 2000 	ldr.w	r2, [r9]
 8008d18:	1a9b      	subs	r3, r3, r2
 8008d1a:	42ab      	cmp	r3, r5
 8008d1c:	dc28      	bgt.n	8008d70 <_printf_common+0xa4>
 8008d1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d22:	6822      	ldr	r2, [r4, #0]
 8008d24:	3300      	adds	r3, #0
 8008d26:	bf18      	it	ne
 8008d28:	2301      	movne	r3, #1
 8008d2a:	0692      	lsls	r2, r2, #26
 8008d2c:	d42d      	bmi.n	8008d8a <_printf_common+0xbe>
 8008d2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d32:	4639      	mov	r1, r7
 8008d34:	4630      	mov	r0, r6
 8008d36:	47c0      	blx	r8
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d020      	beq.n	8008d7e <_printf_common+0xb2>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	68e5      	ldr	r5, [r4, #12]
 8008d40:	f8d9 2000 	ldr.w	r2, [r9]
 8008d44:	f003 0306 	and.w	r3, r3, #6
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	bf08      	it	eq
 8008d4c:	1aad      	subeq	r5, r5, r2
 8008d4e:	68a3      	ldr	r3, [r4, #8]
 8008d50:	6922      	ldr	r2, [r4, #16]
 8008d52:	bf0c      	ite	eq
 8008d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d58:	2500      	movne	r5, #0
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	bfc4      	itt	gt
 8008d5e:	1a9b      	subgt	r3, r3, r2
 8008d60:	18ed      	addgt	r5, r5, r3
 8008d62:	f04f 0900 	mov.w	r9, #0
 8008d66:	341a      	adds	r4, #26
 8008d68:	454d      	cmp	r5, r9
 8008d6a:	d11a      	bne.n	8008da2 <_printf_common+0xd6>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	e008      	b.n	8008d82 <_printf_common+0xb6>
 8008d70:	2301      	movs	r3, #1
 8008d72:	4652      	mov	r2, sl
 8008d74:	4639      	mov	r1, r7
 8008d76:	4630      	mov	r0, r6
 8008d78:	47c0      	blx	r8
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d103      	bne.n	8008d86 <_printf_common+0xba>
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d86:	3501      	adds	r5, #1
 8008d88:	e7c3      	b.n	8008d12 <_printf_common+0x46>
 8008d8a:	18e1      	adds	r1, r4, r3
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	2030      	movs	r0, #48	; 0x30
 8008d90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d94:	4422      	add	r2, r4
 8008d96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d9e:	3302      	adds	r3, #2
 8008da0:	e7c5      	b.n	8008d2e <_printf_common+0x62>
 8008da2:	2301      	movs	r3, #1
 8008da4:	4622      	mov	r2, r4
 8008da6:	4639      	mov	r1, r7
 8008da8:	4630      	mov	r0, r6
 8008daa:	47c0      	blx	r8
 8008dac:	3001      	adds	r0, #1
 8008dae:	d0e6      	beq.n	8008d7e <_printf_common+0xb2>
 8008db0:	f109 0901 	add.w	r9, r9, #1
 8008db4:	e7d8      	b.n	8008d68 <_printf_common+0x9c>
	...

08008db8 <_printf_i>:
 8008db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	7e09      	ldrb	r1, [r1, #24]
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	296e      	cmp	r1, #110	; 0x6e
 8008dc8:	4617      	mov	r7, r2
 8008dca:	4606      	mov	r6, r0
 8008dcc:	4698      	mov	r8, r3
 8008dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dd0:	f000 80b3 	beq.w	8008f3a <_printf_i+0x182>
 8008dd4:	d822      	bhi.n	8008e1c <_printf_i+0x64>
 8008dd6:	2963      	cmp	r1, #99	; 0x63
 8008dd8:	d036      	beq.n	8008e48 <_printf_i+0x90>
 8008dda:	d80a      	bhi.n	8008df2 <_printf_i+0x3a>
 8008ddc:	2900      	cmp	r1, #0
 8008dde:	f000 80b9 	beq.w	8008f54 <_printf_i+0x19c>
 8008de2:	2958      	cmp	r1, #88	; 0x58
 8008de4:	f000 8083 	beq.w	8008eee <_printf_i+0x136>
 8008de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008df0:	e032      	b.n	8008e58 <_printf_i+0xa0>
 8008df2:	2964      	cmp	r1, #100	; 0x64
 8008df4:	d001      	beq.n	8008dfa <_printf_i+0x42>
 8008df6:	2969      	cmp	r1, #105	; 0x69
 8008df8:	d1f6      	bne.n	8008de8 <_printf_i+0x30>
 8008dfa:	6820      	ldr	r0, [r4, #0]
 8008dfc:	6813      	ldr	r3, [r2, #0]
 8008dfe:	0605      	lsls	r5, r0, #24
 8008e00:	f103 0104 	add.w	r1, r3, #4
 8008e04:	d52a      	bpl.n	8008e5c <_printf_i+0xa4>
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6011      	str	r1, [r2, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	da03      	bge.n	8008e16 <_printf_i+0x5e>
 8008e0e:	222d      	movs	r2, #45	; 0x2d
 8008e10:	425b      	negs	r3, r3
 8008e12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e16:	486f      	ldr	r0, [pc, #444]	; (8008fd4 <_printf_i+0x21c>)
 8008e18:	220a      	movs	r2, #10
 8008e1a:	e039      	b.n	8008e90 <_printf_i+0xd8>
 8008e1c:	2973      	cmp	r1, #115	; 0x73
 8008e1e:	f000 809d 	beq.w	8008f5c <_printf_i+0x1a4>
 8008e22:	d808      	bhi.n	8008e36 <_printf_i+0x7e>
 8008e24:	296f      	cmp	r1, #111	; 0x6f
 8008e26:	d020      	beq.n	8008e6a <_printf_i+0xb2>
 8008e28:	2970      	cmp	r1, #112	; 0x70
 8008e2a:	d1dd      	bne.n	8008de8 <_printf_i+0x30>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	f043 0320 	orr.w	r3, r3, #32
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	e003      	b.n	8008e3e <_printf_i+0x86>
 8008e36:	2975      	cmp	r1, #117	; 0x75
 8008e38:	d017      	beq.n	8008e6a <_printf_i+0xb2>
 8008e3a:	2978      	cmp	r1, #120	; 0x78
 8008e3c:	d1d4      	bne.n	8008de8 <_printf_i+0x30>
 8008e3e:	2378      	movs	r3, #120	; 0x78
 8008e40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e44:	4864      	ldr	r0, [pc, #400]	; (8008fd8 <_printf_i+0x220>)
 8008e46:	e055      	b.n	8008ef4 <_printf_i+0x13c>
 8008e48:	6813      	ldr	r3, [r2, #0]
 8008e4a:	1d19      	adds	r1, r3, #4
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6011      	str	r1, [r2, #0]
 8008e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e08c      	b.n	8008f76 <_printf_i+0x1be>
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6011      	str	r1, [r2, #0]
 8008e60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e64:	bf18      	it	ne
 8008e66:	b21b      	sxthne	r3, r3
 8008e68:	e7cf      	b.n	8008e0a <_printf_i+0x52>
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	6825      	ldr	r5, [r4, #0]
 8008e6e:	1d18      	adds	r0, r3, #4
 8008e70:	6010      	str	r0, [r2, #0]
 8008e72:	0628      	lsls	r0, r5, #24
 8008e74:	d501      	bpl.n	8008e7a <_printf_i+0xc2>
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	e002      	b.n	8008e80 <_printf_i+0xc8>
 8008e7a:	0668      	lsls	r0, r5, #25
 8008e7c:	d5fb      	bpl.n	8008e76 <_printf_i+0xbe>
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	4854      	ldr	r0, [pc, #336]	; (8008fd4 <_printf_i+0x21c>)
 8008e82:	296f      	cmp	r1, #111	; 0x6f
 8008e84:	bf14      	ite	ne
 8008e86:	220a      	movne	r2, #10
 8008e88:	2208      	moveq	r2, #8
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e90:	6865      	ldr	r5, [r4, #4]
 8008e92:	60a5      	str	r5, [r4, #8]
 8008e94:	2d00      	cmp	r5, #0
 8008e96:	f2c0 8095 	blt.w	8008fc4 <_printf_i+0x20c>
 8008e9a:	6821      	ldr	r1, [r4, #0]
 8008e9c:	f021 0104 	bic.w	r1, r1, #4
 8008ea0:	6021      	str	r1, [r4, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d13d      	bne.n	8008f22 <_printf_i+0x16a>
 8008ea6:	2d00      	cmp	r5, #0
 8008ea8:	f040 808e 	bne.w	8008fc8 <_printf_i+0x210>
 8008eac:	4665      	mov	r5, ip
 8008eae:	2a08      	cmp	r2, #8
 8008eb0:	d10b      	bne.n	8008eca <_printf_i+0x112>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	07db      	lsls	r3, r3, #31
 8008eb6:	d508      	bpl.n	8008eca <_printf_i+0x112>
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	6862      	ldr	r2, [r4, #4]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	bfde      	ittt	le
 8008ec0:	2330      	movle	r3, #48	; 0x30
 8008ec2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ec6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008eca:	ebac 0305 	sub.w	r3, ip, r5
 8008ece:	6123      	str	r3, [r4, #16]
 8008ed0:	f8cd 8000 	str.w	r8, [sp]
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	aa03      	add	r2, sp, #12
 8008ed8:	4621      	mov	r1, r4
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff fef6 	bl	8008ccc <_printf_common>
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d14d      	bne.n	8008f80 <_printf_i+0x1c8>
 8008ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee8:	b005      	add	sp, #20
 8008eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eee:	4839      	ldr	r0, [pc, #228]	; (8008fd4 <_printf_i+0x21c>)
 8008ef0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ef4:	6813      	ldr	r3, [r2, #0]
 8008ef6:	6821      	ldr	r1, [r4, #0]
 8008ef8:	1d1d      	adds	r5, r3, #4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6015      	str	r5, [r2, #0]
 8008efe:	060a      	lsls	r2, r1, #24
 8008f00:	d50b      	bpl.n	8008f1a <_printf_i+0x162>
 8008f02:	07ca      	lsls	r2, r1, #31
 8008f04:	bf44      	itt	mi
 8008f06:	f041 0120 	orrmi.w	r1, r1, #32
 8008f0a:	6021      	strmi	r1, [r4, #0]
 8008f0c:	b91b      	cbnz	r3, 8008f16 <_printf_i+0x15e>
 8008f0e:	6822      	ldr	r2, [r4, #0]
 8008f10:	f022 0220 	bic.w	r2, r2, #32
 8008f14:	6022      	str	r2, [r4, #0]
 8008f16:	2210      	movs	r2, #16
 8008f18:	e7b7      	b.n	8008e8a <_printf_i+0xd2>
 8008f1a:	064d      	lsls	r5, r1, #25
 8008f1c:	bf48      	it	mi
 8008f1e:	b29b      	uxthmi	r3, r3
 8008f20:	e7ef      	b.n	8008f02 <_printf_i+0x14a>
 8008f22:	4665      	mov	r5, ip
 8008f24:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f28:	fb02 3311 	mls	r3, r2, r1, r3
 8008f2c:	5cc3      	ldrb	r3, [r0, r3]
 8008f2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f32:	460b      	mov	r3, r1
 8008f34:	2900      	cmp	r1, #0
 8008f36:	d1f5      	bne.n	8008f24 <_printf_i+0x16c>
 8008f38:	e7b9      	b.n	8008eae <_printf_i+0xf6>
 8008f3a:	6813      	ldr	r3, [r2, #0]
 8008f3c:	6825      	ldr	r5, [r4, #0]
 8008f3e:	6961      	ldr	r1, [r4, #20]
 8008f40:	1d18      	adds	r0, r3, #4
 8008f42:	6010      	str	r0, [r2, #0]
 8008f44:	0628      	lsls	r0, r5, #24
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	d501      	bpl.n	8008f4e <_printf_i+0x196>
 8008f4a:	6019      	str	r1, [r3, #0]
 8008f4c:	e002      	b.n	8008f54 <_printf_i+0x19c>
 8008f4e:	066a      	lsls	r2, r5, #25
 8008f50:	d5fb      	bpl.n	8008f4a <_printf_i+0x192>
 8008f52:	8019      	strh	r1, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	4665      	mov	r5, ip
 8008f5a:	e7b9      	b.n	8008ed0 <_printf_i+0x118>
 8008f5c:	6813      	ldr	r3, [r2, #0]
 8008f5e:	1d19      	adds	r1, r3, #4
 8008f60:	6011      	str	r1, [r2, #0]
 8008f62:	681d      	ldr	r5, [r3, #0]
 8008f64:	6862      	ldr	r2, [r4, #4]
 8008f66:	2100      	movs	r1, #0
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f7f7 f941 	bl	80001f0 <memchr>
 8008f6e:	b108      	cbz	r0, 8008f74 <_printf_i+0x1bc>
 8008f70:	1b40      	subs	r0, r0, r5
 8008f72:	6060      	str	r0, [r4, #4]
 8008f74:	6863      	ldr	r3, [r4, #4]
 8008f76:	6123      	str	r3, [r4, #16]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f7e:	e7a7      	b.n	8008ed0 <_printf_i+0x118>
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	462a      	mov	r2, r5
 8008f84:	4639      	mov	r1, r7
 8008f86:	4630      	mov	r0, r6
 8008f88:	47c0      	blx	r8
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d0aa      	beq.n	8008ee4 <_printf_i+0x12c>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	079b      	lsls	r3, r3, #30
 8008f92:	d413      	bmi.n	8008fbc <_printf_i+0x204>
 8008f94:	68e0      	ldr	r0, [r4, #12]
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	4298      	cmp	r0, r3
 8008f9a:	bfb8      	it	lt
 8008f9c:	4618      	movlt	r0, r3
 8008f9e:	e7a3      	b.n	8008ee8 <_printf_i+0x130>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	464a      	mov	r2, r9
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	47c0      	blx	r8
 8008faa:	3001      	adds	r0, #1
 8008fac:	d09a      	beq.n	8008ee4 <_printf_i+0x12c>
 8008fae:	3501      	adds	r5, #1
 8008fb0:	68e3      	ldr	r3, [r4, #12]
 8008fb2:	9a03      	ldr	r2, [sp, #12]
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	42ab      	cmp	r3, r5
 8008fb8:	dcf2      	bgt.n	8008fa0 <_printf_i+0x1e8>
 8008fba:	e7eb      	b.n	8008f94 <_printf_i+0x1dc>
 8008fbc:	2500      	movs	r5, #0
 8008fbe:	f104 0919 	add.w	r9, r4, #25
 8008fc2:	e7f5      	b.n	8008fb0 <_printf_i+0x1f8>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1ac      	bne.n	8008f22 <_printf_i+0x16a>
 8008fc8:	7803      	ldrb	r3, [r0, #0]
 8008fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fd2:	e76c      	b.n	8008eae <_printf_i+0xf6>
 8008fd4:	0800ab01 	.word	0x0800ab01
 8008fd8:	0800ab12 	.word	0x0800ab12

08008fdc <memmove>:
 8008fdc:	4288      	cmp	r0, r1
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	eb01 0302 	add.w	r3, r1, r2
 8008fe4:	d807      	bhi.n	8008ff6 <memmove+0x1a>
 8008fe6:	1e42      	subs	r2, r0, #1
 8008fe8:	4299      	cmp	r1, r3
 8008fea:	d00a      	beq.n	8009002 <memmove+0x26>
 8008fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ff0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008ff4:	e7f8      	b.n	8008fe8 <memmove+0xc>
 8008ff6:	4283      	cmp	r3, r0
 8008ff8:	d9f5      	bls.n	8008fe6 <memmove+0xa>
 8008ffa:	1881      	adds	r1, r0, r2
 8008ffc:	1ad2      	subs	r2, r2, r3
 8008ffe:	42d3      	cmn	r3, r2
 8009000:	d100      	bne.n	8009004 <memmove+0x28>
 8009002:	bd10      	pop	{r4, pc}
 8009004:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009008:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800900c:	e7f7      	b.n	8008ffe <memmove+0x22>
	...

08009010 <_free_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4605      	mov	r5, r0
 8009014:	2900      	cmp	r1, #0
 8009016:	d045      	beq.n	80090a4 <_free_r+0x94>
 8009018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800901c:	1f0c      	subs	r4, r1, #4
 800901e:	2b00      	cmp	r3, #0
 8009020:	bfb8      	it	lt
 8009022:	18e4      	addlt	r4, r4, r3
 8009024:	f000 f8d2 	bl	80091cc <__malloc_lock>
 8009028:	4a1f      	ldr	r2, [pc, #124]	; (80090a8 <_free_r+0x98>)
 800902a:	6813      	ldr	r3, [r2, #0]
 800902c:	4610      	mov	r0, r2
 800902e:	b933      	cbnz	r3, 800903e <_free_r+0x2e>
 8009030:	6063      	str	r3, [r4, #4]
 8009032:	6014      	str	r4, [r2, #0]
 8009034:	4628      	mov	r0, r5
 8009036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800903a:	f000 b8c8 	b.w	80091ce <__malloc_unlock>
 800903e:	42a3      	cmp	r3, r4
 8009040:	d90c      	bls.n	800905c <_free_r+0x4c>
 8009042:	6821      	ldr	r1, [r4, #0]
 8009044:	1862      	adds	r2, r4, r1
 8009046:	4293      	cmp	r3, r2
 8009048:	bf04      	itt	eq
 800904a:	681a      	ldreq	r2, [r3, #0]
 800904c:	685b      	ldreq	r3, [r3, #4]
 800904e:	6063      	str	r3, [r4, #4]
 8009050:	bf04      	itt	eq
 8009052:	1852      	addeq	r2, r2, r1
 8009054:	6022      	streq	r2, [r4, #0]
 8009056:	6004      	str	r4, [r0, #0]
 8009058:	e7ec      	b.n	8009034 <_free_r+0x24>
 800905a:	4613      	mov	r3, r2
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	b10a      	cbz	r2, 8009064 <_free_r+0x54>
 8009060:	42a2      	cmp	r2, r4
 8009062:	d9fa      	bls.n	800905a <_free_r+0x4a>
 8009064:	6819      	ldr	r1, [r3, #0]
 8009066:	1858      	adds	r0, r3, r1
 8009068:	42a0      	cmp	r0, r4
 800906a:	d10b      	bne.n	8009084 <_free_r+0x74>
 800906c:	6820      	ldr	r0, [r4, #0]
 800906e:	4401      	add	r1, r0
 8009070:	1858      	adds	r0, r3, r1
 8009072:	4282      	cmp	r2, r0
 8009074:	6019      	str	r1, [r3, #0]
 8009076:	d1dd      	bne.n	8009034 <_free_r+0x24>
 8009078:	6810      	ldr	r0, [r2, #0]
 800907a:	6852      	ldr	r2, [r2, #4]
 800907c:	605a      	str	r2, [r3, #4]
 800907e:	4401      	add	r1, r0
 8009080:	6019      	str	r1, [r3, #0]
 8009082:	e7d7      	b.n	8009034 <_free_r+0x24>
 8009084:	d902      	bls.n	800908c <_free_r+0x7c>
 8009086:	230c      	movs	r3, #12
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	e7d3      	b.n	8009034 <_free_r+0x24>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	1821      	adds	r1, r4, r0
 8009090:	428a      	cmp	r2, r1
 8009092:	bf04      	itt	eq
 8009094:	6811      	ldreq	r1, [r2, #0]
 8009096:	6852      	ldreq	r2, [r2, #4]
 8009098:	6062      	str	r2, [r4, #4]
 800909a:	bf04      	itt	eq
 800909c:	1809      	addeq	r1, r1, r0
 800909e:	6021      	streq	r1, [r4, #0]
 80090a0:	605c      	str	r4, [r3, #4]
 80090a2:	e7c7      	b.n	8009034 <_free_r+0x24>
 80090a4:	bd38      	pop	{r3, r4, r5, pc}
 80090a6:	bf00      	nop
 80090a8:	200049e4 	.word	0x200049e4

080090ac <_malloc_r>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	1ccd      	adds	r5, r1, #3
 80090b0:	f025 0503 	bic.w	r5, r5, #3
 80090b4:	3508      	adds	r5, #8
 80090b6:	2d0c      	cmp	r5, #12
 80090b8:	bf38      	it	cc
 80090ba:	250c      	movcc	r5, #12
 80090bc:	2d00      	cmp	r5, #0
 80090be:	4606      	mov	r6, r0
 80090c0:	db01      	blt.n	80090c6 <_malloc_r+0x1a>
 80090c2:	42a9      	cmp	r1, r5
 80090c4:	d903      	bls.n	80090ce <_malloc_r+0x22>
 80090c6:	230c      	movs	r3, #12
 80090c8:	6033      	str	r3, [r6, #0]
 80090ca:	2000      	movs	r0, #0
 80090cc:	bd70      	pop	{r4, r5, r6, pc}
 80090ce:	f000 f87d 	bl	80091cc <__malloc_lock>
 80090d2:	4a21      	ldr	r2, [pc, #132]	; (8009158 <_malloc_r+0xac>)
 80090d4:	6814      	ldr	r4, [r2, #0]
 80090d6:	4621      	mov	r1, r4
 80090d8:	b991      	cbnz	r1, 8009100 <_malloc_r+0x54>
 80090da:	4c20      	ldr	r4, [pc, #128]	; (800915c <_malloc_r+0xb0>)
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	b91b      	cbnz	r3, 80090e8 <_malloc_r+0x3c>
 80090e0:	4630      	mov	r0, r6
 80090e2:	f000 f863 	bl	80091ac <_sbrk_r>
 80090e6:	6020      	str	r0, [r4, #0]
 80090e8:	4629      	mov	r1, r5
 80090ea:	4630      	mov	r0, r6
 80090ec:	f000 f85e 	bl	80091ac <_sbrk_r>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d124      	bne.n	800913e <_malloc_r+0x92>
 80090f4:	230c      	movs	r3, #12
 80090f6:	6033      	str	r3, [r6, #0]
 80090f8:	4630      	mov	r0, r6
 80090fa:	f000 f868 	bl	80091ce <__malloc_unlock>
 80090fe:	e7e4      	b.n	80090ca <_malloc_r+0x1e>
 8009100:	680b      	ldr	r3, [r1, #0]
 8009102:	1b5b      	subs	r3, r3, r5
 8009104:	d418      	bmi.n	8009138 <_malloc_r+0x8c>
 8009106:	2b0b      	cmp	r3, #11
 8009108:	d90f      	bls.n	800912a <_malloc_r+0x7e>
 800910a:	600b      	str	r3, [r1, #0]
 800910c:	50cd      	str	r5, [r1, r3]
 800910e:	18cc      	adds	r4, r1, r3
 8009110:	4630      	mov	r0, r6
 8009112:	f000 f85c 	bl	80091ce <__malloc_unlock>
 8009116:	f104 000b 	add.w	r0, r4, #11
 800911a:	1d23      	adds	r3, r4, #4
 800911c:	f020 0007 	bic.w	r0, r0, #7
 8009120:	1ac3      	subs	r3, r0, r3
 8009122:	d0d3      	beq.n	80090cc <_malloc_r+0x20>
 8009124:	425a      	negs	r2, r3
 8009126:	50e2      	str	r2, [r4, r3]
 8009128:	e7d0      	b.n	80090cc <_malloc_r+0x20>
 800912a:	428c      	cmp	r4, r1
 800912c:	684b      	ldr	r3, [r1, #4]
 800912e:	bf16      	itet	ne
 8009130:	6063      	strne	r3, [r4, #4]
 8009132:	6013      	streq	r3, [r2, #0]
 8009134:	460c      	movne	r4, r1
 8009136:	e7eb      	b.n	8009110 <_malloc_r+0x64>
 8009138:	460c      	mov	r4, r1
 800913a:	6849      	ldr	r1, [r1, #4]
 800913c:	e7cc      	b.n	80090d8 <_malloc_r+0x2c>
 800913e:	1cc4      	adds	r4, r0, #3
 8009140:	f024 0403 	bic.w	r4, r4, #3
 8009144:	42a0      	cmp	r0, r4
 8009146:	d005      	beq.n	8009154 <_malloc_r+0xa8>
 8009148:	1a21      	subs	r1, r4, r0
 800914a:	4630      	mov	r0, r6
 800914c:	f000 f82e 	bl	80091ac <_sbrk_r>
 8009150:	3001      	adds	r0, #1
 8009152:	d0cf      	beq.n	80090f4 <_malloc_r+0x48>
 8009154:	6025      	str	r5, [r4, #0]
 8009156:	e7db      	b.n	8009110 <_malloc_r+0x64>
 8009158:	200049e4 	.word	0x200049e4
 800915c:	200049e8 	.word	0x200049e8

08009160 <_realloc_r>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	4607      	mov	r7, r0
 8009164:	4614      	mov	r4, r2
 8009166:	460e      	mov	r6, r1
 8009168:	b921      	cbnz	r1, 8009174 <_realloc_r+0x14>
 800916a:	4611      	mov	r1, r2
 800916c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009170:	f7ff bf9c 	b.w	80090ac <_malloc_r>
 8009174:	b922      	cbnz	r2, 8009180 <_realloc_r+0x20>
 8009176:	f7ff ff4b 	bl	8009010 <_free_r>
 800917a:	4625      	mov	r5, r4
 800917c:	4628      	mov	r0, r5
 800917e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009180:	f000 f826 	bl	80091d0 <_malloc_usable_size_r>
 8009184:	42a0      	cmp	r0, r4
 8009186:	d20f      	bcs.n	80091a8 <_realloc_r+0x48>
 8009188:	4621      	mov	r1, r4
 800918a:	4638      	mov	r0, r7
 800918c:	f7ff ff8e 	bl	80090ac <_malloc_r>
 8009190:	4605      	mov	r5, r0
 8009192:	2800      	cmp	r0, #0
 8009194:	d0f2      	beq.n	800917c <_realloc_r+0x1c>
 8009196:	4631      	mov	r1, r6
 8009198:	4622      	mov	r2, r4
 800919a:	f7ff fc11 	bl	80089c0 <memcpy>
 800919e:	4631      	mov	r1, r6
 80091a0:	4638      	mov	r0, r7
 80091a2:	f7ff ff35 	bl	8009010 <_free_r>
 80091a6:	e7e9      	b.n	800917c <_realloc_r+0x1c>
 80091a8:	4635      	mov	r5, r6
 80091aa:	e7e7      	b.n	800917c <_realloc_r+0x1c>

080091ac <_sbrk_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4c06      	ldr	r4, [pc, #24]	; (80091c8 <_sbrk_r+0x1c>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	4605      	mov	r5, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	f7f7 fea4 	bl	8000f04 <_sbrk>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_sbrk_r+0x1a>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_sbrk_r+0x1a>
 80091c4:	602b      	str	r3, [r5, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	20006494 	.word	0x20006494

080091cc <__malloc_lock>:
 80091cc:	4770      	bx	lr

080091ce <__malloc_unlock>:
 80091ce:	4770      	bx	lr

080091d0 <_malloc_usable_size_r>:
 80091d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d4:	1f18      	subs	r0, r3, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	bfbc      	itt	lt
 80091da:	580b      	ldrlt	r3, [r1, r0]
 80091dc:	18c0      	addlt	r0, r0, r3
 80091de:	4770      	bx	lr

080091e0 <_init>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	bf00      	nop
 80091e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e6:	bc08      	pop	{r3}
 80091e8:	469e      	mov	lr, r3
 80091ea:	4770      	bx	lr

080091ec <_fini>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr
